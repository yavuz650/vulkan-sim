// Copyright (c) 2009-2011, Tor M. Aamodt, Wilson W.L. Fung, George L. Yuan,
// Ali Bakhoda, Andrew Turner, Ivan Sham
// The University of British Columbia
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// Redistributions of source code must retain the above copyright notice, this
// list of conditions and the following disclaimer.
// Redistributions in binary form must reproduce the above copyright notice,
// this list of conditions and the following disclaimer in the documentation
// and/or other materials provided with the distribution. Neither the name of
// The University of British Columbia nor the names of its contributors may be
// used to endorse or promote products derived from this software without
// specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

#include "gpu-sim.h"

#include <math.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include "zlib.h"

#include "dram.h"
#include "mem_fetch.h"
#include "shader.h"
#include "shader_trace.h"

#include <time.h>
#include "addrdec.h"
#include "delayqueue.h"
#include "dram.h"
#include "gpu-cache.h"
#include "gpu-misc.h"
#include "icnt_wrapper.h"
#include "l2cache.h"
#include "shader.h"
#include "stat-tool.h"

#include "../../libcuda/gpgpu_context.h"
#include "../abstract_hardware_model.h"
#include "../cuda-sim/cuda-sim.h"
#include "../cuda-sim/cuda_device_runtime.h"
#include "../cuda-sim/ptx-stats.h"
#include "../cuda-sim/ptx_ir.h"
#include "../debug.h"
#include "../gpgpusim_entrypoint.h"
#include "../statwrapper.h"
#include "../trace.h"
#include "mem_latency_stat.h"
#include "power_stat.h"
#include "stats.h"
#include "visualizer.h"

#ifdef GPGPUSIM_POWER_MODEL
#include "power_interface.h"
#else
class gpgpu_sim_wrapper {};
#endif

#include <stdio.h>
#include <string.h>
#include <iostream>
#include <sstream>
#include <string>
std::vector<int> cta_group_idx;// = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29};
int next_cta_group_idx;
std::vector<std::vector<int>> static_cta_schedule;

std::vector<std::vector<int>> cta_groups4 = {
  {0,4,8,12},
  {1,5,9,13},
  {2,6,10,14},
  {3,7,11,15},
  {16,20,24,28},
  {17,21,25,29},
  {18,22,26,30},
  {19,23,27,31},
  {32,36,40,44},
  {33,37,41,45},
  {34,38,42,46},
  {35,39,43,47},
  {48,52,56,60},
  {49,53,57,61},
  {50,54,58,62},
  {51,55,59,63},
  {64,68,72,76},
  {65,69,73,77},
  {66,70,74,78},
  {67,71,75,79},
  {80,84,88,92},
  {81,85,89,93},
  {82,86,90,94},
  {83,87,91,95},
  {96,100,104,108},
  {97,101,105,109},
  {98,102,106,110},
  {99,103,107,111},
  {112,116,120,124},
  {113,117,121,125},
  {114,118,122,126},
  {115,119,123,127},
  {128,132,136,140},
  {129,133,137,141},
  {130,134,138,142},
  {131,135,139,143},
  {144,148,152,156},
  {145,149,153,157},
  {146,150,154,158},
  {147,151,155,159},
  {160,164,168,172},
  {161,165,169,173},
  {162,166,170,174},
  {163,167,171,175},
  {176,180,184,188},
  {177,181,185,189},
  {178,182,186,190},
  {179,183,187,191},
  {192,196,200,204},
  {193,197,201,205},
  {194,198,202,206},
  {195,199,203,207},
  {208,212,216,220},
  {209,213,217,221},
  {210,214,218,222},
  {211,215,219,223},
  {224,228,232,236},
  {225,229,233,237},
  {226,230,234,238},
  {227,231,235,239},
  {240,244,248,252},
  {241,245,249,253},
  {242,246,250,254},
  {243,247,251,255},
  {256,260,264,268},
  {257,261,265,269},
  {258,262,266,270},
  {259,263,267,271},
  {272,276,280,284},
  {273,277,281,285},
  {274,278,282,286},
  {275,279,283,287},
  {288,292,296,300},
  {289,293,297,301},
  {290,294,298,302},
  {291,295,299,303},
  {304,308,312,316},
  {305,309,313,317},
  {306,310,314,318},
  {307,311,315,319},
  {320,324,328,332},
  {321,325,329,333},
  {322,326,330,334},
  {323,327,331,335},
  {336,340,344,348},
  {337,341,345,349},
  {338,342,346,350},
  {339,343,347,351},
  {352,356,360,364},
  {353,357,361,365},
  {354,358,362,366},
  {355,359,363,367},
  {368,372,376,380},
  {369,373,377,381},
  {370,374,378,382},
  {371,375,379,383},
  {384,388,392,396},
  {385,389,393,397},
  {386,390,394,398},
  {387,391,395,399},
  {400,404,408,412},
  {401,405,409,413},
  {402,406,410,414},
  {403,407,411,415},
  {416,420,424,428},
  {417,421,425,429},
  {418,422,426,430},
  {419,423,427,431},
  {432,436,440,444},
  {433,437,441,445},
  {434,438,442,446},
  {435,439,443,447},
  {448,452,456,460},
  {449,453,457,461},
  {450,454,458,462},
  {451,455,459,463},
  {464,468,472,476},
  {465,469,473,477},
  {466,470,474,478},
  {467,471,475,479},
  {480,484,488,492},
  {481,485,489,493},
  {482,486,490,494},
  {483,487,491,495},
  {496,500,504,508},
  {497,501,505,509},
  {498,502,506,510},
  {499,503,507,511},
  {512,516,520,524},
  {513,517,521,525},
  {514,518,522,526},
  {515,519,523,527},
  {528,532,536,540},
  {529,533,537,541},
  {530,534,538,542},
  {531,535,539,543},
  {544,548,552,556},
  {545,549,553,557},
  {546,550,554,558},
  {547,551,555,559},
  {560,564,568,572},
  {561,565,569,573},
  {562,566,570,574},
  {563,567,571,575},
  {576,580,584,588},
  {577,581,585,589},
  {578,582,586,590},
  {579,583,587,591},
  {592,596,600,604},
  {593,597,601,605},
  {594,598,602,606},
  {595,599,603,607},
  {608,612,616,620},
  {609,613,617,621},
  {610,614,618,622},
  {611,615,619,623},
  {624,628,632,636},
  {625,629,633,637},
  {626,630,634,638},
  {627,631,635,639},
  {640,644,648,652},
  {641,645,649,653},
  {642,646,650,654},
  {643,647,651,655},
  {656,660,664,668},
  {657,661,665,669},
  {658,662,666,670},
  {659,663,667,671},
  {672,676,680,684},
  {673,677,681,685},
  {674,678,682,686},
  {675,679,683,687},
  {688,692,696,700},
  {689,693,697,701},
  {690,694,698,702},
  {691,695,699,703},
  {704,708,712,716},
  {705,709,713,717},
  {706,710,714,718},
  {707,711,715,719},
  {720,724,728,732},
  {721,725,729,733},
  {722,726,730,734},
  {723,727,731,735},
  {736,740,744,748},
  {737,741,745,749},
  {738,742,746,750},
  {739,743,747,751},
  {752,756,760,764},
  {753,757,761,765},
  {754,758,762,766},
  {755,759,763,767},
  {768,772,776,780},
  {769,773,777,781},
  {770,774,778,782},
  {771,775,779,783},
  {784,788,792,796},
  {785,789,793,797},
  {786,790,794,798},
  {787,791,795,799},
  {800,804,808,812},
  {801,805,809,813},
  {802,806,810,814},
  {803,807,811,815},
  {816,820,824,828},
  {817,821,825,829},
  {818,822,826,830},
  {819,823,827,831},
  {832,836,840,844},
  {833,837,841,845},
  {834,838,842,846},
  {835,839,843,847},
  {848,852,856,860},
  {849,853,857,861},
  {850,854,858,862},
  {851,855,859,863},
  {864,868,872,876},
  {865,869,873,877},
  {866,870,874,878},
  {867,871,875,879},
  {880,884,888,892},
  {881,885,889,893},
  {882,886,890,894},
  {883,887,891,895},
  {896,900,904,908},
  {897,901,905,909},
  {898,902,906,910},
  {899,903,907,911},
  {912,916,920,924},
  {913,917,921,925},
  {914,918,922,926},
  {915,919,923,927},
  {928,932,936,940},
  {929,933,937,941},
  {930,934,938,942},
  {931,935,939,943},
  {944,948,952,956},
  {945,949,953,957},
  {946,950,954,958},
  {947,951,955,959},
  {960,964,968,972},
  {961,965,969,973},
  {962,966,970,974},
  {963,967,971,975},
  {976,980,984,988},
  {977,981,985,989},
  {978,982,986,990},
  {979,983,987,991},
  {992,996,1000,1004},
  {993,997,1001,1005},
  {994,998,1002,1006},
  {995,999,1003,1007},
  {1008,1012,1016,1020},
  {1009,1013,1017,1021},
  {1010,1014,1018,1022},
  {1011,1015,1019,1023}
};

std::vector<std::vector<int>> cta_groups8 = {
  {0, 4, 8, 12, 16, 20, 24, 28},
  {1, 5, 9, 13, 17, 21, 25, 29},
  {2, 6, 10, 14, 18, 22, 26, 30},
  {3, 7, 11, 15, 19, 23, 27, 31},
  {32, 36, 40, 44, 48, 52, 56, 60},
  {33, 37, 41, 45, 49, 53, 57, 61},
  {34, 38, 42, 46, 50, 54, 58, 62},
  {35, 39, 43, 47, 51, 55, 59, 63},
  {64, 68, 72, 76, 80, 84, 88, 92},
  {65, 69, 73, 77, 81, 85, 89, 93},
  {66, 70, 74, 78, 82, 86, 90, 94},
  {67, 71, 75, 79, 83, 87, 91, 95},
  {96, 100, 104, 108, 112, 116, 120, 124},
  {97, 101, 105, 109, 113, 117, 121, 125},
  {98, 102, 106, 110, 114, 118, 122, 126},
  {99, 103, 107, 111, 115, 119, 123, 127},
  {128, 132, 136, 140, 144, 148, 152, 156},
  {129, 133, 137, 141, 145, 149, 153, 157},
  {130, 134, 138, 142, 146, 150, 154, 158},
  {131, 135, 139, 143, 147, 151, 155, 159},
  {160, 164, 168, 172, 176, 180, 184, 188},
  {161, 165, 169, 173, 177, 181, 185, 189},
  {162, 166, 170, 174, 178, 182, 186, 190},
  {163, 167, 171, 175, 179, 183, 187, 191},
  {192, 196, 200, 204, 208, 212, 216, 220},
  {193, 197, 201, 205, 209, 213, 217, 221},
  {194, 198, 202, 206, 210, 214, 218, 222},
  {195, 199, 203, 207, 211, 215, 219, 223},
  {224, 228, 232, 236, 240, 244, 248, 252},
  {225, 229, 233, 237, 241, 245, 249, 253},
  {226, 230, 234, 238, 242, 246, 250, 254},
  {227, 231, 235, 239, 243, 247, 251, 255},
  {256, 260, 264, 268, 272, 276, 280, 284},
  {257, 261, 265, 269, 273, 277, 281, 285},
  {258, 262, 266, 270, 274, 278, 282, 286},
  {259, 263, 267, 271, 275, 279, 283, 287},
  {288, 292, 296, 300, 304, 308, 312, 316},
  {289, 293, 297, 301, 305, 309, 313, 317},
  {290, 294, 298, 302, 306, 310, 314, 318},
  {291, 295, 299, 303, 307, 311, 315, 319},
  {320, 324, 328, 332, 336, 340, 344, 348},
  {321, 325, 329, 333, 337, 341, 345, 349},
  {322, 326, 330, 334, 338, 342, 346, 350},
  {323, 327, 331, 335, 339, 343, 347, 351},
  {352, 356, 360, 364, 368, 372, 376, 380},
  {353, 357, 361, 365, 369, 373, 377, 381},
  {354, 358, 362, 366, 370, 374, 378, 382},
  {355, 359, 363, 367, 371, 375, 379, 383},
  {384, 388, 392, 396, 400, 404, 408, 412},
  {385, 389, 393, 397, 401, 405, 409, 413},
  {386, 390, 394, 398, 402, 406, 410, 414},
  {387, 391, 395, 399, 403, 407, 411, 415},
  {416, 420, 424, 428, 432, 436, 440, 444},
  {417, 421, 425, 429, 433, 437, 441, 445},
  {418, 422, 426, 430, 434, 438, 442, 446},
  {419, 423, 427, 431, 435, 439, 443, 447},
  {448, 452, 456, 460, 464, 468, 472, 476},
  {449, 453, 457, 461, 465, 469, 473, 477},
  {450, 454, 458, 462, 466, 470, 474, 478},
  {451, 455, 459, 463, 467, 471, 475, 479},
  {480, 484, 488, 492, 496, 500, 504, 508},
  {481, 485, 489, 493, 497, 501, 505, 509},
  {482, 486, 490, 494, 498, 502, 506, 510},
  {483, 487, 491, 495, 499, 503, 507, 511},
  {512, 516, 520, 524, 528, 532, 536, 540},
  {513, 517, 521, 525, 529, 533, 537, 541},
  {514, 518, 522, 526, 530, 534, 538, 542},
  {515, 519, 523, 527, 531, 535, 539, 543},
  {544, 548, 552, 556, 560, 564, 568, 572},
  {545, 549, 553, 557, 561, 565, 569, 573},
  {546, 550, 554, 558, 562, 566, 570, 574},
  {547, 551, 555, 559, 563, 567, 571, 575},
  {576, 580, 584, 588, 592, 596, 600, 604},
  {577, 581, 585, 589, 593, 597, 601, 605},
  {578, 582, 586, 590, 594, 598, 602, 606},
  {579, 583, 587, 591, 595, 599, 603, 607},
  {608, 612, 616, 620, 624, 628, 632, 636},
  {609, 613, 617, 621, 625, 629, 633, 637},
  {610, 614, 618, 622, 626, 630, 634, 638},
  {611, 615, 619, 623, 627, 631, 635, 639},
  {640, 644, 648, 652, 656, 660, 664, 668},
  {641, 645, 649, 653, 657, 661, 665, 669},
  {642, 646, 650, 654, 658, 662, 666, 670},
  {643, 647, 651, 655, 659, 663, 667, 671},
  {672, 676, 680, 684, 688, 692, 696, 700},
  {673, 677, 681, 685, 689, 693, 697, 701},
  {674, 678, 682, 686, 690, 694, 698, 702},
  {675, 679, 683, 687, 691, 695, 699, 703},
  {704, 708, 712, 716, 720, 724, 728, 732},
  {705, 709, 713, 717, 721, 725, 729, 733},
  {706, 710, 714, 718, 722, 726, 730, 734},
  {707, 711, 715, 719, 723, 727, 731, 735},
  {736, 740, 744, 748, 752, 756, 760, 764},
  {737, 741, 745, 749, 753, 757, 761, 765},
  {738, 742, 746, 750, 754, 758, 762, 766},
  {739, 743, 747, 751, 755, 759, 763, 767},
  {768, 772, 776, 780, 784, 788, 792, 796},
  {769, 773, 777, 781, 785, 789, 793, 797},
  {770, 774, 778, 782, 786, 790, 794, 798},
  {771, 775, 779, 783, 787, 791, 795, 799},
  {800, 804, 808, 812, 816, 820, 824, 828},
  {801, 805, 809, 813, 817, 821, 825, 829},
  {802, 806, 810, 814, 818, 822, 826, 830},
  {803, 807, 811, 815, 819, 823, 827, 831},
  {832, 836, 840, 844, 848, 852, 856, 860},
  {833, 837, 841, 845, 849, 853, 857, 861},
  {834, 838, 842, 846, 850, 854, 858, 862},
  {835, 839, 843, 847, 851, 855, 859, 863},
  {864, 868, 872, 876, 880, 884, 888, 892},
  {865, 869, 873, 877, 881, 885, 889, 893},
  {866, 870, 874, 878, 882, 886, 890, 894},
  {867, 871, 875, 879, 883, 887, 891, 895},
  {896, 900, 904, 908, 912, 916, 920, 924},
  {897, 901, 905, 909, 913, 917, 921, 925},
  {898, 902, 906, 910, 914, 918, 922, 926},
  {899, 903, 907, 911, 915, 919, 923, 927},
  {928, 932, 936, 940, 944, 948, 952, 956},
  {929, 933, 937, 941, 945, 949, 953, 957},
  {930, 934, 938, 942, 946, 950, 954, 958},
  {931, 935, 939, 943, 947, 951, 955, 959},
  {960, 964, 968, 972, 976, 980, 984, 988},
  {961, 965, 969, 973, 977, 981, 985, 989},
  {962, 966, 970, 974, 978, 982, 986, 990},
  {963, 967, 971, 975, 979, 983, 987, 991},
  {992, 996, 1000, 1004, 1008, 1012, 1016, 1020},
  {993, 997, 1001, 1005, 1009, 1013, 1017, 1021},
  {994, 998, 1002, 1006, 1010, 1014, 1018, 1022},
  {995, 999, 1003, 1007, 1011, 1015, 1019, 1023}
};

std::vector<std::vector<int>> cta_groups4_4096 = {
{0,8,16,24},
{1,9,17,25},
{2,10,18,26},
{3,11,19,27},
{4,12,20,28},
{5,13,21,29},
{6,14,22,30},
{7,15,23,31},
{32,40,48,56},
{33,41,49,57},
{34,42,50,58},
{35,43,51,59},
{36,44,52,60},
{37,45,53,61},
{38,46,54,62},
{39,47,55,63},
{64,72,80,88},
{65,73,81,89},
{66,74,82,90},
{67,75,83,91},
{68,76,84,92},
{69,77,85,93},
{70,78,86,94},
{71,79,87,95},
{96,104,112,120},
{97,105,113,121},
{98,106,114,122},
{99,107,115,123},
{100,108,116,124},
{101,109,117,125},
{102,110,118,126},
{103,111,119,127},
{128,136,144,152},
{129,137,145,153},
{130,138,146,154},
{131,139,147,155},
{132,140,148,156},
{133,141,149,157},
{134,142,150,158},
{135,143,151,159},
{160,168,176,184},
{161,169,177,185},
{162,170,178,186},
{163,171,179,187},
{164,172,180,188},
{165,173,181,189},
{166,174,182,190},
{167,175,183,191},
{192,200,208,216},
{193,201,209,217},
{194,202,210,218},
{195,203,211,219},
{196,204,212,220},
{197,205,213,221},
{198,206,214,222},
{199,207,215,223},
{224,232,240,248},
{225,233,241,249},
{226,234,242,250},
{227,235,243,251},
{228,236,244,252},
{229,237,245,253},
{230,238,246,254},
{231,239,247,255},
{256,264,272,280},
{257,265,273,281},
{258,266,274,282},
{259,267,275,283},
{260,268,276,284},
{261,269,277,285},
{262,270,278,286},
{263,271,279,287},
{288,296,304,312},
{289,297,305,313},
{290,298,306,314},
{291,299,307,315},
{292,300,308,316},
{293,301,309,317},
{294,302,310,318},
{295,303,311,319},
{320,328,336,344},
{321,329,337,345},
{322,330,338,346},
{323,331,339,347},
{324,332,340,348},
{325,333,341,349},
{326,334,342,350},
{327,335,343,351},
{352,360,368,376},
{353,361,369,377},
{354,362,370,378},
{355,363,371,379},
{356,364,372,380},
{357,365,373,381},
{358,366,374,382},
{359,367,375,383},
{384,392,400,408},
{385,393,401,409},
{386,394,402,410},
{387,395,403,411},
{388,396,404,412},
{389,397,405,413},
{390,398,406,414},
{391,399,407,415},
{416,424,432,440},
{417,425,433,441},
{418,426,434,442},
{419,427,435,443},
{420,428,436,444},
{421,429,437,445},
{422,430,438,446},
{423,431,439,447},
{448,456,464,472},
{449,457,465,473},
{450,458,466,474},
{451,459,467,475},
{452,460,468,476},
{453,461,469,477},
{454,462,470,478},
{455,463,471,479},
{480,488,496,504},
{481,489,497,505},
{482,490,498,506},
{483,491,499,507},
{484,492,500,508},
{485,493,501,509},
{486,494,502,510},
{487,495,503,511},
{512,520,528,536},
{513,521,529,537},
{514,522,530,538},
{515,523,531,539},
{516,524,532,540},
{517,525,533,541},
{518,526,534,542},
{519,527,535,543},
{544,552,560,568},
{545,553,561,569},
{546,554,562,570},
{547,555,563,571},
{548,556,564,572},
{549,557,565,573},
{550,558,566,574},
{551,559,567,575},
{576,584,592,600},
{577,585,593,601},
{578,586,594,602},
{579,587,595,603},
{580,588,596,604},
{581,589,597,605},
{582,590,598,606},
{583,591,599,607},
{608,616,624,632},
{609,617,625,633},
{610,618,626,634},
{611,619,627,635},
{612,620,628,636},
{613,621,629,637},
{614,622,630,638},
{615,623,631,639},
{640,648,656,664},
{641,649,657,665},
{642,650,658,666},
{643,651,659,667},
{644,652,660,668},
{645,653,661,669},
{646,654,662,670},
{647,655,663,671},
{672,680,688,696},
{673,681,689,697},
{674,682,690,698},
{675,683,691,699},
{676,684,692,700},
{677,685,693,701},
{678,686,694,702},
{679,687,695,703},
{704,712,720,728},
{705,713,721,729},
{706,714,722,730},
{707,715,723,731},
{708,716,724,732},
{709,717,725,733},
{710,718,726,734},
{711,719,727,735},
{736,744,752,760},
{737,745,753,761},
{738,746,754,762},
{739,747,755,763},
{740,748,756,764},
{741,749,757,765},
{742,750,758,766},
{743,751,759,767},
{768,776,784,792},
{769,777,785,793},
{770,778,786,794},
{771,779,787,795},
{772,780,788,796},
{773,781,789,797},
{774,782,790,798},
{775,783,791,799},
{800,808,816,824},
{801,809,817,825},
{802,810,818,826},
{803,811,819,827},
{804,812,820,828},
{805,813,821,829},
{806,814,822,830},
{807,815,823,831},
{832,840,848,856},
{833,841,849,857},
{834,842,850,858},
{835,843,851,859},
{836,844,852,860},
{837,845,853,861},
{838,846,854,862},
{839,847,855,863},
{864,872,880,888},
{865,873,881,889},
{866,874,882,890},
{867,875,883,891},
{868,876,884,892},
{869,877,885,893},
{870,878,886,894},
{871,879,887,895},
{896,904,912,920},
{897,905,913,921},
{898,906,914,922},
{899,907,915,923},
{900,908,916,924},
{901,909,917,925},
{902,910,918,926},
{903,911,919,927},
{928,936,944,952},
{929,937,945,953},
{930,938,946,954},
{931,939,947,955},
{932,940,948,956},
{933,941,949,957},
{934,942,950,958},
{935,943,951,959},
{960,968,976,984},
{961,969,977,985},
{962,970,978,986},
{963,971,979,987},
{964,972,980,988},
{965,973,981,989},
{966,974,982,990},
{967,975,983,991},
{992,1000,1008,1016},
{993,1001,1009,1017},
{994,1002,1010,1018},
{995,1003,1011,1019},
{996,1004,1012,1020},
{997,1005,1013,1021},
{998,1006,1014,1022},
{999,1007,1015,1023},
{1024,1032,1040,1048},
{1025,1033,1041,1049},
{1026,1034,1042,1050},
{1027,1035,1043,1051},
{1028,1036,1044,1052},
{1029,1037,1045,1053},
{1030,1038,1046,1054},
{1031,1039,1047,1055},
{1056,1064,1072,1080},
{1057,1065,1073,1081},
{1058,1066,1074,1082},
{1059,1067,1075,1083},
{1060,1068,1076,1084},
{1061,1069,1077,1085},
{1062,1070,1078,1086},
{1063,1071,1079,1087},
{1088,1096,1104,1112},
{1089,1097,1105,1113},
{1090,1098,1106,1114},
{1091,1099,1107,1115},
{1092,1100,1108,1116},
{1093,1101,1109,1117},
{1094,1102,1110,1118},
{1095,1103,1111,1119},
{1120,1128,1136,1144},
{1121,1129,1137,1145},
{1122,1130,1138,1146},
{1123,1131,1139,1147},
{1124,1132,1140,1148},
{1125,1133,1141,1149},
{1126,1134,1142,1150},
{1127,1135,1143,1151},
{1152,1160,1168,1176},
{1153,1161,1169,1177},
{1154,1162,1170,1178},
{1155,1163,1171,1179},
{1156,1164,1172,1180},
{1157,1165,1173,1181},
{1158,1166,1174,1182},
{1159,1167,1175,1183},
{1184,1192,1200,1208},
{1185,1193,1201,1209},
{1186,1194,1202,1210},
{1187,1195,1203,1211},
{1188,1196,1204,1212},
{1189,1197,1205,1213},
{1190,1198,1206,1214},
{1191,1199,1207,1215},
{1216,1224,1232,1240},
{1217,1225,1233,1241},
{1218,1226,1234,1242},
{1219,1227,1235,1243},
{1220,1228,1236,1244},
{1221,1229,1237,1245},
{1222,1230,1238,1246},
{1223,1231,1239,1247},
{1248,1256,1264,1272},
{1249,1257,1265,1273},
{1250,1258,1266,1274},
{1251,1259,1267,1275},
{1252,1260,1268,1276},
{1253,1261,1269,1277},
{1254,1262,1270,1278},
{1255,1263,1271,1279},
{1280,1288,1296,1304},
{1281,1289,1297,1305},
{1282,1290,1298,1306},
{1283,1291,1299,1307},
{1284,1292,1300,1308},
{1285,1293,1301,1309},
{1286,1294,1302,1310},
{1287,1295,1303,1311},
{1312,1320,1328,1336},
{1313,1321,1329,1337},
{1314,1322,1330,1338},
{1315,1323,1331,1339},
{1316,1324,1332,1340},
{1317,1325,1333,1341},
{1318,1326,1334,1342},
{1319,1327,1335,1343},
{1344,1352,1360,1368},
{1345,1353,1361,1369},
{1346,1354,1362,1370},
{1347,1355,1363,1371},
{1348,1356,1364,1372},
{1349,1357,1365,1373},
{1350,1358,1366,1374},
{1351,1359,1367,1375},
{1376,1384,1392,1400},
{1377,1385,1393,1401},
{1378,1386,1394,1402},
{1379,1387,1395,1403},
{1380,1388,1396,1404},
{1381,1389,1397,1405},
{1382,1390,1398,1406},
{1383,1391,1399,1407},
{1408,1416,1424,1432},
{1409,1417,1425,1433},
{1410,1418,1426,1434},
{1411,1419,1427,1435},
{1412,1420,1428,1436},
{1413,1421,1429,1437},
{1414,1422,1430,1438},
{1415,1423,1431,1439},
{1440,1448,1456,1464},
{1441,1449,1457,1465},
{1442,1450,1458,1466},
{1443,1451,1459,1467},
{1444,1452,1460,1468},
{1445,1453,1461,1469},
{1446,1454,1462,1470},
{1447,1455,1463,1471},
{1472,1480,1488,1496},
{1473,1481,1489,1497},
{1474,1482,1490,1498},
{1475,1483,1491,1499},
{1476,1484,1492,1500},
{1477,1485,1493,1501},
{1478,1486,1494,1502},
{1479,1487,1495,1503},
{1504,1512,1520,1528},
{1505,1513,1521,1529},
{1506,1514,1522,1530},
{1507,1515,1523,1531},
{1508,1516,1524,1532},
{1509,1517,1525,1533},
{1510,1518,1526,1534},
{1511,1519,1527,1535},
{1536,1544,1552,1560},
{1537,1545,1553,1561},
{1538,1546,1554,1562},
{1539,1547,1555,1563},
{1540,1548,1556,1564},
{1541,1549,1557,1565},
{1542,1550,1558,1566},
{1543,1551,1559,1567},
{1568,1576,1584,1592},
{1569,1577,1585,1593},
{1570,1578,1586,1594},
{1571,1579,1587,1595},
{1572,1580,1588,1596},
{1573,1581,1589,1597},
{1574,1582,1590,1598},
{1575,1583,1591,1599},
{1600,1608,1616,1624},
{1601,1609,1617,1625},
{1602,1610,1618,1626},
{1603,1611,1619,1627},
{1604,1612,1620,1628},
{1605,1613,1621,1629},
{1606,1614,1622,1630},
{1607,1615,1623,1631},
{1632,1640,1648,1656},
{1633,1641,1649,1657},
{1634,1642,1650,1658},
{1635,1643,1651,1659},
{1636,1644,1652,1660},
{1637,1645,1653,1661},
{1638,1646,1654,1662},
{1639,1647,1655,1663},
{1664,1672,1680,1688},
{1665,1673,1681,1689},
{1666,1674,1682,1690},
{1667,1675,1683,1691},
{1668,1676,1684,1692},
{1669,1677,1685,1693},
{1670,1678,1686,1694},
{1671,1679,1687,1695},
{1696,1704,1712,1720},
{1697,1705,1713,1721},
{1698,1706,1714,1722},
{1699,1707,1715,1723},
{1700,1708,1716,1724},
{1701,1709,1717,1725},
{1702,1710,1718,1726},
{1703,1711,1719,1727},
{1728,1736,1744,1752},
{1729,1737,1745,1753},
{1730,1738,1746,1754},
{1731,1739,1747,1755},
{1732,1740,1748,1756},
{1733,1741,1749,1757},
{1734,1742,1750,1758},
{1735,1743,1751,1759},
{1760,1768,1776,1784},
{1761,1769,1777,1785},
{1762,1770,1778,1786},
{1763,1771,1779,1787},
{1764,1772,1780,1788},
{1765,1773,1781,1789},
{1766,1774,1782,1790},
{1767,1775,1783,1791},
{1792,1800,1808,1816},
{1793,1801,1809,1817},
{1794,1802,1810,1818},
{1795,1803,1811,1819},
{1796,1804,1812,1820},
{1797,1805,1813,1821},
{1798,1806,1814,1822},
{1799,1807,1815,1823},
{1824,1832,1840,1848},
{1825,1833,1841,1849},
{1826,1834,1842,1850},
{1827,1835,1843,1851},
{1828,1836,1844,1852},
{1829,1837,1845,1853},
{1830,1838,1846,1854},
{1831,1839,1847,1855},
{1856,1864,1872,1880},
{1857,1865,1873,1881},
{1858,1866,1874,1882},
{1859,1867,1875,1883},
{1860,1868,1876,1884},
{1861,1869,1877,1885},
{1862,1870,1878,1886},
{1863,1871,1879,1887},
{1888,1896,1904,1912},
{1889,1897,1905,1913},
{1890,1898,1906,1914},
{1891,1899,1907,1915},
{1892,1900,1908,1916},
{1893,1901,1909,1917},
{1894,1902,1910,1918},
{1895,1903,1911,1919},
{1920,1928,1936,1944},
{1921,1929,1937,1945},
{1922,1930,1938,1946},
{1923,1931,1939,1947},
{1924,1932,1940,1948},
{1925,1933,1941,1949},
{1926,1934,1942,1950},
{1927,1935,1943,1951},
{1952,1960,1968,1976},
{1953,1961,1969,1977},
{1954,1962,1970,1978},
{1955,1963,1971,1979},
{1956,1964,1972,1980},
{1957,1965,1973,1981},
{1958,1966,1974,1982},
{1959,1967,1975,1983},
{1984,1992,2000,2008},
{1985,1993,2001,2009},
{1986,1994,2002,2010},
{1987,1995,2003,2011},
{1988,1996,2004,2012},
{1989,1997,2005,2013},
{1990,1998,2006,2014},
{1991,1999,2007,2015},
{2016,2024,2032,2040},
{2017,2025,2033,2041},
{2018,2026,2034,2042},
{2019,2027,2035,2043},
{2020,2028,2036,2044},
{2021,2029,2037,2045},
{2022,2030,2038,2046},
{2023,2031,2039,2047},
{2048,2056,2064,2072},
{2049,2057,2065,2073},
{2050,2058,2066,2074},
{2051,2059,2067,2075},
{2052,2060,2068,2076},
{2053,2061,2069,2077},
{2054,2062,2070,2078},
{2055,2063,2071,2079},
{2080,2088,2096,2104},
{2081,2089,2097,2105},
{2082,2090,2098,2106},
{2083,2091,2099,2107},
{2084,2092,2100,2108},
{2085,2093,2101,2109},
{2086,2094,2102,2110},
{2087,2095,2103,2111},
{2112,2120,2128,2136},
{2113,2121,2129,2137},
{2114,2122,2130,2138},
{2115,2123,2131,2139},
{2116,2124,2132,2140},
{2117,2125,2133,2141},
{2118,2126,2134,2142},
{2119,2127,2135,2143},
{2144,2152,2160,2168},
{2145,2153,2161,2169},
{2146,2154,2162,2170},
{2147,2155,2163,2171},
{2148,2156,2164,2172},
{2149,2157,2165,2173},
{2150,2158,2166,2174},
{2151,2159,2167,2175},
{2176,2184,2192,2200},
{2177,2185,2193,2201},
{2178,2186,2194,2202},
{2179,2187,2195,2203},
{2180,2188,2196,2204},
{2181,2189,2197,2205},
{2182,2190,2198,2206},
{2183,2191,2199,2207},
{2208,2216,2224,2232},
{2209,2217,2225,2233},
{2210,2218,2226,2234},
{2211,2219,2227,2235},
{2212,2220,2228,2236},
{2213,2221,2229,2237},
{2214,2222,2230,2238},
{2215,2223,2231,2239},
{2240,2248,2256,2264},
{2241,2249,2257,2265},
{2242,2250,2258,2266},
{2243,2251,2259,2267},
{2244,2252,2260,2268},
{2245,2253,2261,2269},
{2246,2254,2262,2270},
{2247,2255,2263,2271},
{2272,2280,2288,2296},
{2273,2281,2289,2297},
{2274,2282,2290,2298},
{2275,2283,2291,2299},
{2276,2284,2292,2300},
{2277,2285,2293,2301},
{2278,2286,2294,2302},
{2279,2287,2295,2303},
{2304,2312,2320,2328},
{2305,2313,2321,2329},
{2306,2314,2322,2330},
{2307,2315,2323,2331},
{2308,2316,2324,2332},
{2309,2317,2325,2333},
{2310,2318,2326,2334},
{2311,2319,2327,2335},
{2336,2344,2352,2360},
{2337,2345,2353,2361},
{2338,2346,2354,2362},
{2339,2347,2355,2363},
{2340,2348,2356,2364},
{2341,2349,2357,2365},
{2342,2350,2358,2366},
{2343,2351,2359,2367},
{2368,2376,2384,2392},
{2369,2377,2385,2393},
{2370,2378,2386,2394},
{2371,2379,2387,2395},
{2372,2380,2388,2396},
{2373,2381,2389,2397},
{2374,2382,2390,2398},
{2375,2383,2391,2399},
{2400,2408,2416,2424},
{2401,2409,2417,2425},
{2402,2410,2418,2426},
{2403,2411,2419,2427},
{2404,2412,2420,2428},
{2405,2413,2421,2429},
{2406,2414,2422,2430},
{2407,2415,2423,2431},
{2432,2440,2448,2456},
{2433,2441,2449,2457},
{2434,2442,2450,2458},
{2435,2443,2451,2459},
{2436,2444,2452,2460},
{2437,2445,2453,2461},
{2438,2446,2454,2462},
{2439,2447,2455,2463},
{2464,2472,2480,2488},
{2465,2473,2481,2489},
{2466,2474,2482,2490},
{2467,2475,2483,2491},
{2468,2476,2484,2492},
{2469,2477,2485,2493},
{2470,2478,2486,2494},
{2471,2479,2487,2495},
{2496,2504,2512,2520},
{2497,2505,2513,2521},
{2498,2506,2514,2522},
{2499,2507,2515,2523},
{2500,2508,2516,2524},
{2501,2509,2517,2525},
{2502,2510,2518,2526},
{2503,2511,2519,2527},
{2528,2536,2544,2552},
{2529,2537,2545,2553},
{2530,2538,2546,2554},
{2531,2539,2547,2555},
{2532,2540,2548,2556},
{2533,2541,2549,2557},
{2534,2542,2550,2558},
{2535,2543,2551,2559},
{2560,2568,2576,2584},
{2561,2569,2577,2585},
{2562,2570,2578,2586},
{2563,2571,2579,2587},
{2564,2572,2580,2588},
{2565,2573,2581,2589},
{2566,2574,2582,2590},
{2567,2575,2583,2591},
{2592,2600,2608,2616},
{2593,2601,2609,2617},
{2594,2602,2610,2618},
{2595,2603,2611,2619},
{2596,2604,2612,2620},
{2597,2605,2613,2621},
{2598,2606,2614,2622},
{2599,2607,2615,2623},
{2624,2632,2640,2648},
{2625,2633,2641,2649},
{2626,2634,2642,2650},
{2627,2635,2643,2651},
{2628,2636,2644,2652},
{2629,2637,2645,2653},
{2630,2638,2646,2654},
{2631,2639,2647,2655},
{2656,2664,2672,2680},
{2657,2665,2673,2681},
{2658,2666,2674,2682},
{2659,2667,2675,2683},
{2660,2668,2676,2684},
{2661,2669,2677,2685},
{2662,2670,2678,2686},
{2663,2671,2679,2687},
{2688,2696,2704,2712},
{2689,2697,2705,2713},
{2690,2698,2706,2714},
{2691,2699,2707,2715},
{2692,2700,2708,2716},
{2693,2701,2709,2717},
{2694,2702,2710,2718},
{2695,2703,2711,2719},
{2720,2728,2736,2744},
{2721,2729,2737,2745},
{2722,2730,2738,2746},
{2723,2731,2739,2747},
{2724,2732,2740,2748},
{2725,2733,2741,2749},
{2726,2734,2742,2750},
{2727,2735,2743,2751},
{2752,2760,2768,2776},
{2753,2761,2769,2777},
{2754,2762,2770,2778},
{2755,2763,2771,2779},
{2756,2764,2772,2780},
{2757,2765,2773,2781},
{2758,2766,2774,2782},
{2759,2767,2775,2783},
{2784,2792,2800,2808},
{2785,2793,2801,2809},
{2786,2794,2802,2810},
{2787,2795,2803,2811},
{2788,2796,2804,2812},
{2789,2797,2805,2813},
{2790,2798,2806,2814},
{2791,2799,2807,2815},
{2816,2824,2832,2840},
{2817,2825,2833,2841},
{2818,2826,2834,2842},
{2819,2827,2835,2843},
{2820,2828,2836,2844},
{2821,2829,2837,2845},
{2822,2830,2838,2846},
{2823,2831,2839,2847},
{2848,2856,2864,2872},
{2849,2857,2865,2873},
{2850,2858,2866,2874},
{2851,2859,2867,2875},
{2852,2860,2868,2876},
{2853,2861,2869,2877},
{2854,2862,2870,2878},
{2855,2863,2871,2879},
{2880,2888,2896,2904},
{2881,2889,2897,2905},
{2882,2890,2898,2906},
{2883,2891,2899,2907},
{2884,2892,2900,2908},
{2885,2893,2901,2909},
{2886,2894,2902,2910},
{2887,2895,2903,2911},
{2912,2920,2928,2936},
{2913,2921,2929,2937},
{2914,2922,2930,2938},
{2915,2923,2931,2939},
{2916,2924,2932,2940},
{2917,2925,2933,2941},
{2918,2926,2934,2942},
{2919,2927,2935,2943},
{2944,2952,2960,2968},
{2945,2953,2961,2969},
{2946,2954,2962,2970},
{2947,2955,2963,2971},
{2948,2956,2964,2972},
{2949,2957,2965,2973},
{2950,2958,2966,2974},
{2951,2959,2967,2975},
{2976,2984,2992,3000},
{2977,2985,2993,3001},
{2978,2986,2994,3002},
{2979,2987,2995,3003},
{2980,2988,2996,3004},
{2981,2989,2997,3005},
{2982,2990,2998,3006},
{2983,2991,2999,3007},
{3008,3016,3024,3032},
{3009,3017,3025,3033},
{3010,3018,3026,3034},
{3011,3019,3027,3035},
{3012,3020,3028,3036},
{3013,3021,3029,3037},
{3014,3022,3030,3038},
{3015,3023,3031,3039},
{3040,3048,3056,3064},
{3041,3049,3057,3065},
{3042,3050,3058,3066},
{3043,3051,3059,3067},
{3044,3052,3060,3068},
{3045,3053,3061,3069},
{3046,3054,3062,3070},
{3047,3055,3063,3071},
{3072,3080,3088,3096},
{3073,3081,3089,3097},
{3074,3082,3090,3098},
{3075,3083,3091,3099},
{3076,3084,3092,3100},
{3077,3085,3093,3101},
{3078,3086,3094,3102},
{3079,3087,3095,3103},
{3104,3112,3120,3128},
{3105,3113,3121,3129},
{3106,3114,3122,3130},
{3107,3115,3123,3131},
{3108,3116,3124,3132},
{3109,3117,3125,3133},
{3110,3118,3126,3134},
{3111,3119,3127,3135},
{3136,3144,3152,3160},
{3137,3145,3153,3161},
{3138,3146,3154,3162},
{3139,3147,3155,3163},
{3140,3148,3156,3164},
{3141,3149,3157,3165},
{3142,3150,3158,3166},
{3143,3151,3159,3167},
{3168,3176,3184,3192},
{3169,3177,3185,3193},
{3170,3178,3186,3194},
{3171,3179,3187,3195},
{3172,3180,3188,3196},
{3173,3181,3189,3197},
{3174,3182,3190,3198},
{3175,3183,3191,3199},
{3200,3208,3216,3224},
{3201,3209,3217,3225},
{3202,3210,3218,3226},
{3203,3211,3219,3227},
{3204,3212,3220,3228},
{3205,3213,3221,3229},
{3206,3214,3222,3230},
{3207,3215,3223,3231},
{3232,3240,3248,3256},
{3233,3241,3249,3257},
{3234,3242,3250,3258},
{3235,3243,3251,3259},
{3236,3244,3252,3260},
{3237,3245,3253,3261},
{3238,3246,3254,3262},
{3239,3247,3255,3263},
{3264,3272,3280,3288},
{3265,3273,3281,3289},
{3266,3274,3282,3290},
{3267,3275,3283,3291},
{3268,3276,3284,3292},
{3269,3277,3285,3293},
{3270,3278,3286,3294},
{3271,3279,3287,3295},
{3296,3304,3312,3320},
{3297,3305,3313,3321},
{3298,3306,3314,3322},
{3299,3307,3315,3323},
{3300,3308,3316,3324},
{3301,3309,3317,3325},
{3302,3310,3318,3326},
{3303,3311,3319,3327},
{3328,3336,3344,3352},
{3329,3337,3345,3353},
{3330,3338,3346,3354},
{3331,3339,3347,3355},
{3332,3340,3348,3356},
{3333,3341,3349,3357},
{3334,3342,3350,3358},
{3335,3343,3351,3359},
{3360,3368,3376,3384},
{3361,3369,3377,3385},
{3362,3370,3378,3386},
{3363,3371,3379,3387},
{3364,3372,3380,3388},
{3365,3373,3381,3389},
{3366,3374,3382,3390},
{3367,3375,3383,3391},
{3392,3400,3408,3416},
{3393,3401,3409,3417},
{3394,3402,3410,3418},
{3395,3403,3411,3419},
{3396,3404,3412,3420},
{3397,3405,3413,3421},
{3398,3406,3414,3422},
{3399,3407,3415,3423},
{3424,3432,3440,3448},
{3425,3433,3441,3449},
{3426,3434,3442,3450},
{3427,3435,3443,3451},
{3428,3436,3444,3452},
{3429,3437,3445,3453},
{3430,3438,3446,3454},
{3431,3439,3447,3455},
{3456,3464,3472,3480},
{3457,3465,3473,3481},
{3458,3466,3474,3482},
{3459,3467,3475,3483},
{3460,3468,3476,3484},
{3461,3469,3477,3485},
{3462,3470,3478,3486},
{3463,3471,3479,3487},
{3488,3496,3504,3512},
{3489,3497,3505,3513},
{3490,3498,3506,3514},
{3491,3499,3507,3515},
{3492,3500,3508,3516},
{3493,3501,3509,3517},
{3494,3502,3510,3518},
{3495,3503,3511,3519},
{3520,3528,3536,3544},
{3521,3529,3537,3545},
{3522,3530,3538,3546},
{3523,3531,3539,3547},
{3524,3532,3540,3548},
{3525,3533,3541,3549},
{3526,3534,3542,3550},
{3527,3535,3543,3551},
{3552,3560,3568,3576},
{3553,3561,3569,3577},
{3554,3562,3570,3578},
{3555,3563,3571,3579},
{3556,3564,3572,3580},
{3557,3565,3573,3581},
{3558,3566,3574,3582},
{3559,3567,3575,3583},
{3584,3592,3600,3608},
{3585,3593,3601,3609},
{3586,3594,3602,3610},
{3587,3595,3603,3611},
{3588,3596,3604,3612},
{3589,3597,3605,3613},
{3590,3598,3606,3614},
{3591,3599,3607,3615},
{3616,3624,3632,3640},
{3617,3625,3633,3641},
{3618,3626,3634,3642},
{3619,3627,3635,3643},
{3620,3628,3636,3644},
{3621,3629,3637,3645},
{3622,3630,3638,3646},
{3623,3631,3639,3647},
{3648,3656,3664,3672},
{3649,3657,3665,3673},
{3650,3658,3666,3674},
{3651,3659,3667,3675},
{3652,3660,3668,3676},
{3653,3661,3669,3677},
{3654,3662,3670,3678},
{3655,3663,3671,3679},
{3680,3688,3696,3704},
{3681,3689,3697,3705},
{3682,3690,3698,3706},
{3683,3691,3699,3707},
{3684,3692,3700,3708},
{3685,3693,3701,3709},
{3686,3694,3702,3710},
{3687,3695,3703,3711},
{3712,3720,3728,3736},
{3713,3721,3729,3737},
{3714,3722,3730,3738},
{3715,3723,3731,3739},
{3716,3724,3732,3740},
{3717,3725,3733,3741},
{3718,3726,3734,3742},
{3719,3727,3735,3743},
{3744,3752,3760,3768},
{3745,3753,3761,3769},
{3746,3754,3762,3770},
{3747,3755,3763,3771},
{3748,3756,3764,3772},
{3749,3757,3765,3773},
{3750,3758,3766,3774},
{3751,3759,3767,3775},
{3776,3784,3792,3800},
{3777,3785,3793,3801},
{3778,3786,3794,3802},
{3779,3787,3795,3803},
{3780,3788,3796,3804},
{3781,3789,3797,3805},
{3782,3790,3798,3806},
{3783,3791,3799,3807},
{3808,3816,3824,3832},
{3809,3817,3825,3833},
{3810,3818,3826,3834},
{3811,3819,3827,3835},
{3812,3820,3828,3836},
{3813,3821,3829,3837},
{3814,3822,3830,3838},
{3815,3823,3831,3839},
{3840,3848,3856,3864},
{3841,3849,3857,3865},
{3842,3850,3858,3866},
{3843,3851,3859,3867},
{3844,3852,3860,3868},
{3845,3853,3861,3869},
{3846,3854,3862,3870},
{3847,3855,3863,3871},
{3872,3880,3888,3896},
{3873,3881,3889,3897},
{3874,3882,3890,3898},
{3875,3883,3891,3899},
{3876,3884,3892,3900},
{3877,3885,3893,3901},
{3878,3886,3894,3902},
{3879,3887,3895,3903},
{3904,3912,3920,3928},
{3905,3913,3921,3929},
{3906,3914,3922,3930},
{3907,3915,3923,3931},
{3908,3916,3924,3932},
{3909,3917,3925,3933},
{3910,3918,3926,3934},
{3911,3919,3927,3935},
{3936,3944,3952,3960},
{3937,3945,3953,3961},
{3938,3946,3954,3962},
{3939,3947,3955,3963},
{3940,3948,3956,3964},
{3941,3949,3957,3965},
{3942,3950,3958,3966},
{3943,3951,3959,3967},
{3968,3976,3984,3992},
{3969,3977,3985,3993},
{3970,3978,3986,3994},
{3971,3979,3987,3995},
{3972,3980,3988,3996},
{3973,3981,3989,3997},
{3974,3982,3990,3998},
{3975,3983,3991,3999},
{4000,4008,4016,4024},
{4001,4009,4017,4025},
{4002,4010,4018,4026},
{4003,4011,4019,4027},
{4004,4012,4020,4028},
{4005,4013,4021,4029},
{4006,4014,4022,4030},
{4007,4015,4023,4031},
{4032,4040,4048,4056},
{4033,4041,4049,4057},
{4034,4042,4050,4058},
{4035,4043,4051,4059},
{4036,4044,4052,4060},
{4037,4045,4053,4061},
{4038,4046,4054,4062},
{4039,4047,4055,4063},
{4064,4072,4080,4088},
{4065,4073,4081,4089},
{4066,4074,4082,4090},
{4067,4075,4083,4091},
{4068,4076,4084,4092},
{4069,4077,4085,4093},
{4070,4078,4086,4094},
{4071,4079,4087,4095}};

std::vector<std::vector<int>> cta_groups4_8x4 = {
{0,16,32,48},
{1,17,33,49},
{2,18,34,50},
{3,19,35,51},
{4,20,36,52},
{5,21,37,53},
{6,22,38,54},
{7,23,39,55},
{8,24,40,56},
{9,25,41,57},
{10,26,42,58},
{11,27,43,59},
{12,28,44,60},
{13,29,45,61},
{14,30,46,62},
{15,31,47,63},
{64,80,96,112},
{65,81,97,113},
{66,82,98,114},
{67,83,99,115},
{68,84,100,116},
{69,85,101,117},
{70,86,102,118},
{71,87,103,119},
{72,88,104,120},
{73,89,105,121},
{74,90,106,122},
{75,91,107,123},
{76,92,108,124},
{77,93,109,125},
{78,94,110,126},
{79,95,111,127},
{128,144,160,176},
{129,145,161,177},
{130,146,162,178},
{131,147,163,179},
{132,148,164,180},
{133,149,165,181},
{134,150,166,182},
{135,151,167,183},
{136,152,168,184},
{137,153,169,185},
{138,154,170,186},
{139,155,171,187},
{140,156,172,188},
{141,157,173,189},
{142,158,174,190},
{143,159,175,191},
{192,208,224,240},
{193,209,225,241},
{194,210,226,242},
{195,211,227,243},
{196,212,228,244},
{197,213,229,245},
{198,214,230,246},
{199,215,231,247},
{200,216,232,248},
{201,217,233,249},
{202,218,234,250},
{203,219,235,251},
{204,220,236,252},
{205,221,237,253},
{206,222,238,254},
{207,223,239,255},
{256,272,288,304},
{257,273,289,305},
{258,274,290,306},
{259,275,291,307},
{260,276,292,308},
{261,277,293,309},
{262,278,294,310},
{263,279,295,311},
{264,280,296,312},
{265,281,297,313},
{266,282,298,314},
{267,283,299,315},
{268,284,300,316},
{269,285,301,317},
{270,286,302,318},
{271,287,303,319},
{320,336,352,368},
{321,337,353,369},
{322,338,354,370},
{323,339,355,371},
{324,340,356,372},
{325,341,357,373},
{326,342,358,374},
{327,343,359,375},
{328,344,360,376},
{329,345,361,377},
{330,346,362,378},
{331,347,363,379},
{332,348,364,380},
{333,349,365,381},
{334,350,366,382},
{335,351,367,383},
{384,400,416,432},
{385,401,417,433},
{386,402,418,434},
{387,403,419,435},
{388,404,420,436},
{389,405,421,437},
{390,406,422,438},
{391,407,423,439},
{392,408,424,440},
{393,409,425,441},
{394,410,426,442},
{395,411,427,443},
{396,412,428,444},
{397,413,429,445},
{398,414,430,446},
{399,415,431,447},
{448,464,480,496},
{449,465,481,497},
{450,466,482,498},
{451,467,483,499},
{452,468,484,500},
{453,469,485,501},
{454,470,486,502},
{455,471,487,503},
{456,472,488,504},
{457,473,489,505},
{458,474,490,506},
{459,475,491,507},
{460,476,492,508},
{461,477,493,509},
{462,478,494,510},
{463,479,495,511},
{512,528,544,560},
{513,529,545,561},
{514,530,546,562},
{515,531,547,563},
{516,532,548,564},
{517,533,549,565},
{518,534,550,566},
{519,535,551,567},
{520,536,552,568},
{521,537,553,569},
{522,538,554,570},
{523,539,555,571},
{524,540,556,572},
{525,541,557,573},
{526,542,558,574},
{527,543,559,575},
{576,592,608,624},
{577,593,609,625},
{578,594,610,626},
{579,595,611,627},
{580,596,612,628},
{581,597,613,629},
{582,598,614,630},
{583,599,615,631},
{584,600,616,632},
{585,601,617,633},
{586,602,618,634},
{587,603,619,635},
{588,604,620,636},
{589,605,621,637},
{590,606,622,638},
{591,607,623,639},
{640,656,672,688},
{641,657,673,689},
{642,658,674,690},
{643,659,675,691},
{644,660,676,692},
{645,661,677,693},
{646,662,678,694},
{647,663,679,695},
{648,664,680,696},
{649,665,681,697},
{650,666,682,698},
{651,667,683,699},
{652,668,684,700},
{653,669,685,701},
{654,670,686,702},
{655,671,687,703},
{704,720,736,752},
{705,721,737,753},
{706,722,738,754},
{707,723,739,755},
{708,724,740,756},
{709,725,741,757},
{710,726,742,758},
{711,727,743,759},
{712,728,744,760},
{713,729,745,761},
{714,730,746,762},
{715,731,747,763},
{716,732,748,764},
{717,733,749,765},
{718,734,750,766},
{719,735,751,767},
{768,784,800,816},
{769,785,801,817},
{770,786,802,818},
{771,787,803,819},
{772,788,804,820},
{773,789,805,821},
{774,790,806,822},
{775,791,807,823},
{776,792,808,824},
{777,793,809,825},
{778,794,810,826},
{779,795,811,827},
{780,796,812,828},
{781,797,813,829},
{782,798,814,830},
{783,799,815,831},
{832,848,864,880},
{833,849,865,881},
{834,850,866,882},
{835,851,867,883},
{836,852,868,884},
{837,853,869,885},
{838,854,870,886},
{839,855,871,887},
{840,856,872,888},
{841,857,873,889},
{842,858,874,890},
{843,859,875,891},
{844,860,876,892},
{845,861,877,893},
{846,862,878,894},
{847,863,879,895},
{896,912,928,944},
{897,913,929,945},
{898,914,930,946},
{899,915,931,947},
{900,916,932,948},
{901,917,933,949},
{902,918,934,950},
{903,919,935,951},
{904,920,936,952},
{905,921,937,953},
{906,922,938,954},
{907,923,939,955},
{908,924,940,956},
{909,925,941,957},
{910,926,942,958},
{911,927,943,959},
{960,976,992,1008},
{961,977,993,1009},
{962,978,994,1010},
{963,979,995,1011},
{964,980,996,1012},
{965,981,997,1013},
{966,982,998,1014},
{967,983,999,1015},
{968,984,1000,1016},
{969,985,1001,1017},
{970,986,1002,1018},
{971,987,1003,1019},
{972,988,1004,1020},
{973,989,1005,1021},
{974,990,1006,1022},
{975,991,1007,1023}};

std::vector<std::vector<int>> cta_groups4_interleaved1 = { 
{0,16,32,48},
{1,17,33,49},
{2,18,34,50},
{3,19,35,51},
{4,20,36,52},
{5,21,37,53},
{6,22,38,54},
{7,23,39,55},
{8,24,40,56},
{9,25,41,57},
{10,26,42,58},
{11,27,43,59},
{12,28,44,60},
{13,29,45,61},
{14,30,46,62},
{15,31,47,63},
{64,80,96,112},
{65,81,97,113},
{66,82,98,114},
{67,83,99,115},
{68,84,100,116},
{69,85,101,117},
{70,86,102,118},
{71,87,103,119},
{72,88,104,120},
{73,89,105,121},
{74,90,106,122},
{75,91,107,123},
{76,92,108,124},
{77,93,109,125},
{78,94,110,126},
{79,95,111,127},
{128,144,160,176},
{129,145,161,177},
{130,146,162,178},
{131,147,163,179},
{132,148,164,180},
{133,149,165,181},
{134,150,166,182},
{135,151,167,183},
{136,152,168,184},
{137,153,169,185},
{138,154,170,186},
{139,155,171,187},
{140,156,172,188},
{141,157,173,189},
{142,158,174,190},
{143,159,175,191},
{192,208,224,240},
{193,209,225,241},
{194,210,226,242},
{195,211,227,243},
{196,212,228,244},
{197,213,229,245},
{198,214,230,246},
{199,215,231,247},
{200,216,232,248},
{201,217,233,249},
{202,218,234,250},
{203,219,235,251},
{204,220,236,252},
{205,221,237,253},
{206,222,238,254},
{207,223,239,255},
{256,272,288,304},
{257,273,289,305},
{258,274,290,306},
{259,275,291,307},
{260,276,292,308},
{261,277,293,309},
{262,278,294,310},
{263,279,295,311},
{264,280,296,312},
{265,281,297,313},
{266,282,298,314},
{267,283,299,315},
{268,284,300,316},
{269,285,301,317},
{270,286,302,318},
{271,287,303,319},
{320,336,352,368},
{321,337,353,369},
{322,338,354,370},
{323,339,355,371},
{324,340,356,372},
{325,341,357,373},
{326,342,358,374},
{327,343,359,375},
{328,344,360,376},
{329,345,361,377},
{330,346,362,378},
{331,347,363,379},
{332,348,364,380},
{333,349,365,381},
{334,350,366,382},
{335,351,367,383},
{384,400,416,432},
{385,401,417,433},
{386,402,418,434},
{387,403,419,435},
{388,404,420,436},
{389,405,421,437},
{390,406,422,438},
{391,407,423,439},
{392,408,424,440},
{393,409,425,441},
{394,410,426,442},
{395,411,427,443},
{396,412,428,444},
{397,413,429,445},
{398,414,430,446},
{399,415,431,447},
{448,464,480,496},
{449,465,481,497},
{450,466,482,498},
{451,467,483,499},
{452,468,484,500},
{453,469,485,501},
{454,470,486,502},
{455,471,487,503},
{456,472,488,504},
{457,473,489,505},
{458,474,490,506},
{459,475,491,507},
{460,476,492,508},
{461,477,493,509},
{462,478,494,510},
{463,479,495,511},
{512,528,544,560},
{513,529,545,561},
{514,530,546,562},
{515,531,547,563},
{516,532,548,564},
{517,533,549,565},
{518,534,550,566},
{519,535,551,567},
{520,536,552,568},
{521,537,553,569},
{522,538,554,570},
{523,539,555,571},
{524,540,556,572},
{525,541,557,573},
{526,542,558,574},
{527,543,559,575},
{576,592,608,624},
{577,593,609,625},
{578,594,610,626},
{579,595,611,627},
{580,596,612,628},
{581,597,613,629},
{582,598,614,630},
{583,599,615,631},
{584,600,616,632},
{585,601,617,633},
{586,602,618,634},
{587,603,619,635},
{588,604,620,636},
{589,605,621,637},
{590,606,622,638},
{591,607,623,639},
{640,656,672,688},
{641,657,673,689},
{642,658,674,690},
{643,659,675,691},
{644,660,676,692},
{645,661,677,693},
{646,662,678,694},
{647,663,679,695},
{648,664,680,696},
{649,665,681,697},
{650,666,682,698},
{651,667,683,699},
{652,668,684,700},
{653,669,685,701},
{654,670,686,702},
{655,671,687,703},
{704,720,736,752},
{705,721,737,753},
{706,722,738,754},
{707,723,739,755},
{708,724,740,756},
{709,725,741,757},
{710,726,742,758},
{711,727,743,759},
{712,728,744,760},
{713,729,745,761},
{714,730,746,762},
{715,731,747,763},
{716,732,748,764},
{717,733,749,765},
{718,734,750,766},
{719,735,751,767},
{768,784,800,816},
{769,785,801,817},
{770,786,802,818},
{771,787,803,819},
{772,788,804,820},
{773,789,805,821},
{774,790,806,822},
{775,791,807,823},
{776,792,808,824},
{777,793,809,825},
{778,794,810,826},
{779,795,811,827},
{780,796,812,828},
{781,797,813,829},
{782,798,814,830},
{783,799,815,831},
{832,848,864,880},
{833,849,865,881},
{834,850,866,882},
{835,851,867,883},
{836,852,868,884},
{837,853,869,885},
{838,854,870,886},
{839,855,871,887},
{840,856,872,888},
{841,857,873,889},
{842,858,874,890},
{843,859,875,891},
{844,860,876,892},
{845,861,877,893},
{846,862,878,894},
{847,863,879,895},
{896,912,928,944},
{897,913,929,945},
{898,914,930,946},
{899,915,931,947},
{900,916,932,948},
{901,917,933,949},
{902,918,934,950},
{903,919,935,951},
{904,920,936,952},
{905,921,937,953},
{906,922,938,954},
{907,923,939,955},
{908,924,940,956},
{909,925,941,957},
{910,926,942,958},
{911,927,943,959},
{960,976,992,1008},
{961,977,993,1009},
{962,978,994,1010},
{963,979,995,1011},
{964,980,996,1012},
{965,981,997,1013},
{966,982,998,1014},
{967,983,999,1015},
{968,984,1000,1016},
{969,985,1001,1017},
{970,986,1002,1018},
{971,987,1003,1019},
{972,988,1004,1020},
{973,989,1005,1021},
{974,990,1006,1022},
{975,991,1007,1023},
{1024,1040,1056,1072},
{1025,1041,1057,1073},
{1026,1042,1058,1074},
{1027,1043,1059,1075},
{1028,1044,1060,1076},
{1029,1045,1061,1077},
{1030,1046,1062,1078},
{1031,1047,1063,1079},
{1032,1048,1064,1080},
{1033,1049,1065,1081},
{1034,1050,1066,1082},
{1035,1051,1067,1083},
{1036,1052,1068,1084},
{1037,1053,1069,1085},
{1038,1054,1070,1086},
{1039,1055,1071,1087},
{1088,1104,1120,1136},
{1089,1105,1121,1137},
{1090,1106,1122,1138},
{1091,1107,1123,1139},
{1092,1108,1124,1140},
{1093,1109,1125,1141},
{1094,1110,1126,1142},
{1095,1111,1127,1143},
{1096,1112,1128,1144},
{1097,1113,1129,1145},
{1098,1114,1130,1146},
{1099,1115,1131,1147},
{1100,1116,1132,1148},
{1101,1117,1133,1149},
{1102,1118,1134,1150},
{1103,1119,1135,1151},
{1152,1168,1184,1200},
{1153,1169,1185,1201},
{1154,1170,1186,1202},
{1155,1171,1187,1203},
{1156,1172,1188,1204},
{1157,1173,1189,1205},
{1158,1174,1190,1206},
{1159,1175,1191,1207},
{1160,1176,1192,1208},
{1161,1177,1193,1209},
{1162,1178,1194,1210},
{1163,1179,1195,1211},
{1164,1180,1196,1212},
{1165,1181,1197,1213},
{1166,1182,1198,1214},
{1167,1183,1199,1215},
{1216,1232,1248,1264},
{1217,1233,1249,1265},
{1218,1234,1250,1266},
{1219,1235,1251,1267},
{1220,1236,1252,1268},
{1221,1237,1253,1269},
{1222,1238,1254,1270},
{1223,1239,1255,1271},
{1224,1240,1256,1272},
{1225,1241,1257,1273},
{1226,1242,1258,1274},
{1227,1243,1259,1275},
{1228,1244,1260,1276},
{1229,1245,1261,1277},
{1230,1246,1262,1278},
{1231,1247,1263,1279},
{1280,1296,1312,1328},
{1281,1297,1313,1329},
{1282,1298,1314,1330},
{1283,1299,1315,1331},
{1284,1300,1316,1332},
{1285,1301,1317,1333},
{1286,1302,1318,1334},
{1287,1303,1319,1335},
{1288,1304,1320,1336},
{1289,1305,1321,1337},
{1290,1306,1322,1338},
{1291,1307,1323,1339},
{1292,1308,1324,1340},
{1293,1309,1325,1341},
{1294,1310,1326,1342},
{1295,1311,1327,1343},
{1344,1360,1376,1392},
{1345,1361,1377,1393},
{1346,1362,1378,1394},
{1347,1363,1379,1395},
{1348,1364,1380,1396},
{1349,1365,1381,1397},
{1350,1366,1382,1398},
{1351,1367,1383,1399},
{1352,1368,1384,1400},
{1353,1369,1385,1401},
{1354,1370,1386,1402},
{1355,1371,1387,1403},
{1356,1372,1388,1404},
{1357,1373,1389,1405},
{1358,1374,1390,1406},
{1359,1375,1391,1407},
{1408,1424,1440,1456},
{1409,1425,1441,1457},
{1410,1426,1442,1458},
{1411,1427,1443,1459},
{1412,1428,1444,1460},
{1413,1429,1445,1461},
{1414,1430,1446,1462},
{1415,1431,1447,1463},
{1416,1432,1448,1464},
{1417,1433,1449,1465},
{1418,1434,1450,1466},
{1419,1435,1451,1467},
{1420,1436,1452,1468},
{1421,1437,1453,1469},
{1422,1438,1454,1470},
{1423,1439,1455,1471},
{1472,1488,1504,1520},
{1473,1489,1505,1521},
{1474,1490,1506,1522},
{1475,1491,1507,1523},
{1476,1492,1508,1524},
{1477,1493,1509,1525},
{1478,1494,1510,1526},
{1479,1495,1511,1527},
{1480,1496,1512,1528},
{1481,1497,1513,1529},
{1482,1498,1514,1530},
{1483,1499,1515,1531},
{1484,1500,1516,1532},
{1485,1501,1517,1533},
{1486,1502,1518,1534},
{1487,1503,1519,1535},
{1536,1552,1568,1584},
{1537,1553,1569,1585},
{1538,1554,1570,1586},
{1539,1555,1571,1587},
{1540,1556,1572,1588},
{1541,1557,1573,1589},
{1542,1558,1574,1590},
{1543,1559,1575,1591},
{1544,1560,1576,1592},
{1545,1561,1577,1593},
{1546,1562,1578,1594},
{1547,1563,1579,1595},
{1548,1564,1580,1596},
{1549,1565,1581,1597},
{1550,1566,1582,1598},
{1551,1567,1583,1599},
{1600,1616,1632,1648},
{1601,1617,1633,1649},
{1602,1618,1634,1650},
{1603,1619,1635,1651},
{1604,1620,1636,1652},
{1605,1621,1637,1653},
{1606,1622,1638,1654},
{1607,1623,1639,1655},
{1608,1624,1640,1656},
{1609,1625,1641,1657},
{1610,1626,1642,1658},
{1611,1627,1643,1659},
{1612,1628,1644,1660},
{1613,1629,1645,1661},
{1614,1630,1646,1662},
{1615,1631,1647,1663},
{1664,1680,1696,1712},
{1665,1681,1697,1713},
{1666,1682,1698,1714},
{1667,1683,1699,1715},
{1668,1684,1700,1716},
{1669,1685,1701,1717},
{1670,1686,1702,1718},
{1671,1687,1703,1719},
{1672,1688,1704,1720},
{1673,1689,1705,1721},
{1674,1690,1706,1722},
{1675,1691,1707,1723},
{1676,1692,1708,1724},
{1677,1693,1709,1725},
{1678,1694,1710,1726},
{1679,1695,1711,1727},
{1728,1744,1760,1776},
{1729,1745,1761,1777},
{1730,1746,1762,1778},
{1731,1747,1763,1779},
{1732,1748,1764,1780},
{1733,1749,1765,1781},
{1734,1750,1766,1782},
{1735,1751,1767,1783},
{1736,1752,1768,1784},
{1737,1753,1769,1785},
{1738,1754,1770,1786},
{1739,1755,1771,1787},
{1740,1756,1772,1788},
{1741,1757,1773,1789},
{1742,1758,1774,1790},
{1743,1759,1775,1791},
{1792,1808,1824,1840},
{1793,1809,1825,1841},
{1794,1810,1826,1842},
{1795,1811,1827,1843},
{1796,1812,1828,1844},
{1797,1813,1829,1845},
{1798,1814,1830,1846},
{1799,1815,1831,1847},
{1800,1816,1832,1848},
{1801,1817,1833,1849},
{1802,1818,1834,1850},
{1803,1819,1835,1851},
{1804,1820,1836,1852},
{1805,1821,1837,1853},
{1806,1822,1838,1854},
{1807,1823,1839,1855},
{1856,1872,1888,1904},
{1857,1873,1889,1905},
{1858,1874,1890,1906},
{1859,1875,1891,1907},
{1860,1876,1892,1908},
{1861,1877,1893,1909},
{1862,1878,1894,1910},
{1863,1879,1895,1911},
{1864,1880,1896,1912},
{1865,1881,1897,1913},
{1866,1882,1898,1914},
{1867,1883,1899,1915},
{1868,1884,1900,1916},
{1869,1885,1901,1917},
{1870,1886,1902,1918},
{1871,1887,1903,1919},
{1920,1936,1952,1968},
{1921,1937,1953,1969},
{1922,1938,1954,1970},
{1923,1939,1955,1971},
{1924,1940,1956,1972},
{1925,1941,1957,1973},
{1926,1942,1958,1974},
{1927,1943,1959,1975},
{1928,1944,1960,1976},
{1929,1945,1961,1977},
{1930,1946,1962,1978},
{1931,1947,1963,1979},
{1932,1948,1964,1980},
{1933,1949,1965,1981},
{1934,1950,1966,1982},
{1935,1951,1967,1983},
{1984,2000,2016,2032},
{1985,2001,2017,2033},
{1986,2002,2018,2034},
{1987,2003,2019,2035},
{1988,2004,2020,2036},
{1989,2005,2021,2037},
{1990,2006,2022,2038},
{1991,2007,2023,2039},
{1992,2008,2024,2040},
{1993,2009,2025,2041},
{1994,2010,2026,2042},
{1995,2011,2027,2043},
{1996,2012,2028,2044},
{1997,2013,2029,2045},
{1998,2014,2030,2046},
{1999,2015,2031,2047},
{2048,2064,2080,2096},
{2049,2065,2081,2097},
{2050,2066,2082,2098},
{2051,2067,2083,2099},
{2052,2068,2084,2100},
{2053,2069,2085,2101},
{2054,2070,2086,2102},
{2055,2071,2087,2103},
{2056,2072,2088,2104},
{2057,2073,2089,2105},
{2058,2074,2090,2106},
{2059,2075,2091,2107},
{2060,2076,2092,2108},
{2061,2077,2093,2109},
{2062,2078,2094,2110},
{2063,2079,2095,2111},
{2112,2128,2144,2160},
{2113,2129,2145,2161},
{2114,2130,2146,2162},
{2115,2131,2147,2163},
{2116,2132,2148,2164},
{2117,2133,2149,2165},
{2118,2134,2150,2166},
{2119,2135,2151,2167},
{2120,2136,2152,2168},
{2121,2137,2153,2169},
{2122,2138,2154,2170},
{2123,2139,2155,2171},
{2124,2140,2156,2172},
{2125,2141,2157,2173},
{2126,2142,2158,2174},
{2127,2143,2159,2175},
{2176,2192,2208,2224},
{2177,2193,2209,2225},
{2178,2194,2210,2226},
{2179,2195,2211,2227},
{2180,2196,2212,2228},
{2181,2197,2213,2229},
{2182,2198,2214,2230},
{2183,2199,2215,2231},
{2184,2200,2216,2232},
{2185,2201,2217,2233},
{2186,2202,2218,2234},
{2187,2203,2219,2235},
{2188,2204,2220,2236},
{2189,2205,2221,2237},
{2190,2206,2222,2238},
{2191,2207,2223,2239},
{2240,2256,2272,2288},
{2241,2257,2273,2289},
{2242,2258,2274,2290},
{2243,2259,2275,2291},
{2244,2260,2276,2292},
{2245,2261,2277,2293},
{2246,2262,2278,2294},
{2247,2263,2279,2295},
{2248,2264,2280,2296},
{2249,2265,2281,2297},
{2250,2266,2282,2298},
{2251,2267,2283,2299},
{2252,2268,2284,2300},
{2253,2269,2285,2301},
{2254,2270,2286,2302},
{2255,2271,2287,2303},
{2304,2320,2336,2352},
{2305,2321,2337,2353},
{2306,2322,2338,2354},
{2307,2323,2339,2355},
{2308,2324,2340,2356},
{2309,2325,2341,2357},
{2310,2326,2342,2358},
{2311,2327,2343,2359},
{2312,2328,2344,2360},
{2313,2329,2345,2361},
{2314,2330,2346,2362},
{2315,2331,2347,2363},
{2316,2332,2348,2364},
{2317,2333,2349,2365},
{2318,2334,2350,2366},
{2319,2335,2351,2367},
{2368,2384,2400,2416},
{2369,2385,2401,2417},
{2370,2386,2402,2418},
{2371,2387,2403,2419},
{2372,2388,2404,2420},
{2373,2389,2405,2421},
{2374,2390,2406,2422},
{2375,2391,2407,2423},
{2376,2392,2408,2424},
{2377,2393,2409,2425},
{2378,2394,2410,2426},
{2379,2395,2411,2427},
{2380,2396,2412,2428},
{2381,2397,2413,2429},
{2382,2398,2414,2430},
{2383,2399,2415,2431},
{2432,2448,2464,2480},
{2433,2449,2465,2481},
{2434,2450,2466,2482},
{2435,2451,2467,2483},
{2436,2452,2468,2484},
{2437,2453,2469,2485},
{2438,2454,2470,2486},
{2439,2455,2471,2487},
{2440,2456,2472,2488},
{2441,2457,2473,2489},
{2442,2458,2474,2490},
{2443,2459,2475,2491},
{2444,2460,2476,2492},
{2445,2461,2477,2493},
{2446,2462,2478,2494},
{2447,2463,2479,2495},
{2496,2512,2528,2544},
{2497,2513,2529,2545},
{2498,2514,2530,2546},
{2499,2515,2531,2547},
{2500,2516,2532,2548},
{2501,2517,2533,2549},
{2502,2518,2534,2550},
{2503,2519,2535,2551},
{2504,2520,2536,2552},
{2505,2521,2537,2553},
{2506,2522,2538,2554},
{2507,2523,2539,2555},
{2508,2524,2540,2556},
{2509,2525,2541,2557},
{2510,2526,2542,2558},
{2511,2527,2543,2559},
{2560,2576,2592,2608},
{2561,2577,2593,2609},
{2562,2578,2594,2610},
{2563,2579,2595,2611},
{2564,2580,2596,2612},
{2565,2581,2597,2613},
{2566,2582,2598,2614},
{2567,2583,2599,2615},
{2568,2584,2600,2616},
{2569,2585,2601,2617},
{2570,2586,2602,2618},
{2571,2587,2603,2619},
{2572,2588,2604,2620},
{2573,2589,2605,2621},
{2574,2590,2606,2622},
{2575,2591,2607,2623},
{2624,2640,2656,2672},
{2625,2641,2657,2673},
{2626,2642,2658,2674},
{2627,2643,2659,2675},
{2628,2644,2660,2676},
{2629,2645,2661,2677},
{2630,2646,2662,2678},
{2631,2647,2663,2679},
{2632,2648,2664,2680},
{2633,2649,2665,2681},
{2634,2650,2666,2682},
{2635,2651,2667,2683},
{2636,2652,2668,2684},
{2637,2653,2669,2685},
{2638,2654,2670,2686},
{2639,2655,2671,2687},
{2688,2704,2720,2736},
{2689,2705,2721,2737},
{2690,2706,2722,2738},
{2691,2707,2723,2739},
{2692,2708,2724,2740},
{2693,2709,2725,2741},
{2694,2710,2726,2742},
{2695,2711,2727,2743},
{2696,2712,2728,2744},
{2697,2713,2729,2745},
{2698,2714,2730,2746},
{2699,2715,2731,2747},
{2700,2716,2732,2748},
{2701,2717,2733,2749},
{2702,2718,2734,2750},
{2703,2719,2735,2751},
{2752,2768,2784,2800},
{2753,2769,2785,2801},
{2754,2770,2786,2802},
{2755,2771,2787,2803},
{2756,2772,2788,2804},
{2757,2773,2789,2805},
{2758,2774,2790,2806},
{2759,2775,2791,2807},
{2760,2776,2792,2808},
{2761,2777,2793,2809},
{2762,2778,2794,2810},
{2763,2779,2795,2811},
{2764,2780,2796,2812},
{2765,2781,2797,2813},
{2766,2782,2798,2814},
{2767,2783,2799,2815},
{2816,2832,2848,2864},
{2817,2833,2849,2865},
{2818,2834,2850,2866},
{2819,2835,2851,2867},
{2820,2836,2852,2868},
{2821,2837,2853,2869},
{2822,2838,2854,2870},
{2823,2839,2855,2871},
{2824,2840,2856,2872},
{2825,2841,2857,2873},
{2826,2842,2858,2874},
{2827,2843,2859,2875},
{2828,2844,2860,2876},
{2829,2845,2861,2877},
{2830,2846,2862,2878},
{2831,2847,2863,2879},
{2880,2896,2912,2928},
{2881,2897,2913,2929},
{2882,2898,2914,2930},
{2883,2899,2915,2931},
{2884,2900,2916,2932},
{2885,2901,2917,2933},
{2886,2902,2918,2934},
{2887,2903,2919,2935},
{2888,2904,2920,2936},
{2889,2905,2921,2937},
{2890,2906,2922,2938},
{2891,2907,2923,2939},
{2892,2908,2924,2940},
{2893,2909,2925,2941},
{2894,2910,2926,2942},
{2895,2911,2927,2943},
{2944,2960,2976,2992},
{2945,2961,2977,2993},
{2946,2962,2978,2994},
{2947,2963,2979,2995},
{2948,2964,2980,2996},
{2949,2965,2981,2997},
{2950,2966,2982,2998},
{2951,2967,2983,2999},
{2952,2968,2984,3000},
{2953,2969,2985,3001},
{2954,2970,2986,3002},
{2955,2971,2987,3003},
{2956,2972,2988,3004},
{2957,2973,2989,3005},
{2958,2974,2990,3006},
{2959,2975,2991,3007},
{3008,3024,3040,3056},
{3009,3025,3041,3057},
{3010,3026,3042,3058},
{3011,3027,3043,3059},
{3012,3028,3044,3060},
{3013,3029,3045,3061},
{3014,3030,3046,3062},
{3015,3031,3047,3063},
{3016,3032,3048,3064},
{3017,3033,3049,3065},
{3018,3034,3050,3066},
{3019,3035,3051,3067},
{3020,3036,3052,3068},
{3021,3037,3053,3069},
{3022,3038,3054,3070},
{3023,3039,3055,3071},
{3072,3088,3104,3120},
{3073,3089,3105,3121},
{3074,3090,3106,3122},
{3075,3091,3107,3123},
{3076,3092,3108,3124},
{3077,3093,3109,3125},
{3078,3094,3110,3126},
{3079,3095,3111,3127},
{3080,3096,3112,3128},
{3081,3097,3113,3129},
{3082,3098,3114,3130},
{3083,3099,3115,3131},
{3084,3100,3116,3132},
{3085,3101,3117,3133},
{3086,3102,3118,3134},
{3087,3103,3119,3135},
{3136,3152,3168,3184},
{3137,3153,3169,3185},
{3138,3154,3170,3186},
{3139,3155,3171,3187},
{3140,3156,3172,3188},
{3141,3157,3173,3189},
{3142,3158,3174,3190},
{3143,3159,3175,3191},
{3144,3160,3176,3192},
{3145,3161,3177,3193},
{3146,3162,3178,3194},
{3147,3163,3179,3195},
{3148,3164,3180,3196},
{3149,3165,3181,3197},
{3150,3166,3182,3198},
{3151,3167,3183,3199},
{3200,3216,3232,3248},
{3201,3217,3233,3249},
{3202,3218,3234,3250},
{3203,3219,3235,3251},
{3204,3220,3236,3252},
{3205,3221,3237,3253},
{3206,3222,3238,3254},
{3207,3223,3239,3255},
{3208,3224,3240,3256},
{3209,3225,3241,3257},
{3210,3226,3242,3258},
{3211,3227,3243,3259},
{3212,3228,3244,3260},
{3213,3229,3245,3261},
{3214,3230,3246,3262},
{3215,3231,3247,3263},
{3264,3280,3296,3312},
{3265,3281,3297,3313},
{3266,3282,3298,3314},
{3267,3283,3299,3315},
{3268,3284,3300,3316},
{3269,3285,3301,3317},
{3270,3286,3302,3318},
{3271,3287,3303,3319},
{3272,3288,3304,3320},
{3273,3289,3305,3321},
{3274,3290,3306,3322},
{3275,3291,3307,3323},
{3276,3292,3308,3324},
{3277,3293,3309,3325},
{3278,3294,3310,3326},
{3279,3295,3311,3327},
{3328,3344,3360,3376},
{3329,3345,3361,3377},
{3330,3346,3362,3378},
{3331,3347,3363,3379},
{3332,3348,3364,3380},
{3333,3349,3365,3381},
{3334,3350,3366,3382},
{3335,3351,3367,3383},
{3336,3352,3368,3384},
{3337,3353,3369,3385},
{3338,3354,3370,3386},
{3339,3355,3371,3387},
{3340,3356,3372,3388},
{3341,3357,3373,3389},
{3342,3358,3374,3390},
{3343,3359,3375,3391},
{3392,3408,3424,3440},
{3393,3409,3425,3441},
{3394,3410,3426,3442},
{3395,3411,3427,3443},
{3396,3412,3428,3444},
{3397,3413,3429,3445},
{3398,3414,3430,3446},
{3399,3415,3431,3447},
{3400,3416,3432,3448},
{3401,3417,3433,3449},
{3402,3418,3434,3450},
{3403,3419,3435,3451},
{3404,3420,3436,3452},
{3405,3421,3437,3453},
{3406,3422,3438,3454},
{3407,3423,3439,3455},
{3456,3472,3488,3504},
{3457,3473,3489,3505},
{3458,3474,3490,3506},
{3459,3475,3491,3507},
{3460,3476,3492,3508},
{3461,3477,3493,3509},
{3462,3478,3494,3510},
{3463,3479,3495,3511},
{3464,3480,3496,3512},
{3465,3481,3497,3513},
{3466,3482,3498,3514},
{3467,3483,3499,3515},
{3468,3484,3500,3516},
{3469,3485,3501,3517},
{3470,3486,3502,3518},
{3471,3487,3503,3519},
{3520,3536,3552,3568},
{3521,3537,3553,3569},
{3522,3538,3554,3570},
{3523,3539,3555,3571},
{3524,3540,3556,3572},
{3525,3541,3557,3573},
{3526,3542,3558,3574},
{3527,3543,3559,3575},
{3528,3544,3560,3576},
{3529,3545,3561,3577},
{3530,3546,3562,3578},
{3531,3547,3563,3579},
{3532,3548,3564,3580},
{3533,3549,3565,3581},
{3534,3550,3566,3582},
{3535,3551,3567,3583},
{3584,3600,3616,3632},
{3585,3601,3617,3633},
{3586,3602,3618,3634},
{3587,3603,3619,3635},
{3588,3604,3620,3636},
{3589,3605,3621,3637},
{3590,3606,3622,3638},
{3591,3607,3623,3639},
{3592,3608,3624,3640},
{3593,3609,3625,3641},
{3594,3610,3626,3642},
{3595,3611,3627,3643},
{3596,3612,3628,3644},
{3597,3613,3629,3645},
{3598,3614,3630,3646},
{3599,3615,3631,3647},
{3648,3664,3680,3696},
{3649,3665,3681,3697},
{3650,3666,3682,3698},
{3651,3667,3683,3699},
{3652,3668,3684,3700},
{3653,3669,3685,3701},
{3654,3670,3686,3702},
{3655,3671,3687,3703},
{3656,3672,3688,3704},
{3657,3673,3689,3705},
{3658,3674,3690,3706},
{3659,3675,3691,3707},
{3660,3676,3692,3708},
{3661,3677,3693,3709},
{3662,3678,3694,3710},
{3663,3679,3695,3711},
{3712,3728,3744,3760},
{3713,3729,3745,3761},
{3714,3730,3746,3762},
{3715,3731,3747,3763},
{3716,3732,3748,3764},
{3717,3733,3749,3765},
{3718,3734,3750,3766},
{3719,3735,3751,3767},
{3720,3736,3752,3768},
{3721,3737,3753,3769},
{3722,3738,3754,3770},
{3723,3739,3755,3771},
{3724,3740,3756,3772},
{3725,3741,3757,3773},
{3726,3742,3758,3774},
{3727,3743,3759,3775},
{3776,3792,3808,3824},
{3777,3793,3809,3825},
{3778,3794,3810,3826},
{3779,3795,3811,3827},
{3780,3796,3812,3828},
{3781,3797,3813,3829},
{3782,3798,3814,3830},
{3783,3799,3815,3831},
{3784,3800,3816,3832},
{3785,3801,3817,3833},
{3786,3802,3818,3834},
{3787,3803,3819,3835},
{3788,3804,3820,3836},
{3789,3805,3821,3837},
{3790,3806,3822,3838},
{3791,3807,3823,3839},
{3840,3856,3872,3888},
{3841,3857,3873,3889},
{3842,3858,3874,3890},
{3843,3859,3875,3891},
{3844,3860,3876,3892},
{3845,3861,3877,3893},
{3846,3862,3878,3894},
{3847,3863,3879,3895},
{3848,3864,3880,3896},
{3849,3865,3881,3897},
{3850,3866,3882,3898},
{3851,3867,3883,3899},
{3852,3868,3884,3900},
{3853,3869,3885,3901},
{3854,3870,3886,3902},
{3855,3871,3887,3903},
{3904,3920,3936,3952},
{3905,3921,3937,3953},
{3906,3922,3938,3954},
{3907,3923,3939,3955},
{3908,3924,3940,3956},
{3909,3925,3941,3957},
{3910,3926,3942,3958},
{3911,3927,3943,3959},
{3912,3928,3944,3960},
{3913,3929,3945,3961},
{3914,3930,3946,3962},
{3915,3931,3947,3963},
{3916,3932,3948,3964},
{3917,3933,3949,3965},
{3918,3934,3950,3966},
{3919,3935,3951,3967},
{3968,3984,4000,4016},
{3969,3985,4001,4017},
{3970,3986,4002,4018},
{3971,3987,4003,4019},
{3972,3988,4004,4020},
{3973,3989,4005,4021},
{3974,3990,4006,4022},
{3975,3991,4007,4023},
{3976,3992,4008,4024},
{3977,3993,4009,4025},
{3978,3994,4010,4026},
{3979,3995,4011,4027},
{3980,3996,4012,4028},
{3981,3997,4013,4029},
{3982,3998,4014,4030},
{3983,3999,4015,4031},
{4032,4048,4064,4080},
{4033,4049,4065,4081},
{4034,4050,4066,4082},
{4035,4051,4067,4083},
{4036,4052,4068,4084},
{4037,4053,4069,4085},
{4038,4054,4070,4086},
{4039,4055,4071,4087},
{4040,4056,4072,4088},
{4041,4057,4073,4089},
{4042,4058,4074,4090},
{4043,4059,4075,4091},
{4044,4060,4076,4092},
{4045,4061,4077,4093},
{4046,4062,4078,4094},
{4047,4063,4079,4095}};

std::vector<std::vector<int>> cta_groups4_interleaved1_16384 = {
{0,32,64,96},
{1,33,65,97},
{2,34,66,98},
{3,35,67,99},
{4,36,68,100},
{5,37,69,101},
{6,38,70,102},
{7,39,71,103},
{8,40,72,104},
{9,41,73,105},
{10,42,74,106},
{11,43,75,107},
{12,44,76,108},
{13,45,77,109},
{14,46,78,110},
{15,47,79,111},
{16,48,80,112},
{17,49,81,113},
{18,50,82,114},
{19,51,83,115},
{20,52,84,116},
{21,53,85,117},
{22,54,86,118},
{23,55,87,119},
{24,56,88,120},
{25,57,89,121},
{26,58,90,122},
{27,59,91,123},
{28,60,92,124},
{29,61,93,125},
{30,62,94,126},
{31,63,95,127},
{128,160,192,224},
{129,161,193,225},
{130,162,194,226},
{131,163,195,227},
{132,164,196,228},
{133,165,197,229},
{134,166,198,230},
{135,167,199,231},
{136,168,200,232},
{137,169,201,233},
{138,170,202,234},
{139,171,203,235},
{140,172,204,236},
{141,173,205,237},
{142,174,206,238},
{143,175,207,239},
{144,176,208,240},
{145,177,209,241},
{146,178,210,242},
{147,179,211,243},
{148,180,212,244},
{149,181,213,245},
{150,182,214,246},
{151,183,215,247},
{152,184,216,248},
{153,185,217,249},
{154,186,218,250},
{155,187,219,251},
{156,188,220,252},
{157,189,221,253},
{158,190,222,254},
{159,191,223,255},
{256,288,320,352},
{257,289,321,353},
{258,290,322,354},
{259,291,323,355},
{260,292,324,356},
{261,293,325,357},
{262,294,326,358},
{263,295,327,359},
{264,296,328,360},
{265,297,329,361},
{266,298,330,362},
{267,299,331,363},
{268,300,332,364},
{269,301,333,365},
{270,302,334,366},
{271,303,335,367},
{272,304,336,368},
{273,305,337,369},
{274,306,338,370},
{275,307,339,371},
{276,308,340,372},
{277,309,341,373},
{278,310,342,374},
{279,311,343,375},
{280,312,344,376},
{281,313,345,377},
{282,314,346,378},
{283,315,347,379},
{284,316,348,380},
{285,317,349,381},
{286,318,350,382},
{287,319,351,383},
{384,416,448,480},
{385,417,449,481},
{386,418,450,482},
{387,419,451,483},
{388,420,452,484},
{389,421,453,485},
{390,422,454,486},
{391,423,455,487},
{392,424,456,488},
{393,425,457,489},
{394,426,458,490},
{395,427,459,491},
{396,428,460,492},
{397,429,461,493},
{398,430,462,494},
{399,431,463,495},
{400,432,464,496},
{401,433,465,497},
{402,434,466,498},
{403,435,467,499},
{404,436,468,500},
{405,437,469,501},
{406,438,470,502},
{407,439,471,503},
{408,440,472,504},
{409,441,473,505},
{410,442,474,506},
{411,443,475,507},
{412,444,476,508},
{413,445,477,509},
{414,446,478,510},
{415,447,479,511},
{512,544,576,608},
{513,545,577,609},
{514,546,578,610},
{515,547,579,611},
{516,548,580,612},
{517,549,581,613},
{518,550,582,614},
{519,551,583,615},
{520,552,584,616},
{521,553,585,617},
{522,554,586,618},
{523,555,587,619},
{524,556,588,620},
{525,557,589,621},
{526,558,590,622},
{527,559,591,623},
{528,560,592,624},
{529,561,593,625},
{530,562,594,626},
{531,563,595,627},
{532,564,596,628},
{533,565,597,629},
{534,566,598,630},
{535,567,599,631},
{536,568,600,632},
{537,569,601,633},
{538,570,602,634},
{539,571,603,635},
{540,572,604,636},
{541,573,605,637},
{542,574,606,638},
{543,575,607,639},
{640,672,704,736},
{641,673,705,737},
{642,674,706,738},
{643,675,707,739},
{644,676,708,740},
{645,677,709,741},
{646,678,710,742},
{647,679,711,743},
{648,680,712,744},
{649,681,713,745},
{650,682,714,746},
{651,683,715,747},
{652,684,716,748},
{653,685,717,749},
{654,686,718,750},
{655,687,719,751},
{656,688,720,752},
{657,689,721,753},
{658,690,722,754},
{659,691,723,755},
{660,692,724,756},
{661,693,725,757},
{662,694,726,758},
{663,695,727,759},
{664,696,728,760},
{665,697,729,761},
{666,698,730,762},
{667,699,731,763},
{668,700,732,764},
{669,701,733,765},
{670,702,734,766},
{671,703,735,767},
{768,800,832,864},
{769,801,833,865},
{770,802,834,866},
{771,803,835,867},
{772,804,836,868},
{773,805,837,869},
{774,806,838,870},
{775,807,839,871},
{776,808,840,872},
{777,809,841,873},
{778,810,842,874},
{779,811,843,875},
{780,812,844,876},
{781,813,845,877},
{782,814,846,878},
{783,815,847,879},
{784,816,848,880},
{785,817,849,881},
{786,818,850,882},
{787,819,851,883},
{788,820,852,884},
{789,821,853,885},
{790,822,854,886},
{791,823,855,887},
{792,824,856,888},
{793,825,857,889},
{794,826,858,890},
{795,827,859,891},
{796,828,860,892},
{797,829,861,893},
{798,830,862,894},
{799,831,863,895},
{896,928,960,992},
{897,929,961,993},
{898,930,962,994},
{899,931,963,995},
{900,932,964,996},
{901,933,965,997},
{902,934,966,998},
{903,935,967,999},
{904,936,968,1000},
{905,937,969,1001},
{906,938,970,1002},
{907,939,971,1003},
{908,940,972,1004},
{909,941,973,1005},
{910,942,974,1006},
{911,943,975,1007},
{912,944,976,1008},
{913,945,977,1009},
{914,946,978,1010},
{915,947,979,1011},
{916,948,980,1012},
{917,949,981,1013},
{918,950,982,1014},
{919,951,983,1015},
{920,952,984,1016},
{921,953,985,1017},
{922,954,986,1018},
{923,955,987,1019},
{924,956,988,1020},
{925,957,989,1021},
{926,958,990,1022},
{927,959,991,1023},
{1024,1056,1088,1120},
{1025,1057,1089,1121},
{1026,1058,1090,1122},
{1027,1059,1091,1123},
{1028,1060,1092,1124},
{1029,1061,1093,1125},
{1030,1062,1094,1126},
{1031,1063,1095,1127},
{1032,1064,1096,1128},
{1033,1065,1097,1129},
{1034,1066,1098,1130},
{1035,1067,1099,1131},
{1036,1068,1100,1132},
{1037,1069,1101,1133},
{1038,1070,1102,1134},
{1039,1071,1103,1135},
{1040,1072,1104,1136},
{1041,1073,1105,1137},
{1042,1074,1106,1138},
{1043,1075,1107,1139},
{1044,1076,1108,1140},
{1045,1077,1109,1141},
{1046,1078,1110,1142},
{1047,1079,1111,1143},
{1048,1080,1112,1144},
{1049,1081,1113,1145},
{1050,1082,1114,1146},
{1051,1083,1115,1147},
{1052,1084,1116,1148},
{1053,1085,1117,1149},
{1054,1086,1118,1150},
{1055,1087,1119,1151},
{1152,1184,1216,1248},
{1153,1185,1217,1249},
{1154,1186,1218,1250},
{1155,1187,1219,1251},
{1156,1188,1220,1252},
{1157,1189,1221,1253},
{1158,1190,1222,1254},
{1159,1191,1223,1255},
{1160,1192,1224,1256},
{1161,1193,1225,1257},
{1162,1194,1226,1258},
{1163,1195,1227,1259},
{1164,1196,1228,1260},
{1165,1197,1229,1261},
{1166,1198,1230,1262},
{1167,1199,1231,1263},
{1168,1200,1232,1264},
{1169,1201,1233,1265},
{1170,1202,1234,1266},
{1171,1203,1235,1267},
{1172,1204,1236,1268},
{1173,1205,1237,1269},
{1174,1206,1238,1270},
{1175,1207,1239,1271},
{1176,1208,1240,1272},
{1177,1209,1241,1273},
{1178,1210,1242,1274},
{1179,1211,1243,1275},
{1180,1212,1244,1276},
{1181,1213,1245,1277},
{1182,1214,1246,1278},
{1183,1215,1247,1279},
{1280,1312,1344,1376},
{1281,1313,1345,1377},
{1282,1314,1346,1378},
{1283,1315,1347,1379},
{1284,1316,1348,1380},
{1285,1317,1349,1381},
{1286,1318,1350,1382},
{1287,1319,1351,1383},
{1288,1320,1352,1384},
{1289,1321,1353,1385},
{1290,1322,1354,1386},
{1291,1323,1355,1387},
{1292,1324,1356,1388},
{1293,1325,1357,1389},
{1294,1326,1358,1390},
{1295,1327,1359,1391},
{1296,1328,1360,1392},
{1297,1329,1361,1393},
{1298,1330,1362,1394},
{1299,1331,1363,1395},
{1300,1332,1364,1396},
{1301,1333,1365,1397},
{1302,1334,1366,1398},
{1303,1335,1367,1399},
{1304,1336,1368,1400},
{1305,1337,1369,1401},
{1306,1338,1370,1402},
{1307,1339,1371,1403},
{1308,1340,1372,1404},
{1309,1341,1373,1405},
{1310,1342,1374,1406},
{1311,1343,1375,1407},
{1408,1440,1472,1504},
{1409,1441,1473,1505},
{1410,1442,1474,1506},
{1411,1443,1475,1507},
{1412,1444,1476,1508},
{1413,1445,1477,1509},
{1414,1446,1478,1510},
{1415,1447,1479,1511},
{1416,1448,1480,1512},
{1417,1449,1481,1513},
{1418,1450,1482,1514},
{1419,1451,1483,1515},
{1420,1452,1484,1516},
{1421,1453,1485,1517},
{1422,1454,1486,1518},
{1423,1455,1487,1519},
{1424,1456,1488,1520},
{1425,1457,1489,1521},
{1426,1458,1490,1522},
{1427,1459,1491,1523},
{1428,1460,1492,1524},
{1429,1461,1493,1525},
{1430,1462,1494,1526},
{1431,1463,1495,1527},
{1432,1464,1496,1528},
{1433,1465,1497,1529},
{1434,1466,1498,1530},
{1435,1467,1499,1531},
{1436,1468,1500,1532},
{1437,1469,1501,1533},
{1438,1470,1502,1534},
{1439,1471,1503,1535},
{1536,1568,1600,1632},
{1537,1569,1601,1633},
{1538,1570,1602,1634},
{1539,1571,1603,1635},
{1540,1572,1604,1636},
{1541,1573,1605,1637},
{1542,1574,1606,1638},
{1543,1575,1607,1639},
{1544,1576,1608,1640},
{1545,1577,1609,1641},
{1546,1578,1610,1642},
{1547,1579,1611,1643},
{1548,1580,1612,1644},
{1549,1581,1613,1645},
{1550,1582,1614,1646},
{1551,1583,1615,1647},
{1552,1584,1616,1648},
{1553,1585,1617,1649},
{1554,1586,1618,1650},
{1555,1587,1619,1651},
{1556,1588,1620,1652},
{1557,1589,1621,1653},
{1558,1590,1622,1654},
{1559,1591,1623,1655},
{1560,1592,1624,1656},
{1561,1593,1625,1657},
{1562,1594,1626,1658},
{1563,1595,1627,1659},
{1564,1596,1628,1660},
{1565,1597,1629,1661},
{1566,1598,1630,1662},
{1567,1599,1631,1663},
{1664,1696,1728,1760},
{1665,1697,1729,1761},
{1666,1698,1730,1762},
{1667,1699,1731,1763},
{1668,1700,1732,1764},
{1669,1701,1733,1765},
{1670,1702,1734,1766},
{1671,1703,1735,1767},
{1672,1704,1736,1768},
{1673,1705,1737,1769},
{1674,1706,1738,1770},
{1675,1707,1739,1771},
{1676,1708,1740,1772},
{1677,1709,1741,1773},
{1678,1710,1742,1774},
{1679,1711,1743,1775},
{1680,1712,1744,1776},
{1681,1713,1745,1777},
{1682,1714,1746,1778},
{1683,1715,1747,1779},
{1684,1716,1748,1780},
{1685,1717,1749,1781},
{1686,1718,1750,1782},
{1687,1719,1751,1783},
{1688,1720,1752,1784},
{1689,1721,1753,1785},
{1690,1722,1754,1786},
{1691,1723,1755,1787},
{1692,1724,1756,1788},
{1693,1725,1757,1789},
{1694,1726,1758,1790},
{1695,1727,1759,1791},
{1792,1824,1856,1888},
{1793,1825,1857,1889},
{1794,1826,1858,1890},
{1795,1827,1859,1891},
{1796,1828,1860,1892},
{1797,1829,1861,1893},
{1798,1830,1862,1894},
{1799,1831,1863,1895},
{1800,1832,1864,1896},
{1801,1833,1865,1897},
{1802,1834,1866,1898},
{1803,1835,1867,1899},
{1804,1836,1868,1900},
{1805,1837,1869,1901},
{1806,1838,1870,1902},
{1807,1839,1871,1903},
{1808,1840,1872,1904},
{1809,1841,1873,1905},
{1810,1842,1874,1906},
{1811,1843,1875,1907},
{1812,1844,1876,1908},
{1813,1845,1877,1909},
{1814,1846,1878,1910},
{1815,1847,1879,1911},
{1816,1848,1880,1912},
{1817,1849,1881,1913},
{1818,1850,1882,1914},
{1819,1851,1883,1915},
{1820,1852,1884,1916},
{1821,1853,1885,1917},
{1822,1854,1886,1918},
{1823,1855,1887,1919},
{1920,1952,1984,2016},
{1921,1953,1985,2017},
{1922,1954,1986,2018},
{1923,1955,1987,2019},
{1924,1956,1988,2020},
{1925,1957,1989,2021},
{1926,1958,1990,2022},
{1927,1959,1991,2023},
{1928,1960,1992,2024},
{1929,1961,1993,2025},
{1930,1962,1994,2026},
{1931,1963,1995,2027},
{1932,1964,1996,2028},
{1933,1965,1997,2029},
{1934,1966,1998,2030},
{1935,1967,1999,2031},
{1936,1968,2000,2032},
{1937,1969,2001,2033},
{1938,1970,2002,2034},
{1939,1971,2003,2035},
{1940,1972,2004,2036},
{1941,1973,2005,2037},
{1942,1974,2006,2038},
{1943,1975,2007,2039},
{1944,1976,2008,2040},
{1945,1977,2009,2041},
{1946,1978,2010,2042},
{1947,1979,2011,2043},
{1948,1980,2012,2044},
{1949,1981,2013,2045},
{1950,1982,2014,2046},
{1951,1983,2015,2047},
{2048,2080,2112,2144},
{2049,2081,2113,2145},
{2050,2082,2114,2146},
{2051,2083,2115,2147},
{2052,2084,2116,2148},
{2053,2085,2117,2149},
{2054,2086,2118,2150},
{2055,2087,2119,2151},
{2056,2088,2120,2152},
{2057,2089,2121,2153},
{2058,2090,2122,2154},
{2059,2091,2123,2155},
{2060,2092,2124,2156},
{2061,2093,2125,2157},
{2062,2094,2126,2158},
{2063,2095,2127,2159},
{2064,2096,2128,2160},
{2065,2097,2129,2161},
{2066,2098,2130,2162},
{2067,2099,2131,2163},
{2068,2100,2132,2164},
{2069,2101,2133,2165},
{2070,2102,2134,2166},
{2071,2103,2135,2167},
{2072,2104,2136,2168},
{2073,2105,2137,2169},
{2074,2106,2138,2170},
{2075,2107,2139,2171},
{2076,2108,2140,2172},
{2077,2109,2141,2173},
{2078,2110,2142,2174},
{2079,2111,2143,2175},
{2176,2208,2240,2272},
{2177,2209,2241,2273},
{2178,2210,2242,2274},
{2179,2211,2243,2275},
{2180,2212,2244,2276},
{2181,2213,2245,2277},
{2182,2214,2246,2278},
{2183,2215,2247,2279},
{2184,2216,2248,2280},
{2185,2217,2249,2281},
{2186,2218,2250,2282},
{2187,2219,2251,2283},
{2188,2220,2252,2284},
{2189,2221,2253,2285},
{2190,2222,2254,2286},
{2191,2223,2255,2287},
{2192,2224,2256,2288},
{2193,2225,2257,2289},
{2194,2226,2258,2290},
{2195,2227,2259,2291},
{2196,2228,2260,2292},
{2197,2229,2261,2293},
{2198,2230,2262,2294},
{2199,2231,2263,2295},
{2200,2232,2264,2296},
{2201,2233,2265,2297},
{2202,2234,2266,2298},
{2203,2235,2267,2299},
{2204,2236,2268,2300},
{2205,2237,2269,2301},
{2206,2238,2270,2302},
{2207,2239,2271,2303},
{2304,2336,2368,2400},
{2305,2337,2369,2401},
{2306,2338,2370,2402},
{2307,2339,2371,2403},
{2308,2340,2372,2404},
{2309,2341,2373,2405},
{2310,2342,2374,2406},
{2311,2343,2375,2407},
{2312,2344,2376,2408},
{2313,2345,2377,2409},
{2314,2346,2378,2410},
{2315,2347,2379,2411},
{2316,2348,2380,2412},
{2317,2349,2381,2413},
{2318,2350,2382,2414},
{2319,2351,2383,2415},
{2320,2352,2384,2416},
{2321,2353,2385,2417},
{2322,2354,2386,2418},
{2323,2355,2387,2419},
{2324,2356,2388,2420},
{2325,2357,2389,2421},
{2326,2358,2390,2422},
{2327,2359,2391,2423},
{2328,2360,2392,2424},
{2329,2361,2393,2425},
{2330,2362,2394,2426},
{2331,2363,2395,2427},
{2332,2364,2396,2428},
{2333,2365,2397,2429},
{2334,2366,2398,2430},
{2335,2367,2399,2431},
{2432,2464,2496,2528},
{2433,2465,2497,2529},
{2434,2466,2498,2530},
{2435,2467,2499,2531},
{2436,2468,2500,2532},
{2437,2469,2501,2533},
{2438,2470,2502,2534},
{2439,2471,2503,2535},
{2440,2472,2504,2536},
{2441,2473,2505,2537},
{2442,2474,2506,2538},
{2443,2475,2507,2539},
{2444,2476,2508,2540},
{2445,2477,2509,2541},
{2446,2478,2510,2542},
{2447,2479,2511,2543},
{2448,2480,2512,2544},
{2449,2481,2513,2545},
{2450,2482,2514,2546},
{2451,2483,2515,2547},
{2452,2484,2516,2548},
{2453,2485,2517,2549},
{2454,2486,2518,2550},
{2455,2487,2519,2551},
{2456,2488,2520,2552},
{2457,2489,2521,2553},
{2458,2490,2522,2554},
{2459,2491,2523,2555},
{2460,2492,2524,2556},
{2461,2493,2525,2557},
{2462,2494,2526,2558},
{2463,2495,2527,2559},
{2560,2592,2624,2656},
{2561,2593,2625,2657},
{2562,2594,2626,2658},
{2563,2595,2627,2659},
{2564,2596,2628,2660},
{2565,2597,2629,2661},
{2566,2598,2630,2662},
{2567,2599,2631,2663},
{2568,2600,2632,2664},
{2569,2601,2633,2665},
{2570,2602,2634,2666},
{2571,2603,2635,2667},
{2572,2604,2636,2668},
{2573,2605,2637,2669},
{2574,2606,2638,2670},
{2575,2607,2639,2671},
{2576,2608,2640,2672},
{2577,2609,2641,2673},
{2578,2610,2642,2674},
{2579,2611,2643,2675},
{2580,2612,2644,2676},
{2581,2613,2645,2677},
{2582,2614,2646,2678},
{2583,2615,2647,2679},
{2584,2616,2648,2680},
{2585,2617,2649,2681},
{2586,2618,2650,2682},
{2587,2619,2651,2683},
{2588,2620,2652,2684},
{2589,2621,2653,2685},
{2590,2622,2654,2686},
{2591,2623,2655,2687},
{2688,2720,2752,2784},
{2689,2721,2753,2785},
{2690,2722,2754,2786},
{2691,2723,2755,2787},
{2692,2724,2756,2788},
{2693,2725,2757,2789},
{2694,2726,2758,2790},
{2695,2727,2759,2791},
{2696,2728,2760,2792},
{2697,2729,2761,2793},
{2698,2730,2762,2794},
{2699,2731,2763,2795},
{2700,2732,2764,2796},
{2701,2733,2765,2797},
{2702,2734,2766,2798},
{2703,2735,2767,2799},
{2704,2736,2768,2800},
{2705,2737,2769,2801},
{2706,2738,2770,2802},
{2707,2739,2771,2803},
{2708,2740,2772,2804},
{2709,2741,2773,2805},
{2710,2742,2774,2806},
{2711,2743,2775,2807},
{2712,2744,2776,2808},
{2713,2745,2777,2809},
{2714,2746,2778,2810},
{2715,2747,2779,2811},
{2716,2748,2780,2812},
{2717,2749,2781,2813},
{2718,2750,2782,2814},
{2719,2751,2783,2815},
{2816,2848,2880,2912},
{2817,2849,2881,2913},
{2818,2850,2882,2914},
{2819,2851,2883,2915},
{2820,2852,2884,2916},
{2821,2853,2885,2917},
{2822,2854,2886,2918},
{2823,2855,2887,2919},
{2824,2856,2888,2920},
{2825,2857,2889,2921},
{2826,2858,2890,2922},
{2827,2859,2891,2923},
{2828,2860,2892,2924},
{2829,2861,2893,2925},
{2830,2862,2894,2926},
{2831,2863,2895,2927},
{2832,2864,2896,2928},
{2833,2865,2897,2929},
{2834,2866,2898,2930},
{2835,2867,2899,2931},
{2836,2868,2900,2932},
{2837,2869,2901,2933},
{2838,2870,2902,2934},
{2839,2871,2903,2935},
{2840,2872,2904,2936},
{2841,2873,2905,2937},
{2842,2874,2906,2938},
{2843,2875,2907,2939},
{2844,2876,2908,2940},
{2845,2877,2909,2941},
{2846,2878,2910,2942},
{2847,2879,2911,2943},
{2944,2976,3008,3040},
{2945,2977,3009,3041},
{2946,2978,3010,3042},
{2947,2979,3011,3043},
{2948,2980,3012,3044},
{2949,2981,3013,3045},
{2950,2982,3014,3046},
{2951,2983,3015,3047},
{2952,2984,3016,3048},
{2953,2985,3017,3049},
{2954,2986,3018,3050},
{2955,2987,3019,3051},
{2956,2988,3020,3052},
{2957,2989,3021,3053},
{2958,2990,3022,3054},
{2959,2991,3023,3055},
{2960,2992,3024,3056},
{2961,2993,3025,3057},
{2962,2994,3026,3058},
{2963,2995,3027,3059},
{2964,2996,3028,3060},
{2965,2997,3029,3061},
{2966,2998,3030,3062},
{2967,2999,3031,3063},
{2968,3000,3032,3064},
{2969,3001,3033,3065},
{2970,3002,3034,3066},
{2971,3003,3035,3067},
{2972,3004,3036,3068},
{2973,3005,3037,3069},
{2974,3006,3038,3070},
{2975,3007,3039,3071},
{3072,3104,3136,3168},
{3073,3105,3137,3169},
{3074,3106,3138,3170},
{3075,3107,3139,3171},
{3076,3108,3140,3172},
{3077,3109,3141,3173},
{3078,3110,3142,3174},
{3079,3111,3143,3175},
{3080,3112,3144,3176},
{3081,3113,3145,3177},
{3082,3114,3146,3178},
{3083,3115,3147,3179},
{3084,3116,3148,3180},
{3085,3117,3149,3181},
{3086,3118,3150,3182},
{3087,3119,3151,3183},
{3088,3120,3152,3184},
{3089,3121,3153,3185},
{3090,3122,3154,3186},
{3091,3123,3155,3187},
{3092,3124,3156,3188},
{3093,3125,3157,3189},
{3094,3126,3158,3190},
{3095,3127,3159,3191},
{3096,3128,3160,3192},
{3097,3129,3161,3193},
{3098,3130,3162,3194},
{3099,3131,3163,3195},
{3100,3132,3164,3196},
{3101,3133,3165,3197},
{3102,3134,3166,3198},
{3103,3135,3167,3199},
{3200,3232,3264,3296},
{3201,3233,3265,3297},
{3202,3234,3266,3298},
{3203,3235,3267,3299},
{3204,3236,3268,3300},
{3205,3237,3269,3301},
{3206,3238,3270,3302},
{3207,3239,3271,3303},
{3208,3240,3272,3304},
{3209,3241,3273,3305},
{3210,3242,3274,3306},
{3211,3243,3275,3307},
{3212,3244,3276,3308},
{3213,3245,3277,3309},
{3214,3246,3278,3310},
{3215,3247,3279,3311},
{3216,3248,3280,3312},
{3217,3249,3281,3313},
{3218,3250,3282,3314},
{3219,3251,3283,3315},
{3220,3252,3284,3316},
{3221,3253,3285,3317},
{3222,3254,3286,3318},
{3223,3255,3287,3319},
{3224,3256,3288,3320},
{3225,3257,3289,3321},
{3226,3258,3290,3322},
{3227,3259,3291,3323},
{3228,3260,3292,3324},
{3229,3261,3293,3325},
{3230,3262,3294,3326},
{3231,3263,3295,3327},
{3328,3360,3392,3424},
{3329,3361,3393,3425},
{3330,3362,3394,3426},
{3331,3363,3395,3427},
{3332,3364,3396,3428},
{3333,3365,3397,3429},
{3334,3366,3398,3430},
{3335,3367,3399,3431},
{3336,3368,3400,3432},
{3337,3369,3401,3433},
{3338,3370,3402,3434},
{3339,3371,3403,3435},
{3340,3372,3404,3436},
{3341,3373,3405,3437},
{3342,3374,3406,3438},
{3343,3375,3407,3439},
{3344,3376,3408,3440},
{3345,3377,3409,3441},
{3346,3378,3410,3442},
{3347,3379,3411,3443},
{3348,3380,3412,3444},
{3349,3381,3413,3445},
{3350,3382,3414,3446},
{3351,3383,3415,3447},
{3352,3384,3416,3448},
{3353,3385,3417,3449},
{3354,3386,3418,3450},
{3355,3387,3419,3451},
{3356,3388,3420,3452},
{3357,3389,3421,3453},
{3358,3390,3422,3454},
{3359,3391,3423,3455},
{3456,3488,3520,3552},
{3457,3489,3521,3553},
{3458,3490,3522,3554},
{3459,3491,3523,3555},
{3460,3492,3524,3556},
{3461,3493,3525,3557},
{3462,3494,3526,3558},
{3463,3495,3527,3559},
{3464,3496,3528,3560},
{3465,3497,3529,3561},
{3466,3498,3530,3562},
{3467,3499,3531,3563},
{3468,3500,3532,3564},
{3469,3501,3533,3565},
{3470,3502,3534,3566},
{3471,3503,3535,3567},
{3472,3504,3536,3568},
{3473,3505,3537,3569},
{3474,3506,3538,3570},
{3475,3507,3539,3571},
{3476,3508,3540,3572},
{3477,3509,3541,3573},
{3478,3510,3542,3574},
{3479,3511,3543,3575},
{3480,3512,3544,3576},
{3481,3513,3545,3577},
{3482,3514,3546,3578},
{3483,3515,3547,3579},
{3484,3516,3548,3580},
{3485,3517,3549,3581},
{3486,3518,3550,3582},
{3487,3519,3551,3583},
{3584,3616,3648,3680},
{3585,3617,3649,3681},
{3586,3618,3650,3682},
{3587,3619,3651,3683},
{3588,3620,3652,3684},
{3589,3621,3653,3685},
{3590,3622,3654,3686},
{3591,3623,3655,3687},
{3592,3624,3656,3688},
{3593,3625,3657,3689},
{3594,3626,3658,3690},
{3595,3627,3659,3691},
{3596,3628,3660,3692},
{3597,3629,3661,3693},
{3598,3630,3662,3694},
{3599,3631,3663,3695},
{3600,3632,3664,3696},
{3601,3633,3665,3697},
{3602,3634,3666,3698},
{3603,3635,3667,3699},
{3604,3636,3668,3700},
{3605,3637,3669,3701},
{3606,3638,3670,3702},
{3607,3639,3671,3703},
{3608,3640,3672,3704},
{3609,3641,3673,3705},
{3610,3642,3674,3706},
{3611,3643,3675,3707},
{3612,3644,3676,3708},
{3613,3645,3677,3709},
{3614,3646,3678,3710},
{3615,3647,3679,3711},
{3712,3744,3776,3808},
{3713,3745,3777,3809},
{3714,3746,3778,3810},
{3715,3747,3779,3811},
{3716,3748,3780,3812},
{3717,3749,3781,3813},
{3718,3750,3782,3814},
{3719,3751,3783,3815},
{3720,3752,3784,3816},
{3721,3753,3785,3817},
{3722,3754,3786,3818},
{3723,3755,3787,3819},
{3724,3756,3788,3820},
{3725,3757,3789,3821},
{3726,3758,3790,3822},
{3727,3759,3791,3823},
{3728,3760,3792,3824},
{3729,3761,3793,3825},
{3730,3762,3794,3826},
{3731,3763,3795,3827},
{3732,3764,3796,3828},
{3733,3765,3797,3829},
{3734,3766,3798,3830},
{3735,3767,3799,3831},
{3736,3768,3800,3832},
{3737,3769,3801,3833},
{3738,3770,3802,3834},
{3739,3771,3803,3835},
{3740,3772,3804,3836},
{3741,3773,3805,3837},
{3742,3774,3806,3838},
{3743,3775,3807,3839},
{3840,3872,3904,3936},
{3841,3873,3905,3937},
{3842,3874,3906,3938},
{3843,3875,3907,3939},
{3844,3876,3908,3940},
{3845,3877,3909,3941},
{3846,3878,3910,3942},
{3847,3879,3911,3943},
{3848,3880,3912,3944},
{3849,3881,3913,3945},
{3850,3882,3914,3946},
{3851,3883,3915,3947},
{3852,3884,3916,3948},
{3853,3885,3917,3949},
{3854,3886,3918,3950},
{3855,3887,3919,3951},
{3856,3888,3920,3952},
{3857,3889,3921,3953},
{3858,3890,3922,3954},
{3859,3891,3923,3955},
{3860,3892,3924,3956},
{3861,3893,3925,3957},
{3862,3894,3926,3958},
{3863,3895,3927,3959},
{3864,3896,3928,3960},
{3865,3897,3929,3961},
{3866,3898,3930,3962},
{3867,3899,3931,3963},
{3868,3900,3932,3964},
{3869,3901,3933,3965},
{3870,3902,3934,3966},
{3871,3903,3935,3967},
{3968,4000,4032,4064},
{3969,4001,4033,4065},
{3970,4002,4034,4066},
{3971,4003,4035,4067},
{3972,4004,4036,4068},
{3973,4005,4037,4069},
{3974,4006,4038,4070},
{3975,4007,4039,4071},
{3976,4008,4040,4072},
{3977,4009,4041,4073},
{3978,4010,4042,4074},
{3979,4011,4043,4075},
{3980,4012,4044,4076},
{3981,4013,4045,4077},
{3982,4014,4046,4078},
{3983,4015,4047,4079},
{3984,4016,4048,4080},
{3985,4017,4049,4081},
{3986,4018,4050,4082},
{3987,4019,4051,4083},
{3988,4020,4052,4084},
{3989,4021,4053,4085},
{3990,4022,4054,4086},
{3991,4023,4055,4087},
{3992,4024,4056,4088},
{3993,4025,4057,4089},
{3994,4026,4058,4090},
{3995,4027,4059,4091},
{3996,4028,4060,4092},
{3997,4029,4061,4093},
{3998,4030,4062,4094},
{3999,4031,4063,4095},
{4096,4128,4160,4192},
{4097,4129,4161,4193},
{4098,4130,4162,4194},
{4099,4131,4163,4195},
{4100,4132,4164,4196},
{4101,4133,4165,4197},
{4102,4134,4166,4198},
{4103,4135,4167,4199},
{4104,4136,4168,4200},
{4105,4137,4169,4201},
{4106,4138,4170,4202},
{4107,4139,4171,4203},
{4108,4140,4172,4204},
{4109,4141,4173,4205},
{4110,4142,4174,4206},
{4111,4143,4175,4207},
{4112,4144,4176,4208},
{4113,4145,4177,4209},
{4114,4146,4178,4210},
{4115,4147,4179,4211},
{4116,4148,4180,4212},
{4117,4149,4181,4213},
{4118,4150,4182,4214},
{4119,4151,4183,4215},
{4120,4152,4184,4216},
{4121,4153,4185,4217},
{4122,4154,4186,4218},
{4123,4155,4187,4219},
{4124,4156,4188,4220},
{4125,4157,4189,4221},
{4126,4158,4190,4222},
{4127,4159,4191,4223},
{4224,4256,4288,4320},
{4225,4257,4289,4321},
{4226,4258,4290,4322},
{4227,4259,4291,4323},
{4228,4260,4292,4324},
{4229,4261,4293,4325},
{4230,4262,4294,4326},
{4231,4263,4295,4327},
{4232,4264,4296,4328},
{4233,4265,4297,4329},
{4234,4266,4298,4330},
{4235,4267,4299,4331},
{4236,4268,4300,4332},
{4237,4269,4301,4333},
{4238,4270,4302,4334},
{4239,4271,4303,4335},
{4240,4272,4304,4336},
{4241,4273,4305,4337},
{4242,4274,4306,4338},
{4243,4275,4307,4339},
{4244,4276,4308,4340},
{4245,4277,4309,4341},
{4246,4278,4310,4342},
{4247,4279,4311,4343},
{4248,4280,4312,4344},
{4249,4281,4313,4345},
{4250,4282,4314,4346},
{4251,4283,4315,4347},
{4252,4284,4316,4348},
{4253,4285,4317,4349},
{4254,4286,4318,4350},
{4255,4287,4319,4351},
{4352,4384,4416,4448},
{4353,4385,4417,4449},
{4354,4386,4418,4450},
{4355,4387,4419,4451},
{4356,4388,4420,4452},
{4357,4389,4421,4453},
{4358,4390,4422,4454},
{4359,4391,4423,4455},
{4360,4392,4424,4456},
{4361,4393,4425,4457},
{4362,4394,4426,4458},
{4363,4395,4427,4459},
{4364,4396,4428,4460},
{4365,4397,4429,4461},
{4366,4398,4430,4462},
{4367,4399,4431,4463},
{4368,4400,4432,4464},
{4369,4401,4433,4465},
{4370,4402,4434,4466},
{4371,4403,4435,4467},
{4372,4404,4436,4468},
{4373,4405,4437,4469},
{4374,4406,4438,4470},
{4375,4407,4439,4471},
{4376,4408,4440,4472},
{4377,4409,4441,4473},
{4378,4410,4442,4474},
{4379,4411,4443,4475},
{4380,4412,4444,4476},
{4381,4413,4445,4477},
{4382,4414,4446,4478},
{4383,4415,4447,4479},
{4480,4512,4544,4576},
{4481,4513,4545,4577},
{4482,4514,4546,4578},
{4483,4515,4547,4579},
{4484,4516,4548,4580},
{4485,4517,4549,4581},
{4486,4518,4550,4582},
{4487,4519,4551,4583},
{4488,4520,4552,4584},
{4489,4521,4553,4585},
{4490,4522,4554,4586},
{4491,4523,4555,4587},
{4492,4524,4556,4588},
{4493,4525,4557,4589},
{4494,4526,4558,4590},
{4495,4527,4559,4591},
{4496,4528,4560,4592},
{4497,4529,4561,4593},
{4498,4530,4562,4594},
{4499,4531,4563,4595},
{4500,4532,4564,4596},
{4501,4533,4565,4597},
{4502,4534,4566,4598},
{4503,4535,4567,4599},
{4504,4536,4568,4600},
{4505,4537,4569,4601},
{4506,4538,4570,4602},
{4507,4539,4571,4603},
{4508,4540,4572,4604},
{4509,4541,4573,4605},
{4510,4542,4574,4606},
{4511,4543,4575,4607},
{4608,4640,4672,4704},
{4609,4641,4673,4705},
{4610,4642,4674,4706},
{4611,4643,4675,4707},
{4612,4644,4676,4708},
{4613,4645,4677,4709},
{4614,4646,4678,4710},
{4615,4647,4679,4711},
{4616,4648,4680,4712},
{4617,4649,4681,4713},
{4618,4650,4682,4714},
{4619,4651,4683,4715},
{4620,4652,4684,4716},
{4621,4653,4685,4717},
{4622,4654,4686,4718},
{4623,4655,4687,4719},
{4624,4656,4688,4720},
{4625,4657,4689,4721},
{4626,4658,4690,4722},
{4627,4659,4691,4723},
{4628,4660,4692,4724},
{4629,4661,4693,4725},
{4630,4662,4694,4726},
{4631,4663,4695,4727},
{4632,4664,4696,4728},
{4633,4665,4697,4729},
{4634,4666,4698,4730},
{4635,4667,4699,4731},
{4636,4668,4700,4732},
{4637,4669,4701,4733},
{4638,4670,4702,4734},
{4639,4671,4703,4735},
{4736,4768,4800,4832},
{4737,4769,4801,4833},
{4738,4770,4802,4834},
{4739,4771,4803,4835},
{4740,4772,4804,4836},
{4741,4773,4805,4837},
{4742,4774,4806,4838},
{4743,4775,4807,4839},
{4744,4776,4808,4840},
{4745,4777,4809,4841},
{4746,4778,4810,4842},
{4747,4779,4811,4843},
{4748,4780,4812,4844},
{4749,4781,4813,4845},
{4750,4782,4814,4846},
{4751,4783,4815,4847},
{4752,4784,4816,4848},
{4753,4785,4817,4849},
{4754,4786,4818,4850},
{4755,4787,4819,4851},
{4756,4788,4820,4852},
{4757,4789,4821,4853},
{4758,4790,4822,4854},
{4759,4791,4823,4855},
{4760,4792,4824,4856},
{4761,4793,4825,4857},
{4762,4794,4826,4858},
{4763,4795,4827,4859},
{4764,4796,4828,4860},
{4765,4797,4829,4861},
{4766,4798,4830,4862},
{4767,4799,4831,4863},
{4864,4896,4928,4960},
{4865,4897,4929,4961},
{4866,4898,4930,4962},
{4867,4899,4931,4963},
{4868,4900,4932,4964},
{4869,4901,4933,4965},
{4870,4902,4934,4966},
{4871,4903,4935,4967},
{4872,4904,4936,4968},
{4873,4905,4937,4969},
{4874,4906,4938,4970},
{4875,4907,4939,4971},
{4876,4908,4940,4972},
{4877,4909,4941,4973},
{4878,4910,4942,4974},
{4879,4911,4943,4975},
{4880,4912,4944,4976},
{4881,4913,4945,4977},
{4882,4914,4946,4978},
{4883,4915,4947,4979},
{4884,4916,4948,4980},
{4885,4917,4949,4981},
{4886,4918,4950,4982},
{4887,4919,4951,4983},
{4888,4920,4952,4984},
{4889,4921,4953,4985},
{4890,4922,4954,4986},
{4891,4923,4955,4987},
{4892,4924,4956,4988},
{4893,4925,4957,4989},
{4894,4926,4958,4990},
{4895,4927,4959,4991},
{4992,5024,5056,5088},
{4993,5025,5057,5089},
{4994,5026,5058,5090},
{4995,5027,5059,5091},
{4996,5028,5060,5092},
{4997,5029,5061,5093},
{4998,5030,5062,5094},
{4999,5031,5063,5095},
{5000,5032,5064,5096},
{5001,5033,5065,5097},
{5002,5034,5066,5098},
{5003,5035,5067,5099},
{5004,5036,5068,5100},
{5005,5037,5069,5101},
{5006,5038,5070,5102},
{5007,5039,5071,5103},
{5008,5040,5072,5104},
{5009,5041,5073,5105},
{5010,5042,5074,5106},
{5011,5043,5075,5107},
{5012,5044,5076,5108},
{5013,5045,5077,5109},
{5014,5046,5078,5110},
{5015,5047,5079,5111},
{5016,5048,5080,5112},
{5017,5049,5081,5113},
{5018,5050,5082,5114},
{5019,5051,5083,5115},
{5020,5052,5084,5116},
{5021,5053,5085,5117},
{5022,5054,5086,5118},
{5023,5055,5087,5119},
{5120,5152,5184,5216},
{5121,5153,5185,5217},
{5122,5154,5186,5218},
{5123,5155,5187,5219},
{5124,5156,5188,5220},
{5125,5157,5189,5221},
{5126,5158,5190,5222},
{5127,5159,5191,5223},
{5128,5160,5192,5224},
{5129,5161,5193,5225},
{5130,5162,5194,5226},
{5131,5163,5195,5227},
{5132,5164,5196,5228},
{5133,5165,5197,5229},
{5134,5166,5198,5230},
{5135,5167,5199,5231},
{5136,5168,5200,5232},
{5137,5169,5201,5233},
{5138,5170,5202,5234},
{5139,5171,5203,5235},
{5140,5172,5204,5236},
{5141,5173,5205,5237},
{5142,5174,5206,5238},
{5143,5175,5207,5239},
{5144,5176,5208,5240},
{5145,5177,5209,5241},
{5146,5178,5210,5242},
{5147,5179,5211,5243},
{5148,5180,5212,5244},
{5149,5181,5213,5245},
{5150,5182,5214,5246},
{5151,5183,5215,5247},
{5248,5280,5312,5344},
{5249,5281,5313,5345},
{5250,5282,5314,5346},
{5251,5283,5315,5347},
{5252,5284,5316,5348},
{5253,5285,5317,5349},
{5254,5286,5318,5350},
{5255,5287,5319,5351},
{5256,5288,5320,5352},
{5257,5289,5321,5353},
{5258,5290,5322,5354},
{5259,5291,5323,5355},
{5260,5292,5324,5356},
{5261,5293,5325,5357},
{5262,5294,5326,5358},
{5263,5295,5327,5359},
{5264,5296,5328,5360},
{5265,5297,5329,5361},
{5266,5298,5330,5362},
{5267,5299,5331,5363},
{5268,5300,5332,5364},
{5269,5301,5333,5365},
{5270,5302,5334,5366},
{5271,5303,5335,5367},
{5272,5304,5336,5368},
{5273,5305,5337,5369},
{5274,5306,5338,5370},
{5275,5307,5339,5371},
{5276,5308,5340,5372},
{5277,5309,5341,5373},
{5278,5310,5342,5374},
{5279,5311,5343,5375},
{5376,5408,5440,5472},
{5377,5409,5441,5473},
{5378,5410,5442,5474},
{5379,5411,5443,5475},
{5380,5412,5444,5476},
{5381,5413,5445,5477},
{5382,5414,5446,5478},
{5383,5415,5447,5479},
{5384,5416,5448,5480},
{5385,5417,5449,5481},
{5386,5418,5450,5482},
{5387,5419,5451,5483},
{5388,5420,5452,5484},
{5389,5421,5453,5485},
{5390,5422,5454,5486},
{5391,5423,5455,5487},
{5392,5424,5456,5488},
{5393,5425,5457,5489},
{5394,5426,5458,5490},
{5395,5427,5459,5491},
{5396,5428,5460,5492},
{5397,5429,5461,5493},
{5398,5430,5462,5494},
{5399,5431,5463,5495},
{5400,5432,5464,5496},
{5401,5433,5465,5497},
{5402,5434,5466,5498},
{5403,5435,5467,5499},
{5404,5436,5468,5500},
{5405,5437,5469,5501},
{5406,5438,5470,5502},
{5407,5439,5471,5503},
{5504,5536,5568,5600},
{5505,5537,5569,5601},
{5506,5538,5570,5602},
{5507,5539,5571,5603},
{5508,5540,5572,5604},
{5509,5541,5573,5605},
{5510,5542,5574,5606},
{5511,5543,5575,5607},
{5512,5544,5576,5608},
{5513,5545,5577,5609},
{5514,5546,5578,5610},
{5515,5547,5579,5611},
{5516,5548,5580,5612},
{5517,5549,5581,5613},
{5518,5550,5582,5614},
{5519,5551,5583,5615},
{5520,5552,5584,5616},
{5521,5553,5585,5617},
{5522,5554,5586,5618},
{5523,5555,5587,5619},
{5524,5556,5588,5620},
{5525,5557,5589,5621},
{5526,5558,5590,5622},
{5527,5559,5591,5623},
{5528,5560,5592,5624},
{5529,5561,5593,5625},
{5530,5562,5594,5626},
{5531,5563,5595,5627},
{5532,5564,5596,5628},
{5533,5565,5597,5629},
{5534,5566,5598,5630},
{5535,5567,5599,5631},
{5632,5664,5696,5728},
{5633,5665,5697,5729},
{5634,5666,5698,5730},
{5635,5667,5699,5731},
{5636,5668,5700,5732},
{5637,5669,5701,5733},
{5638,5670,5702,5734},
{5639,5671,5703,5735},
{5640,5672,5704,5736},
{5641,5673,5705,5737},
{5642,5674,5706,5738},
{5643,5675,5707,5739},
{5644,5676,5708,5740},
{5645,5677,5709,5741},
{5646,5678,5710,5742},
{5647,5679,5711,5743},
{5648,5680,5712,5744},
{5649,5681,5713,5745},
{5650,5682,5714,5746},
{5651,5683,5715,5747},
{5652,5684,5716,5748},
{5653,5685,5717,5749},
{5654,5686,5718,5750},
{5655,5687,5719,5751},
{5656,5688,5720,5752},
{5657,5689,5721,5753},
{5658,5690,5722,5754},
{5659,5691,5723,5755},
{5660,5692,5724,5756},
{5661,5693,5725,5757},
{5662,5694,5726,5758},
{5663,5695,5727,5759},
{5760,5792,5824,5856},
{5761,5793,5825,5857},
{5762,5794,5826,5858},
{5763,5795,5827,5859},
{5764,5796,5828,5860},
{5765,5797,5829,5861},
{5766,5798,5830,5862},
{5767,5799,5831,5863},
{5768,5800,5832,5864},
{5769,5801,5833,5865},
{5770,5802,5834,5866},
{5771,5803,5835,5867},
{5772,5804,5836,5868},
{5773,5805,5837,5869},
{5774,5806,5838,5870},
{5775,5807,5839,5871},
{5776,5808,5840,5872},
{5777,5809,5841,5873},
{5778,5810,5842,5874},
{5779,5811,5843,5875},
{5780,5812,5844,5876},
{5781,5813,5845,5877},
{5782,5814,5846,5878},
{5783,5815,5847,5879},
{5784,5816,5848,5880},
{5785,5817,5849,5881},
{5786,5818,5850,5882},
{5787,5819,5851,5883},
{5788,5820,5852,5884},
{5789,5821,5853,5885},
{5790,5822,5854,5886},
{5791,5823,5855,5887},
{5888,5920,5952,5984},
{5889,5921,5953,5985},
{5890,5922,5954,5986},
{5891,5923,5955,5987},
{5892,5924,5956,5988},
{5893,5925,5957,5989},
{5894,5926,5958,5990},
{5895,5927,5959,5991},
{5896,5928,5960,5992},
{5897,5929,5961,5993},
{5898,5930,5962,5994},
{5899,5931,5963,5995},
{5900,5932,5964,5996},
{5901,5933,5965,5997},
{5902,5934,5966,5998},
{5903,5935,5967,5999},
{5904,5936,5968,6000},
{5905,5937,5969,6001},
{5906,5938,5970,6002},
{5907,5939,5971,6003},
{5908,5940,5972,6004},
{5909,5941,5973,6005},
{5910,5942,5974,6006},
{5911,5943,5975,6007},
{5912,5944,5976,6008},
{5913,5945,5977,6009},
{5914,5946,5978,6010},
{5915,5947,5979,6011},
{5916,5948,5980,6012},
{5917,5949,5981,6013},
{5918,5950,5982,6014},
{5919,5951,5983,6015},
{6016,6048,6080,6112},
{6017,6049,6081,6113},
{6018,6050,6082,6114},
{6019,6051,6083,6115},
{6020,6052,6084,6116},
{6021,6053,6085,6117},
{6022,6054,6086,6118},
{6023,6055,6087,6119},
{6024,6056,6088,6120},
{6025,6057,6089,6121},
{6026,6058,6090,6122},
{6027,6059,6091,6123},
{6028,6060,6092,6124},
{6029,6061,6093,6125},
{6030,6062,6094,6126},
{6031,6063,6095,6127},
{6032,6064,6096,6128},
{6033,6065,6097,6129},
{6034,6066,6098,6130},
{6035,6067,6099,6131},
{6036,6068,6100,6132},
{6037,6069,6101,6133},
{6038,6070,6102,6134},
{6039,6071,6103,6135},
{6040,6072,6104,6136},
{6041,6073,6105,6137},
{6042,6074,6106,6138},
{6043,6075,6107,6139},
{6044,6076,6108,6140},
{6045,6077,6109,6141},
{6046,6078,6110,6142},
{6047,6079,6111,6143},
{6144,6176,6208,6240},
{6145,6177,6209,6241},
{6146,6178,6210,6242},
{6147,6179,6211,6243},
{6148,6180,6212,6244},
{6149,6181,6213,6245},
{6150,6182,6214,6246},
{6151,6183,6215,6247},
{6152,6184,6216,6248},
{6153,6185,6217,6249},
{6154,6186,6218,6250},
{6155,6187,6219,6251},
{6156,6188,6220,6252},
{6157,6189,6221,6253},
{6158,6190,6222,6254},
{6159,6191,6223,6255},
{6160,6192,6224,6256},
{6161,6193,6225,6257},
{6162,6194,6226,6258},
{6163,6195,6227,6259},
{6164,6196,6228,6260},
{6165,6197,6229,6261},
{6166,6198,6230,6262},
{6167,6199,6231,6263},
{6168,6200,6232,6264},
{6169,6201,6233,6265},
{6170,6202,6234,6266},
{6171,6203,6235,6267},
{6172,6204,6236,6268},
{6173,6205,6237,6269},
{6174,6206,6238,6270},
{6175,6207,6239,6271},
{6272,6304,6336,6368},
{6273,6305,6337,6369},
{6274,6306,6338,6370},
{6275,6307,6339,6371},
{6276,6308,6340,6372},
{6277,6309,6341,6373},
{6278,6310,6342,6374},
{6279,6311,6343,6375},
{6280,6312,6344,6376},
{6281,6313,6345,6377},
{6282,6314,6346,6378},
{6283,6315,6347,6379},
{6284,6316,6348,6380},
{6285,6317,6349,6381},
{6286,6318,6350,6382},
{6287,6319,6351,6383},
{6288,6320,6352,6384},
{6289,6321,6353,6385},
{6290,6322,6354,6386},
{6291,6323,6355,6387},
{6292,6324,6356,6388},
{6293,6325,6357,6389},
{6294,6326,6358,6390},
{6295,6327,6359,6391},
{6296,6328,6360,6392},
{6297,6329,6361,6393},
{6298,6330,6362,6394},
{6299,6331,6363,6395},
{6300,6332,6364,6396},
{6301,6333,6365,6397},
{6302,6334,6366,6398},
{6303,6335,6367,6399},
{6400,6432,6464,6496},
{6401,6433,6465,6497},
{6402,6434,6466,6498},
{6403,6435,6467,6499},
{6404,6436,6468,6500},
{6405,6437,6469,6501},
{6406,6438,6470,6502},
{6407,6439,6471,6503},
{6408,6440,6472,6504},
{6409,6441,6473,6505},
{6410,6442,6474,6506},
{6411,6443,6475,6507},
{6412,6444,6476,6508},
{6413,6445,6477,6509},
{6414,6446,6478,6510},
{6415,6447,6479,6511},
{6416,6448,6480,6512},
{6417,6449,6481,6513},
{6418,6450,6482,6514},
{6419,6451,6483,6515},
{6420,6452,6484,6516},
{6421,6453,6485,6517},
{6422,6454,6486,6518},
{6423,6455,6487,6519},
{6424,6456,6488,6520},
{6425,6457,6489,6521},
{6426,6458,6490,6522},
{6427,6459,6491,6523},
{6428,6460,6492,6524},
{6429,6461,6493,6525},
{6430,6462,6494,6526},
{6431,6463,6495,6527},
{6528,6560,6592,6624},
{6529,6561,6593,6625},
{6530,6562,6594,6626},
{6531,6563,6595,6627},
{6532,6564,6596,6628},
{6533,6565,6597,6629},
{6534,6566,6598,6630},
{6535,6567,6599,6631},
{6536,6568,6600,6632},
{6537,6569,6601,6633},
{6538,6570,6602,6634},
{6539,6571,6603,6635},
{6540,6572,6604,6636},
{6541,6573,6605,6637},
{6542,6574,6606,6638},
{6543,6575,6607,6639},
{6544,6576,6608,6640},
{6545,6577,6609,6641},
{6546,6578,6610,6642},
{6547,6579,6611,6643},
{6548,6580,6612,6644},
{6549,6581,6613,6645},
{6550,6582,6614,6646},
{6551,6583,6615,6647},
{6552,6584,6616,6648},
{6553,6585,6617,6649},
{6554,6586,6618,6650},
{6555,6587,6619,6651},
{6556,6588,6620,6652},
{6557,6589,6621,6653},
{6558,6590,6622,6654},
{6559,6591,6623,6655},
{6656,6688,6720,6752},
{6657,6689,6721,6753},
{6658,6690,6722,6754},
{6659,6691,6723,6755},
{6660,6692,6724,6756},
{6661,6693,6725,6757},
{6662,6694,6726,6758},
{6663,6695,6727,6759},
{6664,6696,6728,6760},
{6665,6697,6729,6761},
{6666,6698,6730,6762},
{6667,6699,6731,6763},
{6668,6700,6732,6764},
{6669,6701,6733,6765},
{6670,6702,6734,6766},
{6671,6703,6735,6767},
{6672,6704,6736,6768},
{6673,6705,6737,6769},
{6674,6706,6738,6770},
{6675,6707,6739,6771},
{6676,6708,6740,6772},
{6677,6709,6741,6773},
{6678,6710,6742,6774},
{6679,6711,6743,6775},
{6680,6712,6744,6776},
{6681,6713,6745,6777},
{6682,6714,6746,6778},
{6683,6715,6747,6779},
{6684,6716,6748,6780},
{6685,6717,6749,6781},
{6686,6718,6750,6782},
{6687,6719,6751,6783},
{6784,6816,6848,6880},
{6785,6817,6849,6881},
{6786,6818,6850,6882},
{6787,6819,6851,6883},
{6788,6820,6852,6884},
{6789,6821,6853,6885},
{6790,6822,6854,6886},
{6791,6823,6855,6887},
{6792,6824,6856,6888},
{6793,6825,6857,6889},
{6794,6826,6858,6890},
{6795,6827,6859,6891},
{6796,6828,6860,6892},
{6797,6829,6861,6893},
{6798,6830,6862,6894},
{6799,6831,6863,6895},
{6800,6832,6864,6896},
{6801,6833,6865,6897},
{6802,6834,6866,6898},
{6803,6835,6867,6899},
{6804,6836,6868,6900},
{6805,6837,6869,6901},
{6806,6838,6870,6902},
{6807,6839,6871,6903},
{6808,6840,6872,6904},
{6809,6841,6873,6905},
{6810,6842,6874,6906},
{6811,6843,6875,6907},
{6812,6844,6876,6908},
{6813,6845,6877,6909},
{6814,6846,6878,6910},
{6815,6847,6879,6911},
{6912,6944,6976,7008},
{6913,6945,6977,7009},
{6914,6946,6978,7010},
{6915,6947,6979,7011},
{6916,6948,6980,7012},
{6917,6949,6981,7013},
{6918,6950,6982,7014},
{6919,6951,6983,7015},
{6920,6952,6984,7016},
{6921,6953,6985,7017},
{6922,6954,6986,7018},
{6923,6955,6987,7019},
{6924,6956,6988,7020},
{6925,6957,6989,7021},
{6926,6958,6990,7022},
{6927,6959,6991,7023},
{6928,6960,6992,7024},
{6929,6961,6993,7025},
{6930,6962,6994,7026},
{6931,6963,6995,7027},
{6932,6964,6996,7028},
{6933,6965,6997,7029},
{6934,6966,6998,7030},
{6935,6967,6999,7031},
{6936,6968,7000,7032},
{6937,6969,7001,7033},
{6938,6970,7002,7034},
{6939,6971,7003,7035},
{6940,6972,7004,7036},
{6941,6973,7005,7037},
{6942,6974,7006,7038},
{6943,6975,7007,7039},
{7040,7072,7104,7136},
{7041,7073,7105,7137},
{7042,7074,7106,7138},
{7043,7075,7107,7139},
{7044,7076,7108,7140},
{7045,7077,7109,7141},
{7046,7078,7110,7142},
{7047,7079,7111,7143},
{7048,7080,7112,7144},
{7049,7081,7113,7145},
{7050,7082,7114,7146},
{7051,7083,7115,7147},
{7052,7084,7116,7148},
{7053,7085,7117,7149},
{7054,7086,7118,7150},
{7055,7087,7119,7151},
{7056,7088,7120,7152},
{7057,7089,7121,7153},
{7058,7090,7122,7154},
{7059,7091,7123,7155},
{7060,7092,7124,7156},
{7061,7093,7125,7157},
{7062,7094,7126,7158},
{7063,7095,7127,7159},
{7064,7096,7128,7160},
{7065,7097,7129,7161},
{7066,7098,7130,7162},
{7067,7099,7131,7163},
{7068,7100,7132,7164},
{7069,7101,7133,7165},
{7070,7102,7134,7166},
{7071,7103,7135,7167},
{7168,7200,7232,7264},
{7169,7201,7233,7265},
{7170,7202,7234,7266},
{7171,7203,7235,7267},
{7172,7204,7236,7268},
{7173,7205,7237,7269},
{7174,7206,7238,7270},
{7175,7207,7239,7271},
{7176,7208,7240,7272},
{7177,7209,7241,7273},
{7178,7210,7242,7274},
{7179,7211,7243,7275},
{7180,7212,7244,7276},
{7181,7213,7245,7277},
{7182,7214,7246,7278},
{7183,7215,7247,7279},
{7184,7216,7248,7280},
{7185,7217,7249,7281},
{7186,7218,7250,7282},
{7187,7219,7251,7283},
{7188,7220,7252,7284},
{7189,7221,7253,7285},
{7190,7222,7254,7286},
{7191,7223,7255,7287},
{7192,7224,7256,7288},
{7193,7225,7257,7289},
{7194,7226,7258,7290},
{7195,7227,7259,7291},
{7196,7228,7260,7292},
{7197,7229,7261,7293},
{7198,7230,7262,7294},
{7199,7231,7263,7295},
{7296,7328,7360,7392},
{7297,7329,7361,7393},
{7298,7330,7362,7394},
{7299,7331,7363,7395},
{7300,7332,7364,7396},
{7301,7333,7365,7397},
{7302,7334,7366,7398},
{7303,7335,7367,7399},
{7304,7336,7368,7400},
{7305,7337,7369,7401},
{7306,7338,7370,7402},
{7307,7339,7371,7403},
{7308,7340,7372,7404},
{7309,7341,7373,7405},
{7310,7342,7374,7406},
{7311,7343,7375,7407},
{7312,7344,7376,7408},
{7313,7345,7377,7409},
{7314,7346,7378,7410},
{7315,7347,7379,7411},
{7316,7348,7380,7412},
{7317,7349,7381,7413},
{7318,7350,7382,7414},
{7319,7351,7383,7415},
{7320,7352,7384,7416},
{7321,7353,7385,7417},
{7322,7354,7386,7418},
{7323,7355,7387,7419},
{7324,7356,7388,7420},
{7325,7357,7389,7421},
{7326,7358,7390,7422},
{7327,7359,7391,7423},
{7424,7456,7488,7520},
{7425,7457,7489,7521},
{7426,7458,7490,7522},
{7427,7459,7491,7523},
{7428,7460,7492,7524},
{7429,7461,7493,7525},
{7430,7462,7494,7526},
{7431,7463,7495,7527},
{7432,7464,7496,7528},
{7433,7465,7497,7529},
{7434,7466,7498,7530},
{7435,7467,7499,7531},
{7436,7468,7500,7532},
{7437,7469,7501,7533},
{7438,7470,7502,7534},
{7439,7471,7503,7535},
{7440,7472,7504,7536},
{7441,7473,7505,7537},
{7442,7474,7506,7538},
{7443,7475,7507,7539},
{7444,7476,7508,7540},
{7445,7477,7509,7541},
{7446,7478,7510,7542},
{7447,7479,7511,7543},
{7448,7480,7512,7544},
{7449,7481,7513,7545},
{7450,7482,7514,7546},
{7451,7483,7515,7547},
{7452,7484,7516,7548},
{7453,7485,7517,7549},
{7454,7486,7518,7550},
{7455,7487,7519,7551},
{7552,7584,7616,7648},
{7553,7585,7617,7649},
{7554,7586,7618,7650},
{7555,7587,7619,7651},
{7556,7588,7620,7652},
{7557,7589,7621,7653},
{7558,7590,7622,7654},
{7559,7591,7623,7655},
{7560,7592,7624,7656},
{7561,7593,7625,7657},
{7562,7594,7626,7658},
{7563,7595,7627,7659},
{7564,7596,7628,7660},
{7565,7597,7629,7661},
{7566,7598,7630,7662},
{7567,7599,7631,7663},
{7568,7600,7632,7664},
{7569,7601,7633,7665},
{7570,7602,7634,7666},
{7571,7603,7635,7667},
{7572,7604,7636,7668},
{7573,7605,7637,7669},
{7574,7606,7638,7670},
{7575,7607,7639,7671},
{7576,7608,7640,7672},
{7577,7609,7641,7673},
{7578,7610,7642,7674},
{7579,7611,7643,7675},
{7580,7612,7644,7676},
{7581,7613,7645,7677},
{7582,7614,7646,7678},
{7583,7615,7647,7679},
{7680,7712,7744,7776},
{7681,7713,7745,7777},
{7682,7714,7746,7778},
{7683,7715,7747,7779},
{7684,7716,7748,7780},
{7685,7717,7749,7781},
{7686,7718,7750,7782},
{7687,7719,7751,7783},
{7688,7720,7752,7784},
{7689,7721,7753,7785},
{7690,7722,7754,7786},
{7691,7723,7755,7787},
{7692,7724,7756,7788},
{7693,7725,7757,7789},
{7694,7726,7758,7790},
{7695,7727,7759,7791},
{7696,7728,7760,7792},
{7697,7729,7761,7793},
{7698,7730,7762,7794},
{7699,7731,7763,7795},
{7700,7732,7764,7796},
{7701,7733,7765,7797},
{7702,7734,7766,7798},
{7703,7735,7767,7799},
{7704,7736,7768,7800},
{7705,7737,7769,7801},
{7706,7738,7770,7802},
{7707,7739,7771,7803},
{7708,7740,7772,7804},
{7709,7741,7773,7805},
{7710,7742,7774,7806},
{7711,7743,7775,7807},
{7808,7840,7872,7904},
{7809,7841,7873,7905},
{7810,7842,7874,7906},
{7811,7843,7875,7907},
{7812,7844,7876,7908},
{7813,7845,7877,7909},
{7814,7846,7878,7910},
{7815,7847,7879,7911},
{7816,7848,7880,7912},
{7817,7849,7881,7913},
{7818,7850,7882,7914},
{7819,7851,7883,7915},
{7820,7852,7884,7916},
{7821,7853,7885,7917},
{7822,7854,7886,7918},
{7823,7855,7887,7919},
{7824,7856,7888,7920},
{7825,7857,7889,7921},
{7826,7858,7890,7922},
{7827,7859,7891,7923},
{7828,7860,7892,7924},
{7829,7861,7893,7925},
{7830,7862,7894,7926},
{7831,7863,7895,7927},
{7832,7864,7896,7928},
{7833,7865,7897,7929},
{7834,7866,7898,7930},
{7835,7867,7899,7931},
{7836,7868,7900,7932},
{7837,7869,7901,7933},
{7838,7870,7902,7934},
{7839,7871,7903,7935},
{7936,7968,8000,8032},
{7937,7969,8001,8033},
{7938,7970,8002,8034},
{7939,7971,8003,8035},
{7940,7972,8004,8036},
{7941,7973,8005,8037},
{7942,7974,8006,8038},
{7943,7975,8007,8039},
{7944,7976,8008,8040},
{7945,7977,8009,8041},
{7946,7978,8010,8042},
{7947,7979,8011,8043},
{7948,7980,8012,8044},
{7949,7981,8013,8045},
{7950,7982,8014,8046},
{7951,7983,8015,8047},
{7952,7984,8016,8048},
{7953,7985,8017,8049},
{7954,7986,8018,8050},
{7955,7987,8019,8051},
{7956,7988,8020,8052},
{7957,7989,8021,8053},
{7958,7990,8022,8054},
{7959,7991,8023,8055},
{7960,7992,8024,8056},
{7961,7993,8025,8057},
{7962,7994,8026,8058},
{7963,7995,8027,8059},
{7964,7996,8028,8060},
{7965,7997,8029,8061},
{7966,7998,8030,8062},
{7967,7999,8031,8063},
{8064,8096,8128,8160},
{8065,8097,8129,8161},
{8066,8098,8130,8162},
{8067,8099,8131,8163},
{8068,8100,8132,8164},
{8069,8101,8133,8165},
{8070,8102,8134,8166},
{8071,8103,8135,8167},
{8072,8104,8136,8168},
{8073,8105,8137,8169},
{8074,8106,8138,8170},
{8075,8107,8139,8171},
{8076,8108,8140,8172},
{8077,8109,8141,8173},
{8078,8110,8142,8174},
{8079,8111,8143,8175},
{8080,8112,8144,8176},
{8081,8113,8145,8177},
{8082,8114,8146,8178},
{8083,8115,8147,8179},
{8084,8116,8148,8180},
{8085,8117,8149,8181},
{8086,8118,8150,8182},
{8087,8119,8151,8183},
{8088,8120,8152,8184},
{8089,8121,8153,8185},
{8090,8122,8154,8186},
{8091,8123,8155,8187},
{8092,8124,8156,8188},
{8093,8125,8157,8189},
{8094,8126,8158,8190},
{8095,8127,8159,8191},
{8192,8224,8256,8288},
{8193,8225,8257,8289},
{8194,8226,8258,8290},
{8195,8227,8259,8291},
{8196,8228,8260,8292},
{8197,8229,8261,8293},
{8198,8230,8262,8294},
{8199,8231,8263,8295},
{8200,8232,8264,8296},
{8201,8233,8265,8297},
{8202,8234,8266,8298},
{8203,8235,8267,8299},
{8204,8236,8268,8300},
{8205,8237,8269,8301},
{8206,8238,8270,8302},
{8207,8239,8271,8303},
{8208,8240,8272,8304},
{8209,8241,8273,8305},
{8210,8242,8274,8306},
{8211,8243,8275,8307},
{8212,8244,8276,8308},
{8213,8245,8277,8309},
{8214,8246,8278,8310},
{8215,8247,8279,8311},
{8216,8248,8280,8312},
{8217,8249,8281,8313},
{8218,8250,8282,8314},
{8219,8251,8283,8315},
{8220,8252,8284,8316},
{8221,8253,8285,8317},
{8222,8254,8286,8318},
{8223,8255,8287,8319},
{8320,8352,8384,8416},
{8321,8353,8385,8417},
{8322,8354,8386,8418},
{8323,8355,8387,8419},
{8324,8356,8388,8420},
{8325,8357,8389,8421},
{8326,8358,8390,8422},
{8327,8359,8391,8423},
{8328,8360,8392,8424},
{8329,8361,8393,8425},
{8330,8362,8394,8426},
{8331,8363,8395,8427},
{8332,8364,8396,8428},
{8333,8365,8397,8429},
{8334,8366,8398,8430},
{8335,8367,8399,8431},
{8336,8368,8400,8432},
{8337,8369,8401,8433},
{8338,8370,8402,8434},
{8339,8371,8403,8435},
{8340,8372,8404,8436},
{8341,8373,8405,8437},
{8342,8374,8406,8438},
{8343,8375,8407,8439},
{8344,8376,8408,8440},
{8345,8377,8409,8441},
{8346,8378,8410,8442},
{8347,8379,8411,8443},
{8348,8380,8412,8444},
{8349,8381,8413,8445},
{8350,8382,8414,8446},
{8351,8383,8415,8447},
{8448,8480,8512,8544},
{8449,8481,8513,8545},
{8450,8482,8514,8546},
{8451,8483,8515,8547},
{8452,8484,8516,8548},
{8453,8485,8517,8549},
{8454,8486,8518,8550},
{8455,8487,8519,8551},
{8456,8488,8520,8552},
{8457,8489,8521,8553},
{8458,8490,8522,8554},
{8459,8491,8523,8555},
{8460,8492,8524,8556},
{8461,8493,8525,8557},
{8462,8494,8526,8558},
{8463,8495,8527,8559},
{8464,8496,8528,8560},
{8465,8497,8529,8561},
{8466,8498,8530,8562},
{8467,8499,8531,8563},
{8468,8500,8532,8564},
{8469,8501,8533,8565},
{8470,8502,8534,8566},
{8471,8503,8535,8567},
{8472,8504,8536,8568},
{8473,8505,8537,8569},
{8474,8506,8538,8570},
{8475,8507,8539,8571},
{8476,8508,8540,8572},
{8477,8509,8541,8573},
{8478,8510,8542,8574},
{8479,8511,8543,8575},
{8576,8608,8640,8672},
{8577,8609,8641,8673},
{8578,8610,8642,8674},
{8579,8611,8643,8675},
{8580,8612,8644,8676},
{8581,8613,8645,8677},
{8582,8614,8646,8678},
{8583,8615,8647,8679},
{8584,8616,8648,8680},
{8585,8617,8649,8681},
{8586,8618,8650,8682},
{8587,8619,8651,8683},
{8588,8620,8652,8684},
{8589,8621,8653,8685},
{8590,8622,8654,8686},
{8591,8623,8655,8687},
{8592,8624,8656,8688},
{8593,8625,8657,8689},
{8594,8626,8658,8690},
{8595,8627,8659,8691},
{8596,8628,8660,8692},
{8597,8629,8661,8693},
{8598,8630,8662,8694},
{8599,8631,8663,8695},
{8600,8632,8664,8696},
{8601,8633,8665,8697},
{8602,8634,8666,8698},
{8603,8635,8667,8699},
{8604,8636,8668,8700},
{8605,8637,8669,8701},
{8606,8638,8670,8702},
{8607,8639,8671,8703},
{8704,8736,8768,8800},
{8705,8737,8769,8801},
{8706,8738,8770,8802},
{8707,8739,8771,8803},
{8708,8740,8772,8804},
{8709,8741,8773,8805},
{8710,8742,8774,8806},
{8711,8743,8775,8807},
{8712,8744,8776,8808},
{8713,8745,8777,8809},
{8714,8746,8778,8810},
{8715,8747,8779,8811},
{8716,8748,8780,8812},
{8717,8749,8781,8813},
{8718,8750,8782,8814},
{8719,8751,8783,8815},
{8720,8752,8784,8816},
{8721,8753,8785,8817},
{8722,8754,8786,8818},
{8723,8755,8787,8819},
{8724,8756,8788,8820},
{8725,8757,8789,8821},
{8726,8758,8790,8822},
{8727,8759,8791,8823},
{8728,8760,8792,8824},
{8729,8761,8793,8825},
{8730,8762,8794,8826},
{8731,8763,8795,8827},
{8732,8764,8796,8828},
{8733,8765,8797,8829},
{8734,8766,8798,8830},
{8735,8767,8799,8831},
{8832,8864,8896,8928},
{8833,8865,8897,8929},
{8834,8866,8898,8930},
{8835,8867,8899,8931},
{8836,8868,8900,8932},
{8837,8869,8901,8933},
{8838,8870,8902,8934},
{8839,8871,8903,8935},
{8840,8872,8904,8936},
{8841,8873,8905,8937},
{8842,8874,8906,8938},
{8843,8875,8907,8939},
{8844,8876,8908,8940},
{8845,8877,8909,8941},
{8846,8878,8910,8942},
{8847,8879,8911,8943},
{8848,8880,8912,8944},
{8849,8881,8913,8945},
{8850,8882,8914,8946},
{8851,8883,8915,8947},
{8852,8884,8916,8948},
{8853,8885,8917,8949},
{8854,8886,8918,8950},
{8855,8887,8919,8951},
{8856,8888,8920,8952},
{8857,8889,8921,8953},
{8858,8890,8922,8954},
{8859,8891,8923,8955},
{8860,8892,8924,8956},
{8861,8893,8925,8957},
{8862,8894,8926,8958},
{8863,8895,8927,8959},
{8960,8992,9024,9056},
{8961,8993,9025,9057},
{8962,8994,9026,9058},
{8963,8995,9027,9059},
{8964,8996,9028,9060},
{8965,8997,9029,9061},
{8966,8998,9030,9062},
{8967,8999,9031,9063},
{8968,9000,9032,9064},
{8969,9001,9033,9065},
{8970,9002,9034,9066},
{8971,9003,9035,9067},
{8972,9004,9036,9068},
{8973,9005,9037,9069},
{8974,9006,9038,9070},
{8975,9007,9039,9071},
{8976,9008,9040,9072},
{8977,9009,9041,9073},
{8978,9010,9042,9074},
{8979,9011,9043,9075},
{8980,9012,9044,9076},
{8981,9013,9045,9077},
{8982,9014,9046,9078},
{8983,9015,9047,9079},
{8984,9016,9048,9080},
{8985,9017,9049,9081},
{8986,9018,9050,9082},
{8987,9019,9051,9083},
{8988,9020,9052,9084},
{8989,9021,9053,9085},
{8990,9022,9054,9086},
{8991,9023,9055,9087},
{9088,9120,9152,9184},
{9089,9121,9153,9185},
{9090,9122,9154,9186},
{9091,9123,9155,9187},
{9092,9124,9156,9188},
{9093,9125,9157,9189},
{9094,9126,9158,9190},
{9095,9127,9159,9191},
{9096,9128,9160,9192},
{9097,9129,9161,9193},
{9098,9130,9162,9194},
{9099,9131,9163,9195},
{9100,9132,9164,9196},
{9101,9133,9165,9197},
{9102,9134,9166,9198},
{9103,9135,9167,9199},
{9104,9136,9168,9200},
{9105,9137,9169,9201},
{9106,9138,9170,9202},
{9107,9139,9171,9203},
{9108,9140,9172,9204},
{9109,9141,9173,9205},
{9110,9142,9174,9206},
{9111,9143,9175,9207},
{9112,9144,9176,9208},
{9113,9145,9177,9209},
{9114,9146,9178,9210},
{9115,9147,9179,9211},
{9116,9148,9180,9212},
{9117,9149,9181,9213},
{9118,9150,9182,9214},
{9119,9151,9183,9215},
{9216,9248,9280,9312},
{9217,9249,9281,9313},
{9218,9250,9282,9314},
{9219,9251,9283,9315},
{9220,9252,9284,9316},
{9221,9253,9285,9317},
{9222,9254,9286,9318},
{9223,9255,9287,9319},
{9224,9256,9288,9320},
{9225,9257,9289,9321},
{9226,9258,9290,9322},
{9227,9259,9291,9323},
{9228,9260,9292,9324},
{9229,9261,9293,9325},
{9230,9262,9294,9326},
{9231,9263,9295,9327},
{9232,9264,9296,9328},
{9233,9265,9297,9329},
{9234,9266,9298,9330},
{9235,9267,9299,9331},
{9236,9268,9300,9332},
{9237,9269,9301,9333},
{9238,9270,9302,9334},
{9239,9271,9303,9335},
{9240,9272,9304,9336},
{9241,9273,9305,9337},
{9242,9274,9306,9338},
{9243,9275,9307,9339},
{9244,9276,9308,9340},
{9245,9277,9309,9341},
{9246,9278,9310,9342},
{9247,9279,9311,9343},
{9344,9376,9408,9440},
{9345,9377,9409,9441},
{9346,9378,9410,9442},
{9347,9379,9411,9443},
{9348,9380,9412,9444},
{9349,9381,9413,9445},
{9350,9382,9414,9446},
{9351,9383,9415,9447},
{9352,9384,9416,9448},
{9353,9385,9417,9449},
{9354,9386,9418,9450},
{9355,9387,9419,9451},
{9356,9388,9420,9452},
{9357,9389,9421,9453},
{9358,9390,9422,9454},
{9359,9391,9423,9455},
{9360,9392,9424,9456},
{9361,9393,9425,9457},
{9362,9394,9426,9458},
{9363,9395,9427,9459},
{9364,9396,9428,9460},
{9365,9397,9429,9461},
{9366,9398,9430,9462},
{9367,9399,9431,9463},
{9368,9400,9432,9464},
{9369,9401,9433,9465},
{9370,9402,9434,9466},
{9371,9403,9435,9467},
{9372,9404,9436,9468},
{9373,9405,9437,9469},
{9374,9406,9438,9470},
{9375,9407,9439,9471},
{9472,9504,9536,9568},
{9473,9505,9537,9569},
{9474,9506,9538,9570},
{9475,9507,9539,9571},
{9476,9508,9540,9572},
{9477,9509,9541,9573},
{9478,9510,9542,9574},
{9479,9511,9543,9575},
{9480,9512,9544,9576},
{9481,9513,9545,9577},
{9482,9514,9546,9578},
{9483,9515,9547,9579},
{9484,9516,9548,9580},
{9485,9517,9549,9581},
{9486,9518,9550,9582},
{9487,9519,9551,9583},
{9488,9520,9552,9584},
{9489,9521,9553,9585},
{9490,9522,9554,9586},
{9491,9523,9555,9587},
{9492,9524,9556,9588},
{9493,9525,9557,9589},
{9494,9526,9558,9590},
{9495,9527,9559,9591},
{9496,9528,9560,9592},
{9497,9529,9561,9593},
{9498,9530,9562,9594},
{9499,9531,9563,9595},
{9500,9532,9564,9596},
{9501,9533,9565,9597},
{9502,9534,9566,9598},
{9503,9535,9567,9599},
{9600,9632,9664,9696},
{9601,9633,9665,9697},
{9602,9634,9666,9698},
{9603,9635,9667,9699},
{9604,9636,9668,9700},
{9605,9637,9669,9701},
{9606,9638,9670,9702},
{9607,9639,9671,9703},
{9608,9640,9672,9704},
{9609,9641,9673,9705},
{9610,9642,9674,9706},
{9611,9643,9675,9707},
{9612,9644,9676,9708},
{9613,9645,9677,9709},
{9614,9646,9678,9710},
{9615,9647,9679,9711},
{9616,9648,9680,9712},
{9617,9649,9681,9713},
{9618,9650,9682,9714},
{9619,9651,9683,9715},
{9620,9652,9684,9716},
{9621,9653,9685,9717},
{9622,9654,9686,9718},
{9623,9655,9687,9719},
{9624,9656,9688,9720},
{9625,9657,9689,9721},
{9626,9658,9690,9722},
{9627,9659,9691,9723},
{9628,9660,9692,9724},
{9629,9661,9693,9725},
{9630,9662,9694,9726},
{9631,9663,9695,9727},
{9728,9760,9792,9824},
{9729,9761,9793,9825},
{9730,9762,9794,9826},
{9731,9763,9795,9827},
{9732,9764,9796,9828},
{9733,9765,9797,9829},
{9734,9766,9798,9830},
{9735,9767,9799,9831},
{9736,9768,9800,9832},
{9737,9769,9801,9833},
{9738,9770,9802,9834},
{9739,9771,9803,9835},
{9740,9772,9804,9836},
{9741,9773,9805,9837},
{9742,9774,9806,9838},
{9743,9775,9807,9839},
{9744,9776,9808,9840},
{9745,9777,9809,9841},
{9746,9778,9810,9842},
{9747,9779,9811,9843},
{9748,9780,9812,9844},
{9749,9781,9813,9845},
{9750,9782,9814,9846},
{9751,9783,9815,9847},
{9752,9784,9816,9848},
{9753,9785,9817,9849},
{9754,9786,9818,9850},
{9755,9787,9819,9851},
{9756,9788,9820,9852},
{9757,9789,9821,9853},
{9758,9790,9822,9854},
{9759,9791,9823,9855},
{9856,9888,9920,9952},
{9857,9889,9921,9953},
{9858,9890,9922,9954},
{9859,9891,9923,9955},
{9860,9892,9924,9956},
{9861,9893,9925,9957},
{9862,9894,9926,9958},
{9863,9895,9927,9959},
{9864,9896,9928,9960},
{9865,9897,9929,9961},
{9866,9898,9930,9962},
{9867,9899,9931,9963},
{9868,9900,9932,9964},
{9869,9901,9933,9965},
{9870,9902,9934,9966},
{9871,9903,9935,9967},
{9872,9904,9936,9968},
{9873,9905,9937,9969},
{9874,9906,9938,9970},
{9875,9907,9939,9971},
{9876,9908,9940,9972},
{9877,9909,9941,9973},
{9878,9910,9942,9974},
{9879,9911,9943,9975},
{9880,9912,9944,9976},
{9881,9913,9945,9977},
{9882,9914,9946,9978},
{9883,9915,9947,9979},
{9884,9916,9948,9980},
{9885,9917,9949,9981},
{9886,9918,9950,9982},
{9887,9919,9951,9983},
{9984,10016,10048,10080},
{9985,10017,10049,10081},
{9986,10018,10050,10082},
{9987,10019,10051,10083},
{9988,10020,10052,10084},
{9989,10021,10053,10085},
{9990,10022,10054,10086},
{9991,10023,10055,10087},
{9992,10024,10056,10088},
{9993,10025,10057,10089},
{9994,10026,10058,10090},
{9995,10027,10059,10091},
{9996,10028,10060,10092},
{9997,10029,10061,10093},
{9998,10030,10062,10094},
{9999,10031,10063,10095},
{10000,10032,10064,10096},
{10001,10033,10065,10097},
{10002,10034,10066,10098},
{10003,10035,10067,10099},
{10004,10036,10068,10100},
{10005,10037,10069,10101},
{10006,10038,10070,10102},
{10007,10039,10071,10103},
{10008,10040,10072,10104},
{10009,10041,10073,10105},
{10010,10042,10074,10106},
{10011,10043,10075,10107},
{10012,10044,10076,10108},
{10013,10045,10077,10109},
{10014,10046,10078,10110},
{10015,10047,10079,10111},
{10112,10144,10176,10208},
{10113,10145,10177,10209},
{10114,10146,10178,10210},
{10115,10147,10179,10211},
{10116,10148,10180,10212},
{10117,10149,10181,10213},
{10118,10150,10182,10214},
{10119,10151,10183,10215},
{10120,10152,10184,10216},
{10121,10153,10185,10217},
{10122,10154,10186,10218},
{10123,10155,10187,10219},
{10124,10156,10188,10220},
{10125,10157,10189,10221},
{10126,10158,10190,10222},
{10127,10159,10191,10223},
{10128,10160,10192,10224},
{10129,10161,10193,10225},
{10130,10162,10194,10226},
{10131,10163,10195,10227},
{10132,10164,10196,10228},
{10133,10165,10197,10229},
{10134,10166,10198,10230},
{10135,10167,10199,10231},
{10136,10168,10200,10232},
{10137,10169,10201,10233},
{10138,10170,10202,10234},
{10139,10171,10203,10235},
{10140,10172,10204,10236},
{10141,10173,10205,10237},
{10142,10174,10206,10238},
{10143,10175,10207,10239},
{10240,10272,10304,10336},
{10241,10273,10305,10337},
{10242,10274,10306,10338},
{10243,10275,10307,10339},
{10244,10276,10308,10340},
{10245,10277,10309,10341},
{10246,10278,10310,10342},
{10247,10279,10311,10343},
{10248,10280,10312,10344},
{10249,10281,10313,10345},
{10250,10282,10314,10346},
{10251,10283,10315,10347},
{10252,10284,10316,10348},
{10253,10285,10317,10349},
{10254,10286,10318,10350},
{10255,10287,10319,10351},
{10256,10288,10320,10352},
{10257,10289,10321,10353},
{10258,10290,10322,10354},
{10259,10291,10323,10355},
{10260,10292,10324,10356},
{10261,10293,10325,10357},
{10262,10294,10326,10358},
{10263,10295,10327,10359},
{10264,10296,10328,10360},
{10265,10297,10329,10361},
{10266,10298,10330,10362},
{10267,10299,10331,10363},
{10268,10300,10332,10364},
{10269,10301,10333,10365},
{10270,10302,10334,10366},
{10271,10303,10335,10367},
{10368,10400,10432,10464},
{10369,10401,10433,10465},
{10370,10402,10434,10466},
{10371,10403,10435,10467},
{10372,10404,10436,10468},
{10373,10405,10437,10469},
{10374,10406,10438,10470},
{10375,10407,10439,10471},
{10376,10408,10440,10472},
{10377,10409,10441,10473},
{10378,10410,10442,10474},
{10379,10411,10443,10475},
{10380,10412,10444,10476},
{10381,10413,10445,10477},
{10382,10414,10446,10478},
{10383,10415,10447,10479},
{10384,10416,10448,10480},
{10385,10417,10449,10481},
{10386,10418,10450,10482},
{10387,10419,10451,10483},
{10388,10420,10452,10484},
{10389,10421,10453,10485},
{10390,10422,10454,10486},
{10391,10423,10455,10487},
{10392,10424,10456,10488},
{10393,10425,10457,10489},
{10394,10426,10458,10490},
{10395,10427,10459,10491},
{10396,10428,10460,10492},
{10397,10429,10461,10493},
{10398,10430,10462,10494},
{10399,10431,10463,10495},
{10496,10528,10560,10592},
{10497,10529,10561,10593},
{10498,10530,10562,10594},
{10499,10531,10563,10595},
{10500,10532,10564,10596},
{10501,10533,10565,10597},
{10502,10534,10566,10598},
{10503,10535,10567,10599},
{10504,10536,10568,10600},
{10505,10537,10569,10601},
{10506,10538,10570,10602},
{10507,10539,10571,10603},
{10508,10540,10572,10604},
{10509,10541,10573,10605},
{10510,10542,10574,10606},
{10511,10543,10575,10607},
{10512,10544,10576,10608},
{10513,10545,10577,10609},
{10514,10546,10578,10610},
{10515,10547,10579,10611},
{10516,10548,10580,10612},
{10517,10549,10581,10613},
{10518,10550,10582,10614},
{10519,10551,10583,10615},
{10520,10552,10584,10616},
{10521,10553,10585,10617},
{10522,10554,10586,10618},
{10523,10555,10587,10619},
{10524,10556,10588,10620},
{10525,10557,10589,10621},
{10526,10558,10590,10622},
{10527,10559,10591,10623},
{10624,10656,10688,10720},
{10625,10657,10689,10721},
{10626,10658,10690,10722},
{10627,10659,10691,10723},
{10628,10660,10692,10724},
{10629,10661,10693,10725},
{10630,10662,10694,10726},
{10631,10663,10695,10727},
{10632,10664,10696,10728},
{10633,10665,10697,10729},
{10634,10666,10698,10730},
{10635,10667,10699,10731},
{10636,10668,10700,10732},
{10637,10669,10701,10733},
{10638,10670,10702,10734},
{10639,10671,10703,10735},
{10640,10672,10704,10736},
{10641,10673,10705,10737},
{10642,10674,10706,10738},
{10643,10675,10707,10739},
{10644,10676,10708,10740},
{10645,10677,10709,10741},
{10646,10678,10710,10742},
{10647,10679,10711,10743},
{10648,10680,10712,10744},
{10649,10681,10713,10745},
{10650,10682,10714,10746},
{10651,10683,10715,10747},
{10652,10684,10716,10748},
{10653,10685,10717,10749},
{10654,10686,10718,10750},
{10655,10687,10719,10751},
{10752,10784,10816,10848},
{10753,10785,10817,10849},
{10754,10786,10818,10850},
{10755,10787,10819,10851},
{10756,10788,10820,10852},
{10757,10789,10821,10853},
{10758,10790,10822,10854},
{10759,10791,10823,10855},
{10760,10792,10824,10856},
{10761,10793,10825,10857},
{10762,10794,10826,10858},
{10763,10795,10827,10859},
{10764,10796,10828,10860},
{10765,10797,10829,10861},
{10766,10798,10830,10862},
{10767,10799,10831,10863},
{10768,10800,10832,10864},
{10769,10801,10833,10865},
{10770,10802,10834,10866},
{10771,10803,10835,10867},
{10772,10804,10836,10868},
{10773,10805,10837,10869},
{10774,10806,10838,10870},
{10775,10807,10839,10871},
{10776,10808,10840,10872},
{10777,10809,10841,10873},
{10778,10810,10842,10874},
{10779,10811,10843,10875},
{10780,10812,10844,10876},
{10781,10813,10845,10877},
{10782,10814,10846,10878},
{10783,10815,10847,10879},
{10880,10912,10944,10976},
{10881,10913,10945,10977},
{10882,10914,10946,10978},
{10883,10915,10947,10979},
{10884,10916,10948,10980},
{10885,10917,10949,10981},
{10886,10918,10950,10982},
{10887,10919,10951,10983},
{10888,10920,10952,10984},
{10889,10921,10953,10985},
{10890,10922,10954,10986},
{10891,10923,10955,10987},
{10892,10924,10956,10988},
{10893,10925,10957,10989},
{10894,10926,10958,10990},
{10895,10927,10959,10991},
{10896,10928,10960,10992},
{10897,10929,10961,10993},
{10898,10930,10962,10994},
{10899,10931,10963,10995},
{10900,10932,10964,10996},
{10901,10933,10965,10997},
{10902,10934,10966,10998},
{10903,10935,10967,10999},
{10904,10936,10968,11000},
{10905,10937,10969,11001},
{10906,10938,10970,11002},
{10907,10939,10971,11003},
{10908,10940,10972,11004},
{10909,10941,10973,11005},
{10910,10942,10974,11006},
{10911,10943,10975,11007},
{11008,11040,11072,11104},
{11009,11041,11073,11105},
{11010,11042,11074,11106},
{11011,11043,11075,11107},
{11012,11044,11076,11108},
{11013,11045,11077,11109},
{11014,11046,11078,11110},
{11015,11047,11079,11111},
{11016,11048,11080,11112},
{11017,11049,11081,11113},
{11018,11050,11082,11114},
{11019,11051,11083,11115},
{11020,11052,11084,11116},
{11021,11053,11085,11117},
{11022,11054,11086,11118},
{11023,11055,11087,11119},
{11024,11056,11088,11120},
{11025,11057,11089,11121},
{11026,11058,11090,11122},
{11027,11059,11091,11123},
{11028,11060,11092,11124},
{11029,11061,11093,11125},
{11030,11062,11094,11126},
{11031,11063,11095,11127},
{11032,11064,11096,11128},
{11033,11065,11097,11129},
{11034,11066,11098,11130},
{11035,11067,11099,11131},
{11036,11068,11100,11132},
{11037,11069,11101,11133},
{11038,11070,11102,11134},
{11039,11071,11103,11135},
{11136,11168,11200,11232},
{11137,11169,11201,11233},
{11138,11170,11202,11234},
{11139,11171,11203,11235},
{11140,11172,11204,11236},
{11141,11173,11205,11237},
{11142,11174,11206,11238},
{11143,11175,11207,11239},
{11144,11176,11208,11240},
{11145,11177,11209,11241},
{11146,11178,11210,11242},
{11147,11179,11211,11243},
{11148,11180,11212,11244},
{11149,11181,11213,11245},
{11150,11182,11214,11246},
{11151,11183,11215,11247},
{11152,11184,11216,11248},
{11153,11185,11217,11249},
{11154,11186,11218,11250},
{11155,11187,11219,11251},
{11156,11188,11220,11252},
{11157,11189,11221,11253},
{11158,11190,11222,11254},
{11159,11191,11223,11255},
{11160,11192,11224,11256},
{11161,11193,11225,11257},
{11162,11194,11226,11258},
{11163,11195,11227,11259},
{11164,11196,11228,11260},
{11165,11197,11229,11261},
{11166,11198,11230,11262},
{11167,11199,11231,11263},
{11264,11296,11328,11360},
{11265,11297,11329,11361},
{11266,11298,11330,11362},
{11267,11299,11331,11363},
{11268,11300,11332,11364},
{11269,11301,11333,11365},
{11270,11302,11334,11366},
{11271,11303,11335,11367},
{11272,11304,11336,11368},
{11273,11305,11337,11369},
{11274,11306,11338,11370},
{11275,11307,11339,11371},
{11276,11308,11340,11372},
{11277,11309,11341,11373},
{11278,11310,11342,11374},
{11279,11311,11343,11375},
{11280,11312,11344,11376},
{11281,11313,11345,11377},
{11282,11314,11346,11378},
{11283,11315,11347,11379},
{11284,11316,11348,11380},
{11285,11317,11349,11381},
{11286,11318,11350,11382},
{11287,11319,11351,11383},
{11288,11320,11352,11384},
{11289,11321,11353,11385},
{11290,11322,11354,11386},
{11291,11323,11355,11387},
{11292,11324,11356,11388},
{11293,11325,11357,11389},
{11294,11326,11358,11390},
{11295,11327,11359,11391},
{11392,11424,11456,11488},
{11393,11425,11457,11489},
{11394,11426,11458,11490},
{11395,11427,11459,11491},
{11396,11428,11460,11492},
{11397,11429,11461,11493},
{11398,11430,11462,11494},
{11399,11431,11463,11495},
{11400,11432,11464,11496},
{11401,11433,11465,11497},
{11402,11434,11466,11498},
{11403,11435,11467,11499},
{11404,11436,11468,11500},
{11405,11437,11469,11501},
{11406,11438,11470,11502},
{11407,11439,11471,11503},
{11408,11440,11472,11504},
{11409,11441,11473,11505},
{11410,11442,11474,11506},
{11411,11443,11475,11507},
{11412,11444,11476,11508},
{11413,11445,11477,11509},
{11414,11446,11478,11510},
{11415,11447,11479,11511},
{11416,11448,11480,11512},
{11417,11449,11481,11513},
{11418,11450,11482,11514},
{11419,11451,11483,11515},
{11420,11452,11484,11516},
{11421,11453,11485,11517},
{11422,11454,11486,11518},
{11423,11455,11487,11519},
{11520,11552,11584,11616},
{11521,11553,11585,11617},
{11522,11554,11586,11618},
{11523,11555,11587,11619},
{11524,11556,11588,11620},
{11525,11557,11589,11621},
{11526,11558,11590,11622},
{11527,11559,11591,11623},
{11528,11560,11592,11624},
{11529,11561,11593,11625},
{11530,11562,11594,11626},
{11531,11563,11595,11627},
{11532,11564,11596,11628},
{11533,11565,11597,11629},
{11534,11566,11598,11630},
{11535,11567,11599,11631},
{11536,11568,11600,11632},
{11537,11569,11601,11633},
{11538,11570,11602,11634},
{11539,11571,11603,11635},
{11540,11572,11604,11636},
{11541,11573,11605,11637},
{11542,11574,11606,11638},
{11543,11575,11607,11639},
{11544,11576,11608,11640},
{11545,11577,11609,11641},
{11546,11578,11610,11642},
{11547,11579,11611,11643},
{11548,11580,11612,11644},
{11549,11581,11613,11645},
{11550,11582,11614,11646},
{11551,11583,11615,11647},
{11648,11680,11712,11744},
{11649,11681,11713,11745},
{11650,11682,11714,11746},
{11651,11683,11715,11747},
{11652,11684,11716,11748},
{11653,11685,11717,11749},
{11654,11686,11718,11750},
{11655,11687,11719,11751},
{11656,11688,11720,11752},
{11657,11689,11721,11753},
{11658,11690,11722,11754},
{11659,11691,11723,11755},
{11660,11692,11724,11756},
{11661,11693,11725,11757},
{11662,11694,11726,11758},
{11663,11695,11727,11759},
{11664,11696,11728,11760},
{11665,11697,11729,11761},
{11666,11698,11730,11762},
{11667,11699,11731,11763},
{11668,11700,11732,11764},
{11669,11701,11733,11765},
{11670,11702,11734,11766},
{11671,11703,11735,11767},
{11672,11704,11736,11768},
{11673,11705,11737,11769},
{11674,11706,11738,11770},
{11675,11707,11739,11771},
{11676,11708,11740,11772},
{11677,11709,11741,11773},
{11678,11710,11742,11774},
{11679,11711,11743,11775},
{11776,11808,11840,11872},
{11777,11809,11841,11873},
{11778,11810,11842,11874},
{11779,11811,11843,11875},
{11780,11812,11844,11876},
{11781,11813,11845,11877},
{11782,11814,11846,11878},
{11783,11815,11847,11879},
{11784,11816,11848,11880},
{11785,11817,11849,11881},
{11786,11818,11850,11882},
{11787,11819,11851,11883},
{11788,11820,11852,11884},
{11789,11821,11853,11885},
{11790,11822,11854,11886},
{11791,11823,11855,11887},
{11792,11824,11856,11888},
{11793,11825,11857,11889},
{11794,11826,11858,11890},
{11795,11827,11859,11891},
{11796,11828,11860,11892},
{11797,11829,11861,11893},
{11798,11830,11862,11894},
{11799,11831,11863,11895},
{11800,11832,11864,11896},
{11801,11833,11865,11897},
{11802,11834,11866,11898},
{11803,11835,11867,11899},
{11804,11836,11868,11900},
{11805,11837,11869,11901},
{11806,11838,11870,11902},
{11807,11839,11871,11903},
{11904,11936,11968,12000},
{11905,11937,11969,12001},
{11906,11938,11970,12002},
{11907,11939,11971,12003},
{11908,11940,11972,12004},
{11909,11941,11973,12005},
{11910,11942,11974,12006},
{11911,11943,11975,12007},
{11912,11944,11976,12008},
{11913,11945,11977,12009},
{11914,11946,11978,12010},
{11915,11947,11979,12011},
{11916,11948,11980,12012},
{11917,11949,11981,12013},
{11918,11950,11982,12014},
{11919,11951,11983,12015},
{11920,11952,11984,12016},
{11921,11953,11985,12017},
{11922,11954,11986,12018},
{11923,11955,11987,12019},
{11924,11956,11988,12020},
{11925,11957,11989,12021},
{11926,11958,11990,12022},
{11927,11959,11991,12023},
{11928,11960,11992,12024},
{11929,11961,11993,12025},
{11930,11962,11994,12026},
{11931,11963,11995,12027},
{11932,11964,11996,12028},
{11933,11965,11997,12029},
{11934,11966,11998,12030},
{11935,11967,11999,12031},
{12032,12064,12096,12128},
{12033,12065,12097,12129},
{12034,12066,12098,12130},
{12035,12067,12099,12131},
{12036,12068,12100,12132},
{12037,12069,12101,12133},
{12038,12070,12102,12134},
{12039,12071,12103,12135},
{12040,12072,12104,12136},
{12041,12073,12105,12137},
{12042,12074,12106,12138},
{12043,12075,12107,12139},
{12044,12076,12108,12140},
{12045,12077,12109,12141},
{12046,12078,12110,12142},
{12047,12079,12111,12143},
{12048,12080,12112,12144},
{12049,12081,12113,12145},
{12050,12082,12114,12146},
{12051,12083,12115,12147},
{12052,12084,12116,12148},
{12053,12085,12117,12149},
{12054,12086,12118,12150},
{12055,12087,12119,12151},
{12056,12088,12120,12152},
{12057,12089,12121,12153},
{12058,12090,12122,12154},
{12059,12091,12123,12155},
{12060,12092,12124,12156},
{12061,12093,12125,12157},
{12062,12094,12126,12158},
{12063,12095,12127,12159},
{12160,12192,12224,12256},
{12161,12193,12225,12257},
{12162,12194,12226,12258},
{12163,12195,12227,12259},
{12164,12196,12228,12260},
{12165,12197,12229,12261},
{12166,12198,12230,12262},
{12167,12199,12231,12263},
{12168,12200,12232,12264},
{12169,12201,12233,12265},
{12170,12202,12234,12266},
{12171,12203,12235,12267},
{12172,12204,12236,12268},
{12173,12205,12237,12269},
{12174,12206,12238,12270},
{12175,12207,12239,12271},
{12176,12208,12240,12272},
{12177,12209,12241,12273},
{12178,12210,12242,12274},
{12179,12211,12243,12275},
{12180,12212,12244,12276},
{12181,12213,12245,12277},
{12182,12214,12246,12278},
{12183,12215,12247,12279},
{12184,12216,12248,12280},
{12185,12217,12249,12281},
{12186,12218,12250,12282},
{12187,12219,12251,12283},
{12188,12220,12252,12284},
{12189,12221,12253,12285},
{12190,12222,12254,12286},
{12191,12223,12255,12287},
{12288,12320,12352,12384},
{12289,12321,12353,12385},
{12290,12322,12354,12386},
{12291,12323,12355,12387},
{12292,12324,12356,12388},
{12293,12325,12357,12389},
{12294,12326,12358,12390},
{12295,12327,12359,12391},
{12296,12328,12360,12392},
{12297,12329,12361,12393},
{12298,12330,12362,12394},
{12299,12331,12363,12395},
{12300,12332,12364,12396},
{12301,12333,12365,12397},
{12302,12334,12366,12398},
{12303,12335,12367,12399},
{12304,12336,12368,12400},
{12305,12337,12369,12401},
{12306,12338,12370,12402},
{12307,12339,12371,12403},
{12308,12340,12372,12404},
{12309,12341,12373,12405},
{12310,12342,12374,12406},
{12311,12343,12375,12407},
{12312,12344,12376,12408},
{12313,12345,12377,12409},
{12314,12346,12378,12410},
{12315,12347,12379,12411},
{12316,12348,12380,12412},
{12317,12349,12381,12413},
{12318,12350,12382,12414},
{12319,12351,12383,12415},
{12416,12448,12480,12512},
{12417,12449,12481,12513},
{12418,12450,12482,12514},
{12419,12451,12483,12515},
{12420,12452,12484,12516},
{12421,12453,12485,12517},
{12422,12454,12486,12518},
{12423,12455,12487,12519},
{12424,12456,12488,12520},
{12425,12457,12489,12521},
{12426,12458,12490,12522},
{12427,12459,12491,12523},
{12428,12460,12492,12524},
{12429,12461,12493,12525},
{12430,12462,12494,12526},
{12431,12463,12495,12527},
{12432,12464,12496,12528},
{12433,12465,12497,12529},
{12434,12466,12498,12530},
{12435,12467,12499,12531},
{12436,12468,12500,12532},
{12437,12469,12501,12533},
{12438,12470,12502,12534},
{12439,12471,12503,12535},
{12440,12472,12504,12536},
{12441,12473,12505,12537},
{12442,12474,12506,12538},
{12443,12475,12507,12539},
{12444,12476,12508,12540},
{12445,12477,12509,12541},
{12446,12478,12510,12542},
{12447,12479,12511,12543},
{12544,12576,12608,12640},
{12545,12577,12609,12641},
{12546,12578,12610,12642},
{12547,12579,12611,12643},
{12548,12580,12612,12644},
{12549,12581,12613,12645},
{12550,12582,12614,12646},
{12551,12583,12615,12647},
{12552,12584,12616,12648},
{12553,12585,12617,12649},
{12554,12586,12618,12650},
{12555,12587,12619,12651},
{12556,12588,12620,12652},
{12557,12589,12621,12653},
{12558,12590,12622,12654},
{12559,12591,12623,12655},
{12560,12592,12624,12656},
{12561,12593,12625,12657},
{12562,12594,12626,12658},
{12563,12595,12627,12659},
{12564,12596,12628,12660},
{12565,12597,12629,12661},
{12566,12598,12630,12662},
{12567,12599,12631,12663},
{12568,12600,12632,12664},
{12569,12601,12633,12665},
{12570,12602,12634,12666},
{12571,12603,12635,12667},
{12572,12604,12636,12668},
{12573,12605,12637,12669},
{12574,12606,12638,12670},
{12575,12607,12639,12671},
{12672,12704,12736,12768},
{12673,12705,12737,12769},
{12674,12706,12738,12770},
{12675,12707,12739,12771},
{12676,12708,12740,12772},
{12677,12709,12741,12773},
{12678,12710,12742,12774},
{12679,12711,12743,12775},
{12680,12712,12744,12776},
{12681,12713,12745,12777},
{12682,12714,12746,12778},
{12683,12715,12747,12779},
{12684,12716,12748,12780},
{12685,12717,12749,12781},
{12686,12718,12750,12782},
{12687,12719,12751,12783},
{12688,12720,12752,12784},
{12689,12721,12753,12785},
{12690,12722,12754,12786},
{12691,12723,12755,12787},
{12692,12724,12756,12788},
{12693,12725,12757,12789},
{12694,12726,12758,12790},
{12695,12727,12759,12791},
{12696,12728,12760,12792},
{12697,12729,12761,12793},
{12698,12730,12762,12794},
{12699,12731,12763,12795},
{12700,12732,12764,12796},
{12701,12733,12765,12797},
{12702,12734,12766,12798},
{12703,12735,12767,12799},
{12800,12832,12864,12896},
{12801,12833,12865,12897},
{12802,12834,12866,12898},
{12803,12835,12867,12899},
{12804,12836,12868,12900},
{12805,12837,12869,12901},
{12806,12838,12870,12902},
{12807,12839,12871,12903},
{12808,12840,12872,12904},
{12809,12841,12873,12905},
{12810,12842,12874,12906},
{12811,12843,12875,12907},
{12812,12844,12876,12908},
{12813,12845,12877,12909},
{12814,12846,12878,12910},
{12815,12847,12879,12911},
{12816,12848,12880,12912},
{12817,12849,12881,12913},
{12818,12850,12882,12914},
{12819,12851,12883,12915},
{12820,12852,12884,12916},
{12821,12853,12885,12917},
{12822,12854,12886,12918},
{12823,12855,12887,12919},
{12824,12856,12888,12920},
{12825,12857,12889,12921},
{12826,12858,12890,12922},
{12827,12859,12891,12923},
{12828,12860,12892,12924},
{12829,12861,12893,12925},
{12830,12862,12894,12926},
{12831,12863,12895,12927},
{12928,12960,12992,13024},
{12929,12961,12993,13025},
{12930,12962,12994,13026},
{12931,12963,12995,13027},
{12932,12964,12996,13028},
{12933,12965,12997,13029},
{12934,12966,12998,13030},
{12935,12967,12999,13031},
{12936,12968,13000,13032},
{12937,12969,13001,13033},
{12938,12970,13002,13034},
{12939,12971,13003,13035},
{12940,12972,13004,13036},
{12941,12973,13005,13037},
{12942,12974,13006,13038},
{12943,12975,13007,13039},
{12944,12976,13008,13040},
{12945,12977,13009,13041},
{12946,12978,13010,13042},
{12947,12979,13011,13043},
{12948,12980,13012,13044},
{12949,12981,13013,13045},
{12950,12982,13014,13046},
{12951,12983,13015,13047},
{12952,12984,13016,13048},
{12953,12985,13017,13049},
{12954,12986,13018,13050},
{12955,12987,13019,13051},
{12956,12988,13020,13052},
{12957,12989,13021,13053},
{12958,12990,13022,13054},
{12959,12991,13023,13055},
{13056,13088,13120,13152},
{13057,13089,13121,13153},
{13058,13090,13122,13154},
{13059,13091,13123,13155},
{13060,13092,13124,13156},
{13061,13093,13125,13157},
{13062,13094,13126,13158},
{13063,13095,13127,13159},
{13064,13096,13128,13160},
{13065,13097,13129,13161},
{13066,13098,13130,13162},
{13067,13099,13131,13163},
{13068,13100,13132,13164},
{13069,13101,13133,13165},
{13070,13102,13134,13166},
{13071,13103,13135,13167},
{13072,13104,13136,13168},
{13073,13105,13137,13169},
{13074,13106,13138,13170},
{13075,13107,13139,13171},
{13076,13108,13140,13172},
{13077,13109,13141,13173},
{13078,13110,13142,13174},
{13079,13111,13143,13175},
{13080,13112,13144,13176},
{13081,13113,13145,13177},
{13082,13114,13146,13178},
{13083,13115,13147,13179},
{13084,13116,13148,13180},
{13085,13117,13149,13181},
{13086,13118,13150,13182},
{13087,13119,13151,13183},
{13184,13216,13248,13280},
{13185,13217,13249,13281},
{13186,13218,13250,13282},
{13187,13219,13251,13283},
{13188,13220,13252,13284},
{13189,13221,13253,13285},
{13190,13222,13254,13286},
{13191,13223,13255,13287},
{13192,13224,13256,13288},
{13193,13225,13257,13289},
{13194,13226,13258,13290},
{13195,13227,13259,13291},
{13196,13228,13260,13292},
{13197,13229,13261,13293},
{13198,13230,13262,13294},
{13199,13231,13263,13295},
{13200,13232,13264,13296},
{13201,13233,13265,13297},
{13202,13234,13266,13298},
{13203,13235,13267,13299},
{13204,13236,13268,13300},
{13205,13237,13269,13301},
{13206,13238,13270,13302},
{13207,13239,13271,13303},
{13208,13240,13272,13304},
{13209,13241,13273,13305},
{13210,13242,13274,13306},
{13211,13243,13275,13307},
{13212,13244,13276,13308},
{13213,13245,13277,13309},
{13214,13246,13278,13310},
{13215,13247,13279,13311},
{13312,13344,13376,13408},
{13313,13345,13377,13409},
{13314,13346,13378,13410},
{13315,13347,13379,13411},
{13316,13348,13380,13412},
{13317,13349,13381,13413},
{13318,13350,13382,13414},
{13319,13351,13383,13415},
{13320,13352,13384,13416},
{13321,13353,13385,13417},
{13322,13354,13386,13418},
{13323,13355,13387,13419},
{13324,13356,13388,13420},
{13325,13357,13389,13421},
{13326,13358,13390,13422},
{13327,13359,13391,13423},
{13328,13360,13392,13424},
{13329,13361,13393,13425},
{13330,13362,13394,13426},
{13331,13363,13395,13427},
{13332,13364,13396,13428},
{13333,13365,13397,13429},
{13334,13366,13398,13430},
{13335,13367,13399,13431},
{13336,13368,13400,13432},
{13337,13369,13401,13433},
{13338,13370,13402,13434},
{13339,13371,13403,13435},
{13340,13372,13404,13436},
{13341,13373,13405,13437},
{13342,13374,13406,13438},
{13343,13375,13407,13439},
{13440,13472,13504,13536},
{13441,13473,13505,13537},
{13442,13474,13506,13538},
{13443,13475,13507,13539},
{13444,13476,13508,13540},
{13445,13477,13509,13541},
{13446,13478,13510,13542},
{13447,13479,13511,13543},
{13448,13480,13512,13544},
{13449,13481,13513,13545},
{13450,13482,13514,13546},
{13451,13483,13515,13547},
{13452,13484,13516,13548},
{13453,13485,13517,13549},
{13454,13486,13518,13550},
{13455,13487,13519,13551},
{13456,13488,13520,13552},
{13457,13489,13521,13553},
{13458,13490,13522,13554},
{13459,13491,13523,13555},
{13460,13492,13524,13556},
{13461,13493,13525,13557},
{13462,13494,13526,13558},
{13463,13495,13527,13559},
{13464,13496,13528,13560},
{13465,13497,13529,13561},
{13466,13498,13530,13562},
{13467,13499,13531,13563},
{13468,13500,13532,13564},
{13469,13501,13533,13565},
{13470,13502,13534,13566},
{13471,13503,13535,13567},
{13568,13600,13632,13664},
{13569,13601,13633,13665},
{13570,13602,13634,13666},
{13571,13603,13635,13667},
{13572,13604,13636,13668},
{13573,13605,13637,13669},
{13574,13606,13638,13670},
{13575,13607,13639,13671},
{13576,13608,13640,13672},
{13577,13609,13641,13673},
{13578,13610,13642,13674},
{13579,13611,13643,13675},
{13580,13612,13644,13676},
{13581,13613,13645,13677},
{13582,13614,13646,13678},
{13583,13615,13647,13679},
{13584,13616,13648,13680},
{13585,13617,13649,13681},
{13586,13618,13650,13682},
{13587,13619,13651,13683},
{13588,13620,13652,13684},
{13589,13621,13653,13685},
{13590,13622,13654,13686},
{13591,13623,13655,13687},
{13592,13624,13656,13688},
{13593,13625,13657,13689},
{13594,13626,13658,13690},
{13595,13627,13659,13691},
{13596,13628,13660,13692},
{13597,13629,13661,13693},
{13598,13630,13662,13694},
{13599,13631,13663,13695},
{13696,13728,13760,13792},
{13697,13729,13761,13793},
{13698,13730,13762,13794},
{13699,13731,13763,13795},
{13700,13732,13764,13796},
{13701,13733,13765,13797},
{13702,13734,13766,13798},
{13703,13735,13767,13799},
{13704,13736,13768,13800},
{13705,13737,13769,13801},
{13706,13738,13770,13802},
{13707,13739,13771,13803},
{13708,13740,13772,13804},
{13709,13741,13773,13805},
{13710,13742,13774,13806},
{13711,13743,13775,13807},
{13712,13744,13776,13808},
{13713,13745,13777,13809},
{13714,13746,13778,13810},
{13715,13747,13779,13811},
{13716,13748,13780,13812},
{13717,13749,13781,13813},
{13718,13750,13782,13814},
{13719,13751,13783,13815},
{13720,13752,13784,13816},
{13721,13753,13785,13817},
{13722,13754,13786,13818},
{13723,13755,13787,13819},
{13724,13756,13788,13820},
{13725,13757,13789,13821},
{13726,13758,13790,13822},
{13727,13759,13791,13823},
{13824,13856,13888,13920},
{13825,13857,13889,13921},
{13826,13858,13890,13922},
{13827,13859,13891,13923},
{13828,13860,13892,13924},
{13829,13861,13893,13925},
{13830,13862,13894,13926},
{13831,13863,13895,13927},
{13832,13864,13896,13928},
{13833,13865,13897,13929},
{13834,13866,13898,13930},
{13835,13867,13899,13931},
{13836,13868,13900,13932},
{13837,13869,13901,13933},
{13838,13870,13902,13934},
{13839,13871,13903,13935},
{13840,13872,13904,13936},
{13841,13873,13905,13937},
{13842,13874,13906,13938},
{13843,13875,13907,13939},
{13844,13876,13908,13940},
{13845,13877,13909,13941},
{13846,13878,13910,13942},
{13847,13879,13911,13943},
{13848,13880,13912,13944},
{13849,13881,13913,13945},
{13850,13882,13914,13946},
{13851,13883,13915,13947},
{13852,13884,13916,13948},
{13853,13885,13917,13949},
{13854,13886,13918,13950},
{13855,13887,13919,13951},
{13952,13984,14016,14048},
{13953,13985,14017,14049},
{13954,13986,14018,14050},
{13955,13987,14019,14051},
{13956,13988,14020,14052},
{13957,13989,14021,14053},
{13958,13990,14022,14054},
{13959,13991,14023,14055},
{13960,13992,14024,14056},
{13961,13993,14025,14057},
{13962,13994,14026,14058},
{13963,13995,14027,14059},
{13964,13996,14028,14060},
{13965,13997,14029,14061},
{13966,13998,14030,14062},
{13967,13999,14031,14063},
{13968,14000,14032,14064},
{13969,14001,14033,14065},
{13970,14002,14034,14066},
{13971,14003,14035,14067},
{13972,14004,14036,14068},
{13973,14005,14037,14069},
{13974,14006,14038,14070},
{13975,14007,14039,14071},
{13976,14008,14040,14072},
{13977,14009,14041,14073},
{13978,14010,14042,14074},
{13979,14011,14043,14075},
{13980,14012,14044,14076},
{13981,14013,14045,14077},
{13982,14014,14046,14078},
{13983,14015,14047,14079},
{14080,14112,14144,14176},
{14081,14113,14145,14177},
{14082,14114,14146,14178},
{14083,14115,14147,14179},
{14084,14116,14148,14180},
{14085,14117,14149,14181},
{14086,14118,14150,14182},
{14087,14119,14151,14183},
{14088,14120,14152,14184},
{14089,14121,14153,14185},
{14090,14122,14154,14186},
{14091,14123,14155,14187},
{14092,14124,14156,14188},
{14093,14125,14157,14189},
{14094,14126,14158,14190},
{14095,14127,14159,14191},
{14096,14128,14160,14192},
{14097,14129,14161,14193},
{14098,14130,14162,14194},
{14099,14131,14163,14195},
{14100,14132,14164,14196},
{14101,14133,14165,14197},
{14102,14134,14166,14198},
{14103,14135,14167,14199},
{14104,14136,14168,14200},
{14105,14137,14169,14201},
{14106,14138,14170,14202},
{14107,14139,14171,14203},
{14108,14140,14172,14204},
{14109,14141,14173,14205},
{14110,14142,14174,14206},
{14111,14143,14175,14207},
{14208,14240,14272,14304},
{14209,14241,14273,14305},
{14210,14242,14274,14306},
{14211,14243,14275,14307},
{14212,14244,14276,14308},
{14213,14245,14277,14309},
{14214,14246,14278,14310},
{14215,14247,14279,14311},
{14216,14248,14280,14312},
{14217,14249,14281,14313},
{14218,14250,14282,14314},
{14219,14251,14283,14315},
{14220,14252,14284,14316},
{14221,14253,14285,14317},
{14222,14254,14286,14318},
{14223,14255,14287,14319},
{14224,14256,14288,14320},
{14225,14257,14289,14321},
{14226,14258,14290,14322},
{14227,14259,14291,14323},
{14228,14260,14292,14324},
{14229,14261,14293,14325},
{14230,14262,14294,14326},
{14231,14263,14295,14327},
{14232,14264,14296,14328},
{14233,14265,14297,14329},
{14234,14266,14298,14330},
{14235,14267,14299,14331},
{14236,14268,14300,14332},
{14237,14269,14301,14333},
{14238,14270,14302,14334},
{14239,14271,14303,14335},
{14336,14368,14400,14432},
{14337,14369,14401,14433},
{14338,14370,14402,14434},
{14339,14371,14403,14435},
{14340,14372,14404,14436},
{14341,14373,14405,14437},
{14342,14374,14406,14438},
{14343,14375,14407,14439},
{14344,14376,14408,14440},
{14345,14377,14409,14441},
{14346,14378,14410,14442},
{14347,14379,14411,14443},
{14348,14380,14412,14444},
{14349,14381,14413,14445},
{14350,14382,14414,14446},
{14351,14383,14415,14447},
{14352,14384,14416,14448},
{14353,14385,14417,14449},
{14354,14386,14418,14450},
{14355,14387,14419,14451},
{14356,14388,14420,14452},
{14357,14389,14421,14453},
{14358,14390,14422,14454},
{14359,14391,14423,14455},
{14360,14392,14424,14456},
{14361,14393,14425,14457},
{14362,14394,14426,14458},
{14363,14395,14427,14459},
{14364,14396,14428,14460},
{14365,14397,14429,14461},
{14366,14398,14430,14462},
{14367,14399,14431,14463},
{14464,14496,14528,14560},
{14465,14497,14529,14561},
{14466,14498,14530,14562},
{14467,14499,14531,14563},
{14468,14500,14532,14564},
{14469,14501,14533,14565},
{14470,14502,14534,14566},
{14471,14503,14535,14567},
{14472,14504,14536,14568},
{14473,14505,14537,14569},
{14474,14506,14538,14570},
{14475,14507,14539,14571},
{14476,14508,14540,14572},
{14477,14509,14541,14573},
{14478,14510,14542,14574},
{14479,14511,14543,14575},
{14480,14512,14544,14576},
{14481,14513,14545,14577},
{14482,14514,14546,14578},
{14483,14515,14547,14579},
{14484,14516,14548,14580},
{14485,14517,14549,14581},
{14486,14518,14550,14582},
{14487,14519,14551,14583},
{14488,14520,14552,14584},
{14489,14521,14553,14585},
{14490,14522,14554,14586},
{14491,14523,14555,14587},
{14492,14524,14556,14588},
{14493,14525,14557,14589},
{14494,14526,14558,14590},
{14495,14527,14559,14591},
{14592,14624,14656,14688},
{14593,14625,14657,14689},
{14594,14626,14658,14690},
{14595,14627,14659,14691},
{14596,14628,14660,14692},
{14597,14629,14661,14693},
{14598,14630,14662,14694},
{14599,14631,14663,14695},
{14600,14632,14664,14696},
{14601,14633,14665,14697},
{14602,14634,14666,14698},
{14603,14635,14667,14699},
{14604,14636,14668,14700},
{14605,14637,14669,14701},
{14606,14638,14670,14702},
{14607,14639,14671,14703},
{14608,14640,14672,14704},
{14609,14641,14673,14705},
{14610,14642,14674,14706},
{14611,14643,14675,14707},
{14612,14644,14676,14708},
{14613,14645,14677,14709},
{14614,14646,14678,14710},
{14615,14647,14679,14711},
{14616,14648,14680,14712},
{14617,14649,14681,14713},
{14618,14650,14682,14714},
{14619,14651,14683,14715},
{14620,14652,14684,14716},
{14621,14653,14685,14717},
{14622,14654,14686,14718},
{14623,14655,14687,14719},
{14720,14752,14784,14816},
{14721,14753,14785,14817},
{14722,14754,14786,14818},
{14723,14755,14787,14819},
{14724,14756,14788,14820},
{14725,14757,14789,14821},
{14726,14758,14790,14822},
{14727,14759,14791,14823},
{14728,14760,14792,14824},
{14729,14761,14793,14825},
{14730,14762,14794,14826},
{14731,14763,14795,14827},
{14732,14764,14796,14828},
{14733,14765,14797,14829},
{14734,14766,14798,14830},
{14735,14767,14799,14831},
{14736,14768,14800,14832},
{14737,14769,14801,14833},
{14738,14770,14802,14834},
{14739,14771,14803,14835},
{14740,14772,14804,14836},
{14741,14773,14805,14837},
{14742,14774,14806,14838},
{14743,14775,14807,14839},
{14744,14776,14808,14840},
{14745,14777,14809,14841},
{14746,14778,14810,14842},
{14747,14779,14811,14843},
{14748,14780,14812,14844},
{14749,14781,14813,14845},
{14750,14782,14814,14846},
{14751,14783,14815,14847},
{14848,14880,14912,14944},
{14849,14881,14913,14945},
{14850,14882,14914,14946},
{14851,14883,14915,14947},
{14852,14884,14916,14948},
{14853,14885,14917,14949},
{14854,14886,14918,14950},
{14855,14887,14919,14951},
{14856,14888,14920,14952},
{14857,14889,14921,14953},
{14858,14890,14922,14954},
{14859,14891,14923,14955},
{14860,14892,14924,14956},
{14861,14893,14925,14957},
{14862,14894,14926,14958},
{14863,14895,14927,14959},
{14864,14896,14928,14960},
{14865,14897,14929,14961},
{14866,14898,14930,14962},
{14867,14899,14931,14963},
{14868,14900,14932,14964},
{14869,14901,14933,14965},
{14870,14902,14934,14966},
{14871,14903,14935,14967},
{14872,14904,14936,14968},
{14873,14905,14937,14969},
{14874,14906,14938,14970},
{14875,14907,14939,14971},
{14876,14908,14940,14972},
{14877,14909,14941,14973},
{14878,14910,14942,14974},
{14879,14911,14943,14975},
{14976,15008,15040,15072},
{14977,15009,15041,15073},
{14978,15010,15042,15074},
{14979,15011,15043,15075},
{14980,15012,15044,15076},
{14981,15013,15045,15077},
{14982,15014,15046,15078},
{14983,15015,15047,15079},
{14984,15016,15048,15080},
{14985,15017,15049,15081},
{14986,15018,15050,15082},
{14987,15019,15051,15083},
{14988,15020,15052,15084},
{14989,15021,15053,15085},
{14990,15022,15054,15086},
{14991,15023,15055,15087},
{14992,15024,15056,15088},
{14993,15025,15057,15089},
{14994,15026,15058,15090},
{14995,15027,15059,15091},
{14996,15028,15060,15092},
{14997,15029,15061,15093},
{14998,15030,15062,15094},
{14999,15031,15063,15095},
{15000,15032,15064,15096},
{15001,15033,15065,15097},
{15002,15034,15066,15098},
{15003,15035,15067,15099},
{15004,15036,15068,15100},
{15005,15037,15069,15101},
{15006,15038,15070,15102},
{15007,15039,15071,15103},
{15104,15136,15168,15200},
{15105,15137,15169,15201},
{15106,15138,15170,15202},
{15107,15139,15171,15203},
{15108,15140,15172,15204},
{15109,15141,15173,15205},
{15110,15142,15174,15206},
{15111,15143,15175,15207},
{15112,15144,15176,15208},
{15113,15145,15177,15209},
{15114,15146,15178,15210},
{15115,15147,15179,15211},
{15116,15148,15180,15212},
{15117,15149,15181,15213},
{15118,15150,15182,15214},
{15119,15151,15183,15215},
{15120,15152,15184,15216},
{15121,15153,15185,15217},
{15122,15154,15186,15218},
{15123,15155,15187,15219},
{15124,15156,15188,15220},
{15125,15157,15189,15221},
{15126,15158,15190,15222},
{15127,15159,15191,15223},
{15128,15160,15192,15224},
{15129,15161,15193,15225},
{15130,15162,15194,15226},
{15131,15163,15195,15227},
{15132,15164,15196,15228},
{15133,15165,15197,15229},
{15134,15166,15198,15230},
{15135,15167,15199,15231},
{15232,15264,15296,15328},
{15233,15265,15297,15329},
{15234,15266,15298,15330},
{15235,15267,15299,15331},
{15236,15268,15300,15332},
{15237,15269,15301,15333},
{15238,15270,15302,15334},
{15239,15271,15303,15335},
{15240,15272,15304,15336},
{15241,15273,15305,15337},
{15242,15274,15306,15338},
{15243,15275,15307,15339},
{15244,15276,15308,15340},
{15245,15277,15309,15341},
{15246,15278,15310,15342},
{15247,15279,15311,15343},
{15248,15280,15312,15344},
{15249,15281,15313,15345},
{15250,15282,15314,15346},
{15251,15283,15315,15347},
{15252,15284,15316,15348},
{15253,15285,15317,15349},
{15254,15286,15318,15350},
{15255,15287,15319,15351},
{15256,15288,15320,15352},
{15257,15289,15321,15353},
{15258,15290,15322,15354},
{15259,15291,15323,15355},
{15260,15292,15324,15356},
{15261,15293,15325,15357},
{15262,15294,15326,15358},
{15263,15295,15327,15359},
{15360,15392,15424,15456},
{15361,15393,15425,15457},
{15362,15394,15426,15458},
{15363,15395,15427,15459},
{15364,15396,15428,15460},
{15365,15397,15429,15461},
{15366,15398,15430,15462},
{15367,15399,15431,15463},
{15368,15400,15432,15464},
{15369,15401,15433,15465},
{15370,15402,15434,15466},
{15371,15403,15435,15467},
{15372,15404,15436,15468},
{15373,15405,15437,15469},
{15374,15406,15438,15470},
{15375,15407,15439,15471},
{15376,15408,15440,15472},
{15377,15409,15441,15473},
{15378,15410,15442,15474},
{15379,15411,15443,15475},
{15380,15412,15444,15476},
{15381,15413,15445,15477},
{15382,15414,15446,15478},
{15383,15415,15447,15479},
{15384,15416,15448,15480},
{15385,15417,15449,15481},
{15386,15418,15450,15482},
{15387,15419,15451,15483},
{15388,15420,15452,15484},
{15389,15421,15453,15485},
{15390,15422,15454,15486},
{15391,15423,15455,15487},
{15488,15520,15552,15584},
{15489,15521,15553,15585},
{15490,15522,15554,15586},
{15491,15523,15555,15587},
{15492,15524,15556,15588},
{15493,15525,15557,15589},
{15494,15526,15558,15590},
{15495,15527,15559,15591},
{15496,15528,15560,15592},
{15497,15529,15561,15593},
{15498,15530,15562,15594},
{15499,15531,15563,15595},
{15500,15532,15564,15596},
{15501,15533,15565,15597},
{15502,15534,15566,15598},
{15503,15535,15567,15599},
{15504,15536,15568,15600},
{15505,15537,15569,15601},
{15506,15538,15570,15602},
{15507,15539,15571,15603},
{15508,15540,15572,15604},
{15509,15541,15573,15605},
{15510,15542,15574,15606},
{15511,15543,15575,15607},
{15512,15544,15576,15608},
{15513,15545,15577,15609},
{15514,15546,15578,15610},
{15515,15547,15579,15611},
{15516,15548,15580,15612},
{15517,15549,15581,15613},
{15518,15550,15582,15614},
{15519,15551,15583,15615},
{15616,15648,15680,15712},
{15617,15649,15681,15713},
{15618,15650,15682,15714},
{15619,15651,15683,15715},
{15620,15652,15684,15716},
{15621,15653,15685,15717},
{15622,15654,15686,15718},
{15623,15655,15687,15719},
{15624,15656,15688,15720},
{15625,15657,15689,15721},
{15626,15658,15690,15722},
{15627,15659,15691,15723},
{15628,15660,15692,15724},
{15629,15661,15693,15725},
{15630,15662,15694,15726},
{15631,15663,15695,15727},
{15632,15664,15696,15728},
{15633,15665,15697,15729},
{15634,15666,15698,15730},
{15635,15667,15699,15731},
{15636,15668,15700,15732},
{15637,15669,15701,15733},
{15638,15670,15702,15734},
{15639,15671,15703,15735},
{15640,15672,15704,15736},
{15641,15673,15705,15737},
{15642,15674,15706,15738},
{15643,15675,15707,15739},
{15644,15676,15708,15740},
{15645,15677,15709,15741},
{15646,15678,15710,15742},
{15647,15679,15711,15743},
{15744,15776,15808,15840},
{15745,15777,15809,15841},
{15746,15778,15810,15842},
{15747,15779,15811,15843},
{15748,15780,15812,15844},
{15749,15781,15813,15845},
{15750,15782,15814,15846},
{15751,15783,15815,15847},
{15752,15784,15816,15848},
{15753,15785,15817,15849},
{15754,15786,15818,15850},
{15755,15787,15819,15851},
{15756,15788,15820,15852},
{15757,15789,15821,15853},
{15758,15790,15822,15854},
{15759,15791,15823,15855},
{15760,15792,15824,15856},
{15761,15793,15825,15857},
{15762,15794,15826,15858},
{15763,15795,15827,15859},
{15764,15796,15828,15860},
{15765,15797,15829,15861},
{15766,15798,15830,15862},
{15767,15799,15831,15863},
{15768,15800,15832,15864},
{15769,15801,15833,15865},
{15770,15802,15834,15866},
{15771,15803,15835,15867},
{15772,15804,15836,15868},
{15773,15805,15837,15869},
{15774,15806,15838,15870},
{15775,15807,15839,15871},
{15872,15904,15936,15968},
{15873,15905,15937,15969},
{15874,15906,15938,15970},
{15875,15907,15939,15971},
{15876,15908,15940,15972},
{15877,15909,15941,15973},
{15878,15910,15942,15974},
{15879,15911,15943,15975},
{15880,15912,15944,15976},
{15881,15913,15945,15977},
{15882,15914,15946,15978},
{15883,15915,15947,15979},
{15884,15916,15948,15980},
{15885,15917,15949,15981},
{15886,15918,15950,15982},
{15887,15919,15951,15983},
{15888,15920,15952,15984},
{15889,15921,15953,15985},
{15890,15922,15954,15986},
{15891,15923,15955,15987},
{15892,15924,15956,15988},
{15893,15925,15957,15989},
{15894,15926,15958,15990},
{15895,15927,15959,15991},
{15896,15928,15960,15992},
{15897,15929,15961,15993},
{15898,15930,15962,15994},
{15899,15931,15963,15995},
{15900,15932,15964,15996},
{15901,15933,15965,15997},
{15902,15934,15966,15998},
{15903,15935,15967,15999},
{16000,16032,16064,16096},
{16001,16033,16065,16097},
{16002,16034,16066,16098},
{16003,16035,16067,16099},
{16004,16036,16068,16100},
{16005,16037,16069,16101},
{16006,16038,16070,16102},
{16007,16039,16071,16103},
{16008,16040,16072,16104},
{16009,16041,16073,16105},
{16010,16042,16074,16106},
{16011,16043,16075,16107},
{16012,16044,16076,16108},
{16013,16045,16077,16109},
{16014,16046,16078,16110},
{16015,16047,16079,16111},
{16016,16048,16080,16112},
{16017,16049,16081,16113},
{16018,16050,16082,16114},
{16019,16051,16083,16115},
{16020,16052,16084,16116},
{16021,16053,16085,16117},
{16022,16054,16086,16118},
{16023,16055,16087,16119},
{16024,16056,16088,16120},
{16025,16057,16089,16121},
{16026,16058,16090,16122},
{16027,16059,16091,16123},
{16028,16060,16092,16124},
{16029,16061,16093,16125},
{16030,16062,16094,16126},
{16031,16063,16095,16127},
{16128,16160,16192,16224},
{16129,16161,16193,16225},
{16130,16162,16194,16226},
{16131,16163,16195,16227},
{16132,16164,16196,16228},
{16133,16165,16197,16229},
{16134,16166,16198,16230},
{16135,16167,16199,16231},
{16136,16168,16200,16232},
{16137,16169,16201,16233},
{16138,16170,16202,16234},
{16139,16171,16203,16235},
{16140,16172,16204,16236},
{16141,16173,16205,16237},
{16142,16174,16206,16238},
{16143,16175,16207,16239},
{16144,16176,16208,16240},
{16145,16177,16209,16241},
{16146,16178,16210,16242},
{16147,16179,16211,16243},
{16148,16180,16212,16244},
{16149,16181,16213,16245},
{16150,16182,16214,16246},
{16151,16183,16215,16247},
{16152,16184,16216,16248},
{16153,16185,16217,16249},
{16154,16186,16218,16250},
{16155,16187,16219,16251},
{16156,16188,16220,16252},
{16157,16189,16221,16253},
{16158,16190,16222,16254},
{16159,16191,16223,16255},
{16256,16288,16320,16352},
{16257,16289,16321,16353},
{16258,16290,16322,16354},
{16259,16291,16323,16355},
{16260,16292,16324,16356},
{16261,16293,16325,16357},
{16262,16294,16326,16358},
{16263,16295,16327,16359},
{16264,16296,16328,16360},
{16265,16297,16329,16361},
{16266,16298,16330,16362},
{16267,16299,16331,16363},
{16268,16300,16332,16364},
{16269,16301,16333,16365},
{16270,16302,16334,16366},
{16271,16303,16335,16367},
{16272,16304,16336,16368},
{16273,16305,16337,16369},
{16274,16306,16338,16370},
{16275,16307,16339,16371},
{16276,16308,16340,16372},
{16277,16309,16341,16373},
{16278,16310,16342,16374},
{16279,16311,16343,16375},
{16280,16312,16344,16376},
{16281,16313,16345,16377},
{16282,16314,16346,16378},
{16283,16315,16347,16379},
{16284,16316,16348,16380},
{16285,16317,16349,16381},
{16286,16318,16350,16382},
{16287,16319,16351,16383}};

#define MAX(a, b) (((a) > (b)) ? (a) : (b))

bool g_interactive_debugger_enabled = false;

tr1_hash_map<new_addr_type, unsigned> address_random_interleaving;

/* Clock Domains */

#define CORE 0x01
#define L2 0x02
#define DRAM 0x04
#define ICNT 0x08

#define MEM_LATENCY_STAT_IMPL

#include "mem_latency_stat.h"

void power_config::reg_options(class OptionParser *opp) {
  option_parser_register(opp, "-gpuwattch_xml_file", OPT_CSTR,
                         &g_power_config_name, "GPUWattch XML file",
                         "gpuwattch.xml");

  option_parser_register(opp, "-power_simulation_enabled", OPT_BOOL,
                         &g_power_simulation_enabled,
                         "Turn on power simulator (1=On, 0=Off)", "0");

  option_parser_register(opp, "-power_per_cycle_dump", OPT_BOOL,
                         &g_power_per_cycle_dump,
                         "Dump detailed power output each cycle", "0");

  // Output Data Formats
  option_parser_register(
      opp, "-power_trace_enabled", OPT_BOOL, &g_power_trace_enabled,
      "produce a file for the power trace (1=On, 0=Off)", "0");

  option_parser_register(
      opp, "-power_trace_zlevel", OPT_INT32, &g_power_trace_zlevel,
      "Compression level of the power trace output log (0=no comp, 9=highest)",
      "6");

  option_parser_register(
      opp, "-steady_power_levels_enabled", OPT_BOOL,
      &g_steady_power_levels_enabled,
      "produce a file for the steady power levels (1=On, 0=Off)", "0");

  option_parser_register(opp, "-steady_state_definition", OPT_CSTR,
                         &gpu_steady_state_definition,
                         "allowed deviation:number of samples", "8:4");
}

void memory_config::reg_options(class OptionParser *opp) {
  option_parser_register(opp, "-gpgpu_perf_sim_memcpy", OPT_BOOL,
                         &m_perf_sim_memcpy, "Fill the L2 cache on memcpy",
                         "1");
  option_parser_register(opp, "-gpgpu_simple_dram_model", OPT_BOOL,
                         &simple_dram_model,
                         "simple_dram_model with fixed latency and BW", "0");
  option_parser_register(opp, "-gpgpu_dram_scheduler", OPT_INT32,
                         &scheduler_type, "0 = fifo, 1 = FR-FCFS (defaul)",
                         "1");
  option_parser_register(opp, "-gpgpu_dram_partition_queues", OPT_CSTR,
                         &gpgpu_L2_queue_config, "i2$:$2d:d2$:$2i", "8:8:8:8");

  option_parser_register(opp, "-l2_ideal", OPT_BOOL, &l2_ideal,
                         "Use a ideal L2 cache that always hit", "0");
  option_parser_register(opp, "-gpgpu_cache:dl2", OPT_CSTR,
                         &m_L2_config.m_config_string,
                         "unified banked L2 data cache config "
                         " {<nsets>:<bsize>:<assoc>,<rep>:<wr>:<alloc>:<wr_"
                         "alloc>,<mshr>:<N>:<merge>,<mq>}",
                         "64:128:8,L:B:m:N,A:16:4,4");
  option_parser_register(opp, "-gpgpu_cache:dl2_texture_only", OPT_BOOL,
                         &m_L2_texure_only, "L2 cache used for texture only",
                         "1");
  option_parser_register(
      opp, "-gpgpu_n_mem", OPT_UINT32, &m_n_mem,
      "number of memory modules (e.g. memory controllers) in gpu", "8");
  option_parser_register(opp, "-gpgpu_n_sub_partition_per_mchannel", OPT_UINT32,
                         &m_n_sub_partition_per_memory_channel,
                         "number of memory subpartition in each memory module",
                         "1");
  option_parser_register(opp, "-gpgpu_n_mem_per_ctrlr", OPT_UINT32,
                         &gpu_n_mem_per_ctrlr,
                         "number of memory chips per memory controller", "1");
  option_parser_register(opp, "-gpgpu_memlatency_stat", OPT_INT32,
                         &gpgpu_memlatency_stat,
                         "track and display latency statistics 0x2 enables MC, "
                         "0x4 enables queue logs",
                         "0");
  option_parser_register(opp, "-gpgpu_frfcfs_dram_sched_queue_size", OPT_INT32,
                         &gpgpu_frfcfs_dram_sched_queue_size,
                         "0 = unlimited (default); # entries per chip", "0");
  option_parser_register(opp, "-gpgpu_dram_return_queue_size", OPT_INT32,
                         &gpgpu_dram_return_queue_size,
                         "0 = unlimited (default); # entries per chip", "0");
  option_parser_register(opp, "-gpgpu_dram_buswidth", OPT_UINT32, &busW,
                         "default = 4 bytes (8 bytes per cycle at DDR)", "4");
  option_parser_register(
      opp, "-gpgpu_dram_burst_length", OPT_UINT32, &BL,
      "Burst length of each DRAM request (default = 4 data bus cycle)", "4");
  option_parser_register(opp, "-dram_data_command_freq_ratio", OPT_UINT32,
                         &data_command_freq_ratio,
                         "Frequency ratio between DRAM data bus and command "
                         "bus (default = 2 times, i.e. DDR)",
                         "2");
  option_parser_register(
      opp, "-gpgpu_dram_timing_opt", OPT_CSTR, &gpgpu_dram_timing_opt,
      "DRAM timing parameters = "
      "{nbk:tCCD:tRRD:tRCD:tRAS:tRP:tRC:CL:WL:tCDLR:tWR:nbkgrp:tCCDL:tRTPL}",
      "4:2:8:12:21:13:34:9:4:5:13:1:0:0");
  option_parser_register(opp, "-gpgpu_l2_rop_latency", OPT_UINT32, &rop_latency,
                         "ROP queue latency (default 85)", "85");
  option_parser_register(opp, "-dram_latency", OPT_UINT32, &dram_latency,
                         "DRAM latency (default 30)", "30");
  option_parser_register(opp, "-dram_dual_bus_interface", OPT_UINT32,
                         &dual_bus_interface,
                         "dual_bus_interface (default = 0) ", "0");
  option_parser_register(opp, "-dram_bnk_indexing_policy", OPT_UINT32,
                         &dram_bnk_indexing_policy,
                         "dram_bnk_indexing_policy (0 = normal indexing, 1 = "
                         "Xoring with the higher bits) (Default = 0)",
                         "0");
  option_parser_register(opp, "-dram_bnkgrp_indexing_policy", OPT_UINT32,
                         &dram_bnkgrp_indexing_policy,
                         "dram_bnkgrp_indexing_policy (0 = take higher bits, 1 "
                         "= take lower bits) (Default = 0)",
                         "0");
  option_parser_register(opp, "-dram_seperate_write_queue_enable", OPT_BOOL,
                         &seperate_write_queue_enabled,
                         "Seperate_Write_Queue_Enable", "0");
  option_parser_register(opp, "-dram_write_queue_size", OPT_CSTR,
                         &write_queue_size_opt, "Write_Queue_Size", "32:28:16");
  option_parser_register(
      opp, "-dram_elimnate_rw_turnaround", OPT_BOOL, &elimnate_rw_turnaround,
      "elimnate_rw_turnaround i.e set tWTR and tRTW = 0", "0");
  option_parser_register(opp, "-icnt_flit_size", OPT_UINT32, &icnt_flit_size,
                         "icnt_flit_size", "32");
  m_address_mapping.addrdec_setoption(opp);
}

void shader_core_config::reg_options(class OptionParser *opp) {
  option_parser_register(opp, "-gpgpu_simd_model", OPT_INT32, &model,
                         "1 = post-dominator", "1");
  option_parser_register(opp, "-gpgpu_simd_rec_time_out", OPT_INT32, &rec_time_out,
                         "-1 = no reconvergence time out", "-1");
  option_parser_register(opp, "-gpgpu_simd_rec_size", OPT_INT32, &num_rec_entries,
                         "number of physical entries in the reconvergence table", "32");
  option_parser_register(opp, "-gpgpu_simd_st_size", OPT_INT32, &num_st_entries,
                         "number of physical entries in the splits table", "33");
  option_parser_register(opp, "-gpgpu_simd_rec_replacement", OPT_INT32, &rec_replacement,
                         "reconvergence table replacement policy", "0");
  option_parser_register(opp, "-gpgpu_simd_st_replacement", OPT_INT32, &st_replacement,
                         "splits table replacement policy", "0");
  option_parser_register(
      opp, "-gpgpu_shader_core_pipeline", OPT_CSTR,
      &gpgpu_shader_core_pipeline_opt,
      "shader core pipeline config, i.e., {<nthread>:<warpsize>}", "1024:32");
  option_parser_register(opp, "-gpgpu_tex_cache:l1", OPT_CSTR,
                         &m_L1T_config.m_config_string,
                         "per-shader L1 texture cache  (READ-ONLY) config "
                         " {<nsets>:<bsize>:<assoc>,<rep>:<wr>:<alloc>:<wr_"
                         "alloc>,<mshr>:<N>:<merge>,<mq>:<rf>}",
                         "8:128:5,L:R:m:N,F:128:4,128:2");
  option_parser_register(
      opp, "-gpgpu_const_cache:l1", OPT_CSTR, &m_L1C_config.m_config_string,
      "per-shader L1 constant memory cache  (READ-ONLY) config "
      " {<nsets>:<bsize>:<assoc>,<rep>:<wr>:<alloc>:<wr_alloc>,<mshr>:<N>:<"
      "merge>,<mq>} ",
      "64:64:2,L:R:f:N,A:2:32,4");
  option_parser_register(
      opp, "-gpgpu_rt_cache:l1", OPT_CSTR, &m_L0C_config.m_config_string,
      "per-shader L1 constant memory cache  (READ-ONLY) config "
      " {<nsets>:<bsize>:<assoc>,<rep>:<wr>:<alloc>:<wr_alloc>,<mshr>:<N>:<"
      "merge>,<mq>} ",
      "64:64:2,L:R:f:N,A:2:32,4");
  option_parser_register(
      opp, "-gpgpu_rt_use_l1", OPT_BOOL, &m_rt_use_l1d,
      "use existing L1 cache instead of dedicated L0 cache ",
      "1");
  option_parser_register(
      opp, "-gpgpu_rt_perfect_mem", OPT_BOOL, &m_rt_perfect_mem,
      "assume 0 latency BVH accesses ",
      "0");
  option_parser_register(
      opp, "-gpgpu_rt_coherence_engine", OPT_BOOL, &m_rt_coherence_engine,
      "enable coherency engine (ray sorting) ",
      "0");
  option_parser_register(
      opp, "-gpgpu_rt_coherence_engine_config", OPT_CSTR, &m_rt_coherence_engine_config_str,
      "max cycles, hash ",
      "100, d");
  option_parser_register(
      opp, "-gpgpu_rt_disable_rt_cache", OPT_BOOL, &bypassL0Complet,
      "bypass RT cache and connect RT unit directly to interconnect ",
      "0");
  option_parser_register(
      opp, "-gpgpu_rt_max_warps", OPT_UINT32, &m_rt_max_warps,
      "max number of warps concurrently in one rt core ",
      "0");
  option_parser_register(
      opp, "-gpgpu_rt_max_mshr", OPT_UINT32, &m_rt_max_mshr_entries,
      "max number of MSHR entries in RT unit ",
      "32");
  option_parser_register(
      opp, "-gpgpu_rt_coalesce_warps", OPT_BOOL, &m_rt_coalesce_warps,
      "try to coalesce memory requests between warps ",
      "0");
  option_parser_register(
      opp, "-gpgpu_rt_intersection_latency", OPT_CSTR, &m_rt_intersection_latency_str,
      "latency of pipelined intersection tests (7 types)",
      "0,0,0,0,0,0,0");
  option_parser_register(
      opp, "-gpgpu_rt_intersection_table_type", OPT_UINT32, &m_rt_intersection_table_type,
      "type of intersection table",
      "0");
  option_parser_register(opp, "-gpgpu_cache:il1", OPT_CSTR,
                         &m_L1I_config.m_config_string,
                         "shader L1 instruction cache config "
                         " {<nsets>:<bsize>:<assoc>,<rep>:<wr>:<alloc>:<wr_"
                         "alloc>,<mshr>:<N>:<merge>,<mq>} ",
                         "4:256:4,L:R:f:N,A:2:32,4");
  option_parser_register(opp, "-gpgpu_cache:dl1", OPT_CSTR,
                         &m_L1D_config.m_config_string,
                         "per-shader L1 data cache config "
                         " {<nsets>:<bsize>:<assoc>,<rep>:<wr>:<alloc>:<wr_"
                         "alloc>,<mshr>:<N>:<merge>,<mq> | none}",
                         "none");
  option_parser_register(opp, "-gpgpu_l1_banks", OPT_UINT32,
                         &m_L1D_config.l1_banks, "The number of L1 cache banks",
                         "1");
  option_parser_register(opp, "-gpgpu_l1_banks_byte_interleaving", OPT_UINT32,
                         &m_L1D_config.l1_banks_byte_interleaving,
                         "l1 banks byte interleaving granularity", "32");
  option_parser_register(opp, "-gpgpu_l1_banks_hashing_function", OPT_UINT32,
                         &m_L1D_config.l1_banks_hashing_function,
                         "l1 banks hashing function", "0");
  option_parser_register(opp, "-gpgpu_l1_latency", OPT_UINT32,
                         &m_L1D_config.l1_latency, "L1 Hit Latency", "1");
  option_parser_register(opp, "-gpgpu_smem_latency", OPT_UINT32, &smem_latency,
                         "smem Latency", "3");
  option_parser_register(opp, "-gpgpu_cache:dl1PrefL1", OPT_CSTR,
                         &m_L1D_config.m_config_stringPrefL1,
                         "per-shader L1 data cache config "
                         " {<nsets>:<bsize>:<assoc>,<rep>:<wr>:<alloc>:<wr_"
                         "alloc>,<mshr>:<N>:<merge>,<mq> | none}",
                         "none");
  option_parser_register(opp, "-gpgpu_cache:dl1PrefShared", OPT_CSTR,
                         &m_L1D_config.m_config_stringPrefShared,
                         "per-shader L1 data cache config "
                         " {<nsets>:<bsize>:<assoc>,<rep>:<wr>:<alloc>:<wr_"
                         "alloc>,<mshr>:<N>:<merge>,<mq> | none}",
                         "none");
  option_parser_register(opp, "-gpgpu_gmem_skip_L1D", OPT_BOOL, &gmem_skip_L1D,
                         "global memory access skip L1D cache (implements "
                         "-Xptxas -dlcm=cg, default=no skip)",
                         "0");

  option_parser_register(opp, "-gpgpu_perfect_mem", OPT_BOOL,
                         &gpgpu_perfect_mem,
                         "enable perfect memory mode (no cache miss)", "0");
  option_parser_register(
      opp, "-n_regfile_gating_group", OPT_UINT32, &n_regfile_gating_group,
      "group of lanes that should be read/written together)", "4");
  option_parser_register(
      opp, "-gpgpu_clock_gated_reg_file", OPT_BOOL, &gpgpu_clock_gated_reg_file,
      "enable clock gated reg file for power calculations", "0");
  option_parser_register(
      opp, "-gpgpu_clock_gated_lanes", OPT_BOOL, &gpgpu_clock_gated_lanes,
      "enable clock gated lanes for power calculations", "0");
  option_parser_register(opp, "-gpgpu_shader_registers", OPT_UINT32,
                         &gpgpu_shader_registers,
                         "Number of registers per shader core. Limits number "
                         "of concurrent CTAs. (default 8192)",
                         "8192");
  option_parser_register(
      opp, "-gpgpu_registers_per_block", OPT_UINT32, &gpgpu_registers_per_block,
      "Maximum number of registers per CTA. (default 8192)", "8192");
  option_parser_register(opp, "-gpgpu_ignore_resources_limitation", OPT_BOOL,
                         &gpgpu_ignore_resources_limitation,
                         "gpgpu_ignore_resources_limitation (default 0)", "0");
  option_parser_register(
      opp, "-gpgpu_shader_cta", OPT_UINT32, &max_cta_per_core,
      "Maximum number of concurrent CTAs in shader (default 8)", "8");
  option_parser_register(
      opp, "-gpgpu_num_cta_barriers", OPT_UINT32, &max_barriers_per_cta,
      "Maximum number of named barriers per CTA (default 16)", "16");
  option_parser_register(opp, "-gpgpu_n_clusters", OPT_UINT32, &n_simt_clusters,
                         "number of processing clusters", "10");
  option_parser_register(opp, "-gpgpu_n_cores_per_cluster", OPT_UINT32,
                         &n_simt_cores_per_cluster,
                         "number of simd cores per cluster", "3");
  option_parser_register(opp, "-gpgpu_n_cluster_ejection_buffer_size",
                         OPT_UINT32, &n_simt_ejection_buffer_size,
                         "number of packets in ejection buffer", "8");
  option_parser_register(
      opp, "-gpgpu_n_ldst_response_buffer_size", OPT_UINT32,
      &ldst_unit_response_queue_size,
      "number of response packets in ld/st unit ejection buffer", "2");
  option_parser_register(
      opp, "-gpgpu_shmem_per_block", OPT_UINT32, &gpgpu_shmem_per_block,
      "Size of shared memory per thread block or CTA (default 48kB)", "49152");
  option_parser_register(
      opp, "-gpgpu_shmem_size", OPT_UINT32, &gpgpu_shmem_size,
      "Size of shared memory per shader core (default 16kB)", "16384");
  option_parser_register(opp, "-gpgpu_adaptive_cache_config", OPT_UINT32,
                         &adaptive_cache_config, "adaptive_cache_config", "0");
  option_parser_register(
      opp, "-gpgpu_shmem_sizeDefault", OPT_UINT32, &gpgpu_shmem_sizeDefault,
      "Size of shared memory per shader core (default 16kB)", "16384");
  option_parser_register(
      opp, "-gpgpu_shmem_size_PrefL1", OPT_UINT32, &gpgpu_shmem_sizePrefL1,
      "Size of shared memory per shader core (default 16kB)", "16384");
  option_parser_register(opp, "-gpgpu_shmem_size_PrefShared", OPT_UINT32,
                         &gpgpu_shmem_sizePrefShared,
                         "Size of shared memory per shader core (default 16kB)",
                         "16384");
  option_parser_register(
      opp, "-gpgpu_shmem_num_banks", OPT_UINT32, &num_shmem_bank,
      "Number of banks in the shared memory in each shader core (default 16)",
      "16");
  option_parser_register(
      opp, "-gpgpu_shmem_limited_broadcast", OPT_BOOL, &shmem_limited_broadcast,
      "Limit shared memory to do one broadcast per cycle (default on)", "1");
  option_parser_register(opp, "-gpgpu_shmem_warp_parts", OPT_INT32,
                         &mem_warp_parts,
                         "Number of portions a warp is divided into for shared "
                         "memory bank conflict check ",
                         "2");
  option_parser_register(
      opp, "-gpgpu_mem_unit_ports", OPT_INT32, &mem_unit_ports,
      "The number of memory transactions allowed per core cycle", "1");
  option_parser_register(opp, "-gpgpu_shmem_warp_parts", OPT_INT32,
                         &mem_warp_parts,
                         "Number of portions a warp is divided into for shared "
                         "memory bank conflict check ",
                         "2");
  option_parser_register(
      opp, "-gpgpu_warpdistro_shader", OPT_INT32, &gpgpu_warpdistro_shader,
      "Specify which shader core to collect the warp size distribution from",
      "-1");
  option_parser_register(
      opp, "-gpgpu_warp_issue_shader", OPT_INT32, &gpgpu_warp_issue_shader,
      "Specify which shader core to collect the warp issue distribution from",
      "0");
  option_parser_register(opp, "-gpgpu_local_mem_map", OPT_BOOL,
                         &gpgpu_local_mem_map,
                         "Mapping from local memory space address to simulated "
                         "GPU physical address space (default = enabled)",
                         "1");
  option_parser_register(opp, "-gpgpu_num_reg_banks", OPT_INT32,
                         &gpgpu_num_reg_banks,
                         "Number of register banks (default = 8)", "8");
  option_parser_register(
      opp, "-gpgpu_reg_bank_use_warp_id", OPT_BOOL, &gpgpu_reg_bank_use_warp_id,
      "Use warp ID in mapping registers to banks (default = off)", "0");
  option_parser_register(opp, "-gpgpu_sub_core_model", OPT_BOOL,
                         &sub_core_model,
                         "Sub Core Volta/Pascal model (default = off)", "0");
  option_parser_register(opp, "-gpgpu_enable_specialized_operand_collector",
                         OPT_BOOL, &enable_specialized_operand_collector,
                         "enable_specialized_operand_collector", "1");
  option_parser_register(opp, "-gpgpu_operand_collector_num_units_sp",
                         OPT_INT32, &gpgpu_operand_collector_num_units_sp,
                         "number of collector units (default = 4)", "4");
  option_parser_register(opp, "-gpgpu_operand_collector_num_units_dp",
                         OPT_INT32, &gpgpu_operand_collector_num_units_dp,
                         "number of collector units (default = 0)", "0");
  option_parser_register(opp, "-gpgpu_operand_collector_num_units_sfu",
                         OPT_INT32, &gpgpu_operand_collector_num_units_sfu,
                         "number of collector units (default = 4)", "4");
  option_parser_register(opp, "-gpgpu_operand_collector_num_units_int",
                         OPT_INT32, &gpgpu_operand_collector_num_units_int,
                         "number of collector units (default = 0)", "0");
  option_parser_register(opp, "-gpgpu_operand_collector_num_units_tensor_core",
                         OPT_INT32,
                         &gpgpu_operand_collector_num_units_tensor_core,
                         "number of collector units (default = 4)", "4");
  option_parser_register(opp, "-gpgpu_operand_collector_num_units_mem",
                         OPT_INT32, &gpgpu_operand_collector_num_units_mem,
                         "number of collector units (default = 2)", "2");
  option_parser_register(opp, "-gpgpu_operand_collector_num_units_gen",
                         OPT_INT32, &gpgpu_operand_collector_num_units_gen,
                         "number of collector units (default = 0)", "0");
  option_parser_register(opp, "-gpgpu_operand_collector_num_in_ports_sp",
                         OPT_INT32, &gpgpu_operand_collector_num_in_ports_sp,
                         "number of collector unit in ports (default = 1)",
                         "1");
  option_parser_register(opp, "-gpgpu_operand_collector_num_in_ports_dp",
                         OPT_INT32, &gpgpu_operand_collector_num_in_ports_dp,
                         "number of collector unit in ports (default = 0)",
                         "0");
  option_parser_register(opp, "-gpgpu_operand_collector_num_in_ports_sfu",
                         OPT_INT32, &gpgpu_operand_collector_num_in_ports_sfu,
                         "number of collector unit in ports (default = 1)",
                         "1");
  option_parser_register(opp, "-gpgpu_operand_collector_num_in_ports_int",
                         OPT_INT32, &gpgpu_operand_collector_num_in_ports_int,
                         "number of collector unit in ports (default = 0)",
                         "0");
  option_parser_register(
      opp, "-gpgpu_operand_collector_num_in_ports_tensor_core", OPT_INT32,
      &gpgpu_operand_collector_num_in_ports_tensor_core,
      "number of collector unit in ports (default = 1)", "1");
  option_parser_register(opp, "-gpgpu_operand_collector_num_in_ports_mem",
                         OPT_INT32, &gpgpu_operand_collector_num_in_ports_mem,
                         "number of collector unit in ports (default = 1)",
                         "1");
  option_parser_register(opp, "-gpgpu_operand_collector_num_in_ports_gen",
                         OPT_INT32, &gpgpu_operand_collector_num_in_ports_gen,
                         "number of collector unit in ports (default = 0)",
                         "0");
  option_parser_register(opp, "-gpgpu_operand_collector_num_out_ports_sp",
                         OPT_INT32, &gpgpu_operand_collector_num_out_ports_sp,
                         "number of collector unit in ports (default = 1)",
                         "1");
  option_parser_register(opp, "-gpgpu_operand_collector_num_out_ports_dp",
                         OPT_INT32, &gpgpu_operand_collector_num_out_ports_dp,
                         "number of collector unit in ports (default = 0)",
                         "0");
  option_parser_register(opp, "-gpgpu_operand_collector_num_out_ports_sfu",
                         OPT_INT32, &gpgpu_operand_collector_num_out_ports_sfu,
                         "number of collector unit in ports (default = 1)",
                         "1");
  option_parser_register(opp, "-gpgpu_operand_collector_num_out_ports_int",
                         OPT_INT32, &gpgpu_operand_collector_num_out_ports_int,
                         "number of collector unit in ports (default = 0)",
                         "0");
  option_parser_register(
      opp, "-gpgpu_operand_collector_num_out_ports_tensor_core", OPT_INT32,
      &gpgpu_operand_collector_num_out_ports_tensor_core,
      "number of collector unit in ports (default = 1)", "1");
  option_parser_register(opp, "-gpgpu_operand_collector_num_out_ports_mem",
                         OPT_INT32, &gpgpu_operand_collector_num_out_ports_mem,
                         "number of collector unit in ports (default = 1)",
                         "1");
  option_parser_register(opp, "-gpgpu_operand_collector_num_out_ports_gen",
                         OPT_INT32, &gpgpu_operand_collector_num_out_ports_gen,
                         "number of collector unit in ports (default = 0)",
                         "0");
  option_parser_register(opp, "-gpgpu_coalesce_arch", OPT_INT32,
                         &gpgpu_coalesce_arch,
                         "Coalescing arch (GT200 = 13, Fermi = 20)", "13");
  option_parser_register(opp, "-gpgpu_num_sched_per_core", OPT_INT32,
                         &gpgpu_num_sched_per_core,
                         "Number of warp schedulers per core", "1");
  option_parser_register(opp, "-gpgpu_max_insn_issue_per_warp", OPT_INT32,
                         &gpgpu_max_insn_issue_per_warp,
                         "Max number of instructions that can be issued per "
                         "warp in one cycle by scheduler (either 1 or 2)",
                         "2");
  option_parser_register(opp, "-gpgpu_dual_issue_diff_exec_units", OPT_BOOL,
                         &gpgpu_dual_issue_diff_exec_units,
                         "should dual issue use two different execution unit "
                         "resources (Default = 1)",
                         "1");
  option_parser_register(opp, "-gpgpu_simt_core_sim_order", OPT_INT32,
                         &simt_core_sim_order,
                         "Select the simulation order of cores in a cluster "
                         "(0=Fix, 1=Round-Robin)",
                         "1");
  option_parser_register(
      opp, "-gpgpu_pipeline_widths", OPT_CSTR, &pipeline_widths_string,
      "Pipeline widths "
      "ID_OC_SP,ID_OC_DP,ID_OC_INT,ID_OC_SFU,ID_OC_MEM,OC_EX_SP,OC_EX_DP,OC_EX_"
      "INT,OC_EX_SFU,OC_EX_MEM,EX_WB,ID_OC_TENSOR_CORE,OC_EX_TENSOR_CORE,ID_OC_RT,OC_EX_RT",
      "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1");
  option_parser_register(opp, "-gpgpu_tensor_core_avail", OPT_INT32,
                         &gpgpu_tensor_core_avail,
                         "Tensor Core Available (default=0)", "0");
  option_parser_register(opp, "-gpgpu_num_sp_units", OPT_INT32,
                         &gpgpu_num_sp_units, "Number of SP units (default=1)",
                         "1");
  option_parser_register(opp, "-gpgpu_num_dp_units", OPT_INT32,
                         &gpgpu_num_dp_units, "Number of DP units (default=0)",
                         "0");
  option_parser_register(opp, "-gpgpu_num_int_units", OPT_INT32,
                         &gpgpu_num_int_units,
                         "Number of INT units (default=0)", "0");
  option_parser_register(opp, "-gpgpu_num_sfu_units", OPT_INT32,
                         &gpgpu_num_sfu_units, "Number of SF units (default=1)",
                         "1");
  option_parser_register(opp, "-gpgpu_num_tensor_core_units", OPT_INT32,
                         &gpgpu_num_tensor_core_units,
                         "Number of tensor_core units (default=1)", "0");
  option_parser_register(opp, "-gpgpu_num_rt_core_units", OPT_INT32,
                         &gpgpu_num_rt_core_units,
                         "Number of rt core units (default=1)", "1");
  option_parser_register(
      opp, "-gpgpu_num_mem_units", OPT_INT32, &gpgpu_num_mem_units,
      "Number if ldst units (default=1) WARNING: not hooked up to anything",
      "1");
  option_parser_register(
      opp, "-gpgpu_scheduler", OPT_CSTR, &gpgpu_scheduler_string,
      "Scheduler configuration: < lrr | gto | two_level_active > "
      "If "
      "two_level_active:<num_active_warps>:<inner_prioritization>:<outer_"
      "prioritization>"
      "For complete list of prioritization values see shader.h enum "
      "scheduler_prioritization_type"
      "Default: gto",
      "gto");

  option_parser_register(
      opp, "-gpgpu_concurrent_kernel_sm", OPT_BOOL, &gpgpu_concurrent_kernel_sm,
      "Support concurrent kernels on a SM (default = disabled)", "0");
  option_parser_register(opp, "-gpgpu_perfect_inst_const_cache", OPT_BOOL,
                         &perfect_inst_const_cache,
                         "perfect inst and const cache mode, so all inst and "
                         "const hits in the cache(default = disabled)",
                         "0");
  option_parser_register(
      opp, "-gpgpu_inst_fetch_throughput", OPT_INT32, &inst_fetch_throughput,
      "the number of fetched intruction per warp each cycle", "1");
  option_parser_register(opp, "-gpgpu_reg_file_port_throughput", OPT_INT32,
                         &reg_file_port_throughput,
                         "the number ports of the register file", "1");

  for (unsigned j = 0; j < SPECIALIZED_UNIT_NUM; ++j) {
    std::stringstream ss;
    ss << "-specialized_unit_" << j + 1;
    option_parser_register(opp, ss.str().c_str(), OPT_CSTR,
                           &specialized_unit_string[j],
                           "specialized unit config"
                           " {<enabled>,<num_units>:<latency>:<initiation>,<ID_"
                           "OC_SPEC>:<OC_EX_SPEC>,<NAME>}",
                           "0,4,4,4,4,BRA");
  }
}

void gpgpu_sim_config::reg_options(option_parser_t opp) {
  gpgpu_functional_sim_config::reg_options(opp);
  m_shader_config.reg_options(opp);
  m_memory_config.reg_options(opp);
  power_config::reg_options(opp);
  option_parser_register(opp, "-BFS_based_traversal", OPT_BOOL, &BFS_based_traversal,
                         "selects which traceRay traversal function to use, 0 = default DFS, 1 = BFS based", "0");
  option_parser_register(opp, "-stack_trend_prefetch", OPT_BOOL, &stack_trend_prefetch,
                         "predict and prefetch next accesses from traversal stack/queue", "0");
  option_parser_register(opp, "-gpgpu_intermittent_stats", OPT_BOOL, &gpu_intermittent_stats,
                         "print intermittent stats", "0");
  option_parser_register(opp, "-gpgpu_intermittent_stats_freq", OPT_INT64, &gpu_intermittent_stats_freq,
                         "intermittent stats frequency", "10000");
  option_parser_register(opp, "-gpgpu_max_cycle", OPT_INT64, &gpu_max_cycle_opt,
                         "terminates gpu simulation early (0 = no limit)", "0");
  option_parser_register(opp, "-gpgpu_max_insn", OPT_INT64, &gpu_max_insn_opt,
                         "terminates gpu simulation early (0 = no limit)", "0");
  option_parser_register(opp, "-gpgpu_max_cta", OPT_INT32, &gpu_max_cta_opt,
                         "terminates gpu simulation early (0 = no limit)", "0");
  option_parser_register(opp, "-gpgpu_max_completed_cta", OPT_INT32,
                         &gpu_max_completed_cta_opt,
                         "terminates gpu simulation early (0 = no limit)", "0");
  option_parser_register(
      opp, "-gpgpu_runtime_stat", OPT_CSTR, &gpgpu_runtime_stat,
      "display runtime statistics such as dram utilization {<freq>:<flag>}",
      "10000:0");
  option_parser_register(opp, "-liveness_message_freq", OPT_INT64,
                         &liveness_message_freq,
                         "Minimum number of seconds between simulation "
                         "liveness messages (0 = always print)",
                         "1");
  option_parser_register(opp, "-gpgpu_compute_capability_major", OPT_UINT32,
                         &gpgpu_compute_capability_major,
                         "Major compute capability version number", "7");
  option_parser_register(opp, "-gpgpu_compute_capability_minor", OPT_UINT32,
                         &gpgpu_compute_capability_minor,
                         "Minor compute capability version number", "0");
  option_parser_register(opp, "-gpgpu_flush_l1_cache", OPT_BOOL,
                         &gpgpu_flush_l1_cache,
                         "Flush L1 cache at the end of each kernel call", "0");
  option_parser_register(opp, "-gpgpu_flush_l2_cache", OPT_BOOL,
                         &gpgpu_flush_l2_cache,
                         "Flush L2 cache at the end of each kernel call", "0");
  option_parser_register(
      opp, "-gpgpu_deadlock_detect", OPT_BOOL, &gpu_deadlock_detect,
      "Stop the simulation at deadlock (1=on (default), 0=off)", "1");
  option_parser_register(
      opp, "-gpgpu_ptx_instruction_classification", OPT_INT32,
      &(gpgpu_ctx->func_sim->gpgpu_ptx_instruction_classification),
      "if enabled will classify ptx instruction types per kernel (Max 255 "
      "kernels now)",
      "0");
  option_parser_register(
      opp, "-gpgpu_ptx_sim_mode", OPT_INT32,
      &(gpgpu_ctx->func_sim->g_ptx_sim_mode),
      "Select between Performance (default) or Functional simulation (1)", "0");
  option_parser_register(opp, "-gpgpu_clock_domains", OPT_CSTR,
                         &gpgpu_clock_domains,
                         "Clock Domain Frequencies in MhZ {<Core Clock>:<ICNT "
                         "Clock>:<L2 Clock>:<DRAM Clock>}",
                         "500.0:2000.0:2000.0:2000.0");
  option_parser_register(
      opp, "-gpgpu_max_concurrent_kernel", OPT_INT32, &max_concurrent_kernel,
      "maximum kernels that can run concurrently on GPU", "8");
  option_parser_register(
      opp, "-gpgpu_cflog_interval", OPT_INT32, &gpgpu_cflog_interval,
      "Interval between each snapshot in control flow logger", "0");
  option_parser_register(opp, "-visualizer_enabled", OPT_BOOL,
                         &g_visualizer_enabled,
                         "Turn on visualizer output (1=On, 0=Off)", "1");
  option_parser_register(opp, "-visualizer_outputfile", OPT_CSTR,
                         &g_visualizer_filename,
                         "Specifies the output log file for visualizer", NULL);
  option_parser_register(
      opp, "-visualizer_zlevel", OPT_INT32, &g_visualizer_zlevel,
      "Compression level of the visualizer output log (0=no comp, 9=highest)",
      "6");
  option_parser_register(opp, "-gpgpu_stack_size_limit", OPT_INT32,
                         &stack_size_limit, "GPU thread stack size", "1024");
  option_parser_register(opp, "-gpgpu_heap_size_limit", OPT_INT32,
                         &heap_size_limit, "GPU malloc heap size ", "8388608");
  option_parser_register(opp, "-gpgpu_runtime_sync_depth_limit", OPT_INT32,
                         &runtime_sync_depth_limit,
                         "GPU device runtime synchronize depth", "2");
  option_parser_register(opp, "-gpgpu_runtime_pending_launch_count_limit",
                         OPT_INT32, &runtime_pending_launch_count_limit,
                         "GPU device runtime pending launch count", "2048");
  option_parser_register(opp, "-trace_enabled", OPT_BOOL, &Trace::enabled,
                         "Turn on traces", "0");
  option_parser_register(opp, "-trace_components", OPT_CSTR, &Trace::config_str,
                         "comma seperated list of traces to enable. "
                         "Complete list found in trace_streams.tup. "
                         "Default none",
                         "none");
  option_parser_register(
      opp, "-trace_sampling_core", OPT_INT32, &Trace::sampling_core,
      "The core which is printed using CORE_DPRINTF. Default 0", "0");
  option_parser_register(opp, "-trace_sampling_memory_partition", OPT_INT32,
                         &Trace::sampling_memory_partition,
                         "The memory partition which is printed using "
                         "MEMPART_DPRINTF. Default -1 (i.e. all)",
                         "-1");
  gpgpu_ctx->stats->ptx_file_line_stats_options(opp);

  // Jin: kernel launch latency
  option_parser_register(opp, "-gpgpu_kernel_launch_latency", OPT_INT32,
                         &(gpgpu_ctx->device_runtime->g_kernel_launch_latency),
                         "Kernel launch latency in cycles. Default: 0", "0");
  option_parser_register(opp, "-gpgpu_cdp_enabled", OPT_BOOL,
                         &(gpgpu_ctx->device_runtime->g_cdp_enabled),
                         "Turn on CDP", "0");

  option_parser_register(opp, "-gpgpu_TB_launch_latency", OPT_INT32,
                         &(gpgpu_ctx->device_runtime->g_TB_launch_latency),
                         "thread block launch latency in cycles. Default: 0",
                         "0");
  option_parser_register(opp, "-gpgpu_max_simulated_rt_kernels", OPT_INT32,
                         &(gpgpu_ctx->device_runtime->g_max_sim_rt_kernels),
                         "Max simulated kernels, used to limit how many frames we render. Default: 0",
                         "0");

  option_parser_register(opp, "-custom_cta_scheduling", OPT_BOOL,
                         &(gpgpu_ctx->device_runtime->g_custom_cta_scheduling),
                         "Enable(1) or disable(0) custom CTA scheduling for ray tracing study. Default: 0",
                         "0");
  option_parser_register(opp, "-cta_group_size", OPT_INT32,
                         &(gpgpu_ctx->device_runtime->g_cta_group_size),
                         "CTA group size for custom CTA scheduling. Default: 4",
                         "4");
  option_parser_register(opp, "-interleaved_thread_to_pixel", OPT_BOOL,
                         &(gpgpu_ctx->device_runtime->g_interleaved_thread_to_pixel),
                         "Enable(1) or disable(0) CTA scheduling for ray tracing study. Interleaved thread-to-pixel mapping in stereo. Default: 0",
                         "0");
}

/////////////////////////////////////////////////////////////////////////////

void increment_x_then_y_then_z(dim3 &i, const dim3 &bound) {
  i.x++;
  if (i.x >= bound.x) {
    i.x = 0;
    i.y++;
    if (i.y >= bound.y) {
      i.y = 0;
      if (i.z < bound.z) i.z++;
    }
  }
}

void gpgpu_sim::launch(kernel_info_t *kinfo) {
  unsigned cta_size = kinfo->threads_per_cta();
  if (cta_size > m_shader_config->n_thread_per_shader) {
    printf(
        "Execution error: Shader kernel CTA (block) size is too large for "
        "microarch config.\n");
    printf("                 CTA size (x*y*z) = %u, max supported = %u\n",
           cta_size, m_shader_config->n_thread_per_shader);
    printf(
        "                 => either change -gpgpu_shader argument in "
        "gpgpusim.config file or\n");
    printf(
        "                 modify the CUDA source to decrease the kernel block "
        "size.\n");
    abort();
  }
  unsigned n = 0;
  for (n = 0; n < m_running_kernels.size(); n++) {
    if ((NULL == m_running_kernels[n]) || m_running_kernels[n]->done()) {
      m_running_kernels[n] = kinfo;
      break;
    }
  }
  assert(n < m_running_kernels.size());
}

bool gpgpu_sim::can_start_kernel() {
  for (unsigned n = 0; n < m_running_kernels.size(); n++) {
    if ((NULL == m_running_kernels[n]) || m_running_kernels[n]->done())
      return true;
  }
  return false;
}

bool gpgpu_sim::hit_max_cta_count() const {
  if (m_config.gpu_max_cta_opt != 0) {
    if ((gpu_tot_issued_cta + m_total_cta_launched) >= m_config.gpu_max_cta_opt)
      return true;
  }
  return false;
}

bool gpgpu_sim::kernel_more_cta_left(kernel_info_t *kernel) const {
  if (hit_max_cta_count()) return false;

  if (kernel && !kernel->no_more_ctas_to_run()) return true;

  return false;
}

bool gpgpu_sim::get_more_cta_left() const {
  if (hit_max_cta_count()) return false;

  for (unsigned n = 0; n < m_running_kernels.size(); n++) {
    if (m_running_kernels[n] && !m_running_kernels[n]->no_more_ctas_to_run())
      return true;
  }
  return false;
}

void gpgpu_sim::decrement_kernel_latency() {
  for (unsigned n = 0; n < m_running_kernels.size(); n++) {
    if (m_running_kernels[n] && m_running_kernels[n]->m_kernel_TB_latency)
      m_running_kernels[n]->m_kernel_TB_latency--;
  }
}

kernel_info_t *gpgpu_sim::select_kernel() {
  if (m_running_kernels[m_last_issued_kernel] &&
      !m_running_kernels[m_last_issued_kernel]->no_more_ctas_to_run() &&
      !m_running_kernels[m_last_issued_kernel]->m_kernel_TB_latency) {
    unsigned launch_uid = m_running_kernels[m_last_issued_kernel]->get_uid();
    if (std::find(m_executed_kernel_uids.begin(), m_executed_kernel_uids.end(),
                  launch_uid) == m_executed_kernel_uids.end()) {
      m_running_kernels[m_last_issued_kernel]->start_cycle =
          gpu_sim_cycle + gpu_tot_sim_cycle;
      m_executed_kernel_uids.push_back(launch_uid);
      m_executed_kernel_names.push_back(
          m_running_kernels[m_last_issued_kernel]->name());
    }
    return m_running_kernels[m_last_issued_kernel];
  }

  for (unsigned n = 0; n < m_running_kernels.size(); n++) {
    unsigned idx =
        (n + m_last_issued_kernel + 1) % m_config.max_concurrent_kernel;
    if (kernel_more_cta_left(m_running_kernels[idx]) &&
        !m_running_kernels[idx]->m_kernel_TB_latency) {
      m_last_issued_kernel = idx;
      m_running_kernels[idx]->start_cycle = gpu_sim_cycle + gpu_tot_sim_cycle;
      // record this kernel for stat print if it is the first time this kernel
      // is selected for execution
      unsigned launch_uid = m_running_kernels[idx]->get_uid();
      assert(std::find(m_executed_kernel_uids.begin(),
                       m_executed_kernel_uids.end(),
                       launch_uid) == m_executed_kernel_uids.end());
      m_executed_kernel_uids.push_back(launch_uid);
      m_executed_kernel_names.push_back(m_running_kernels[idx]->name());

      return m_running_kernels[idx];
    }
  }
  return NULL;
}

unsigned gpgpu_sim::finished_kernel() {
  if (m_finished_kernel.empty()) return 0;
  unsigned result = m_finished_kernel.front();
  m_finished_kernel.pop_front();
  return result;
}

void gpgpu_sim::set_kernel_done(kernel_info_t *kernel) {
  unsigned uid = kernel->get_uid();
  m_finished_kernel.push_back(uid);
  std::vector<kernel_info_t *>::iterator k;
  for (k = m_running_kernels.begin(); k != m_running_kernels.end(); k++) {
    if (*k == kernel) {
      kernel->end_cycle = gpu_sim_cycle + gpu_tot_sim_cycle;
      *k = NULL;
      break;
    }
  }
  assert(k != m_running_kernels.end());
}

void gpgpu_sim::stop_all_running_kernels() {
  std::vector<kernel_info_t *>::iterator k;
  for (k = m_running_kernels.begin(); k != m_running_kernels.end(); ++k) {
    if (*k != NULL) {       // If a kernel is active
      set_kernel_done(*k);  // Stop the kernel
      assert(*k == NULL);
    }
  }
}

void exec_gpgpu_sim::createSIMTCluster() {
  next_cta_group_idx = m_shader_config->n_simt_clusters;
  for (int i = 0; i < m_shader_config->n_simt_clusters; i++)
    cta_group_idx.push_back(i);
  static_cta_schedule = gpgpu_ctx->device_runtime->g_interleaved_thread_to_pixel == true ? cta_groups4_interleaved1 : cta_groups4_4096;

  m_cluster = new simt_core_cluster *[m_shader_config->n_simt_clusters];
  for (unsigned i = 0; i < m_shader_config->n_simt_clusters; i++)
    m_cluster[i] =
        new exec_simt_core_cluster(this, i, m_shader_config, m_memory_config,
                                   m_shader_stats, m_memory_stats);
}

gpgpu_sim::gpgpu_sim(const gpgpu_sim_config &config, gpgpu_context *ctx)
    : gpgpu_t(config, ctx), m_config(config) {
  gpgpu_ctx = ctx;
  m_shader_config = &m_config.m_shader_config;
  m_memory_config = &m_config.m_memory_config;
  ctx->ptx_parser->set_ptx_warp_size(m_shader_config);
  ptx_file_line_stats_create_exposed_latency_tracker(m_config.num_shader());

#ifdef GPGPUSIM_POWER_MODEL
  m_gpgpusim_wrapper = new gpgpu_sim_wrapper(config.g_power_simulation_enabled,
                                             config.g_power_config_name);
#endif

  m_shader_stats = new shader_core_stats(m_shader_config);
  m_memory_stats = new memory_stats_t(m_config.num_shader(), m_shader_config,
                                      m_memory_config, this);
  average_pipeline_duty_cycle = (float *)malloc(sizeof(float));
  active_sms = (float *)malloc(sizeof(float));
  m_power_stats =
      new power_stat_t(m_shader_config, average_pipeline_duty_cycle, active_sms,
                       m_shader_stats, m_memory_config, m_memory_stats);

  gpu_sim_insn = 0;
  gpu_tot_sim_insn = 0;
  gpu_tot_issued_cta = 0;
  gpu_completed_cta = 0;
  m_total_cta_launched = 0;
  gpu_deadlock = false;

  gpu_stall_dramfull = 0;
  gpu_stall_icnt2sh = 0;
  partiton_reqs_in_parallel = 0;
  partiton_reqs_in_parallel_total = 0;
  partiton_reqs_in_parallel_util = 0;
  partiton_reqs_in_parallel_util_total = 0;
  gpu_sim_cycle_parition_util = 0;
  gpu_tot_sim_cycle_parition_util = 0;
  partiton_replys_in_parallel = 0;
  partiton_replys_in_parallel_total = 0;

  m_memory_partition_unit =
      new memory_partition_unit *[m_memory_config->m_n_mem];
  m_memory_sub_partition =
      new memory_sub_partition *[m_memory_config->m_n_mem_sub_partition];
  for (unsigned i = 0; i < m_memory_config->m_n_mem; i++) {
    m_memory_partition_unit[i] =
        new memory_partition_unit(i, m_memory_config, m_memory_stats, this);
    for (unsigned p = 0;
         p < m_memory_config->m_n_sub_partition_per_memory_channel; p++) {
      unsigned submpid =
          i * m_memory_config->m_n_sub_partition_per_memory_channel + p;
      m_memory_sub_partition[submpid] =
          m_memory_partition_unit[i]->get_sub_partition(p);
    }
  }

  icnt_wrapper_init();
  icnt_create(m_shader_config->n_simt_clusters,
              m_memory_config->m_n_mem_sub_partition);

  time_vector_create(NUM_MEM_REQ_STAT);
  fprintf(stdout,
          "GPGPU-Sim uArch: performance model initialization complete.\n");

  m_running_kernels.resize(config.max_concurrent_kernel, NULL);
  m_last_issued_kernel = 0;
  m_last_cluster_issue = m_shader_config->n_simt_clusters -
                         1;  // this causes first launch to use simt cluster 0
  *average_pipeline_duty_cycle = 0;
  *active_sms = 0;

  last_liveness_message_time = 0;

  // Jin: functional simulation for CDP
  m_functional_sim = false;
  m_functional_sim_kernel = NULL;

  std::remove("memory_accesses_per_thread.txt");
  std::remove("memory_accesses_per_warp.txt");
  std::remove("prefetch_addresses.txt");
  std::remove("warps.txt");
  std::remove("closest_hits.txt");
}

int gpgpu_sim::shared_mem_size() const {
  return m_shader_config->gpgpu_shmem_size;
}

bool gpgpu_sim::print_intermittent_stats(unsigned long long cycle) const {
  if (m_config.gpu_intermittent_stats) {
    return cycle % m_config.gpu_intermittent_stats_freq == 0;
  }
  else {
    return false;
  }
}

int gpgpu_sim::shared_mem_per_block() const {
  return m_shader_config->gpgpu_shmem_per_block;
}

int gpgpu_sim::num_registers_per_core() const {
  return m_shader_config->gpgpu_shader_registers;
}

int gpgpu_sim::num_registers_per_block() const {
  return m_shader_config->gpgpu_registers_per_block;
}

int gpgpu_sim::wrp_size() const { return m_shader_config->warp_size; }

int gpgpu_sim::shader_clock() const { return m_config.core_freq / 1000; }

int gpgpu_sim::max_cta_per_core() const {
  return m_shader_config->max_cta_per_core;
}

int gpgpu_sim::get_max_cta(const kernel_info_t &k) const {
  return m_shader_config->max_cta(k);
}

void gpgpu_sim::set_prop(cudaDeviceProp *prop) { m_cuda_properties = prop; }

int gpgpu_sim::compute_capability_major() const {
  return m_config.gpgpu_compute_capability_major;
}

int gpgpu_sim::compute_capability_minor() const {
  return m_config.gpgpu_compute_capability_minor;
}

const struct cudaDeviceProp *gpgpu_sim::get_prop() const {
  return m_cuda_properties;
}

enum divergence_support_t gpgpu_sim::simd_model() const {
  return m_shader_config->model;
}

void gpgpu_sim_config::init_clock_domains(void) {
  sscanf(gpgpu_clock_domains, "%lf:%lf:%lf:%lf", &core_freq, &icnt_freq,
         &l2_freq, &dram_freq);
  core_freq = core_freq MhZ;
  icnt_freq = icnt_freq MhZ;
  l2_freq = l2_freq MhZ;
  dram_freq = dram_freq MhZ;
  core_period = 1 / core_freq;
  icnt_period = 1 / icnt_freq;
  dram_period = 1 / dram_freq;
  l2_period = 1 / l2_freq;
  printf("GPGPU-Sim uArch: clock freqs: %lf:%lf:%lf:%lf\n", core_freq,
         icnt_freq, l2_freq, dram_freq);
  printf("GPGPU-Sim uArch: clock periods: %.20lf:%.20lf:%.20lf:%.20lf\n",
         core_period, icnt_period, l2_period, dram_period);
}

void gpgpu_sim::reinit_clock_domains(void) {
  core_time = 0;
  dram_time = 0;
  icnt_time = 0;
  l2_time = 0;
}

bool gpgpu_sim::active() {
  if (m_config.gpu_max_cycle_opt &&
      (gpu_tot_sim_cycle + gpu_sim_cycle) >= m_config.gpu_max_cycle_opt)
    return false;
  if (m_config.gpu_max_insn_opt &&
      (gpu_tot_sim_insn + gpu_sim_insn) >= m_config.gpu_max_insn_opt)
    return false;
  if (m_config.gpu_max_cta_opt &&
      (gpu_tot_issued_cta >= m_config.gpu_max_cta_opt))
    return false;
  if (m_config.gpu_max_completed_cta_opt &&
      (gpu_completed_cta >= m_config.gpu_max_completed_cta_opt))
    return false;
  if (m_config.gpu_deadlock_detect && gpu_deadlock) return false;
  for (unsigned i = 0; i < m_shader_config->n_simt_clusters; i++)
    if (m_cluster[i]->get_not_completed() > 0) return true;
  ;
  for (unsigned i = 0; i < m_memory_config->m_n_mem; i++)
    if (m_memory_partition_unit[i]->busy() > 0) return true;
  ;
  if (icnt_busy()) return true;
  if (get_more_cta_left()) return true;
  return false;
}

void gpgpu_sim::init() {
  // run a CUDA grid on the GPU microarchitecture simulator
  gpu_sim_cycle = 0;
  gpu_sim_insn = 0;

  max_st_entries = 0;
  max_rec_entries = 0;
  max_recvg_time = 0;
  triggered_timeouts = 0;
  gpu_st_spills = 0;
  gpu_st_fills = 0;
  gpu_rt_spills = 0;
  gpu_rt_fills = 0;
  gpu_st_fills_hits = 0;
  gpu_st_fills_misses = 0;
  gpu_rt_fills_hits = 0;
  gpu_rt_fills_misses = 0;

  last_gpu_sim_insn = 0;
  m_total_cta_launched = 0;
  gpu_completed_cta = 0;
  partiton_reqs_in_parallel = 0;
  partiton_replys_in_parallel = 0;
  partiton_reqs_in_parallel_util = 0;
  gpu_sim_cycle_parition_util = 0;

  reinit_clock_domains();
  gpgpu_ctx->func_sim->set_param_gpgpu_num_shaders(m_config.num_shader());
  for (unsigned i = 0; i < m_shader_config->n_simt_clusters; i++)
    m_cluster[i]->reinit();
  m_shader_stats->new_grid();
  // initialize the control-flow, memory access, memory latency logger
  if (m_config.g_visualizer_enabled) {
    create_thread_CFlogger(gpgpu_ctx, m_config.num_shader(),
                           m_shader_config->n_thread_per_shader, 0,
                           m_config.gpgpu_cflog_interval);
  }
  shader_CTA_count_create(m_config.num_shader(), m_config.gpgpu_cflog_interval);
  if (m_config.gpgpu_cflog_interval != 0) {
    insn_warp_occ_create(m_config.num_shader(), m_shader_config->warp_size);
    shader_warp_occ_create(m_config.num_shader(), m_shader_config->warp_size,
                           m_config.gpgpu_cflog_interval);
    shader_mem_acc_create(m_config.num_shader(), m_memory_config->m_n_mem, 4,
                          m_config.gpgpu_cflog_interval);
    shader_mem_lat_create(m_config.num_shader(), m_config.gpgpu_cflog_interval);
    shader_cache_access_create(m_config.num_shader(), 3,
                               m_config.gpgpu_cflog_interval);
    set_spill_interval(m_config.gpgpu_cflog_interval * 40);
  }

  if (g_network_mode) icnt_init();

    // McPAT initialization function. Called on first launch of GPU
#ifdef GPGPUSIM_POWER_MODEL
  if (m_config.g_power_simulation_enabled) {
    init_mcpat(m_config, m_gpgpusim_wrapper, m_config.gpu_stat_sample_freq,
               gpu_tot_sim_insn, gpu_sim_insn);
  }
#endif
}

void gpgpu_sim::update_stats() {
  m_memory_stats->memlatstat_lat_pw();
  gpu_tot_sim_cycle += gpu_sim_cycle;
  gpu_tot_sim_insn += gpu_sim_insn;
  gpu_tot_issued_cta += m_total_cta_launched;
  partiton_reqs_in_parallel_total += partiton_reqs_in_parallel;
  partiton_replys_in_parallel_total += partiton_replys_in_parallel;
  partiton_reqs_in_parallel_util_total += partiton_reqs_in_parallel_util;
  gpu_tot_sim_cycle_parition_util += gpu_sim_cycle_parition_util;
  gpu_tot_occupancy += gpu_occupancy;

  gpu_sim_cycle = 0;
  partiton_reqs_in_parallel = 0;
  partiton_replys_in_parallel = 0;
  partiton_reqs_in_parallel_util = 0;
  gpu_sim_cycle_parition_util = 0;
  gpu_sim_insn = 0;
  m_total_cta_launched = 0;
  gpu_completed_cta = 0;
  gpu_occupancy = occupancy_stats();
}

void gpgpu_sim::print_stats() {
  gpgpu_ctx->stats->ptx_file_line_stats_write_file();
  gpu_print_stat();
  fflush(stdout);

  if (g_network_mode) {
    fprintf(stdout,
        "----------------------------Interconnect-DETAILS----------------------"
        "----------\n");
    icnt_display_stats();
    icnt_display_overall_stats();
    fprintf(stdout,
        "----------------------------END-of-Interconnect-DETAILS---------------"
        "----------\n");
  }
  fflush(stdout);
}

void gpgpu_sim::deadlock_check() {
  if (m_config.gpu_deadlock_detect && gpu_deadlock) {
    fflush(stdout);
    printf(
        "\n\nGPGPU-Sim uArch: ERROR ** deadlock detected: last writeback core "
        "%u @ gpu_sim_cycle %u (+ gpu_tot_sim_cycle %u) (%u cycles ago)\n",
        gpu_sim_insn_last_update_sid, (unsigned)gpu_sim_insn_last_update,
        (unsigned)(gpu_tot_sim_cycle - gpu_sim_cycle),
        (unsigned)(gpu_sim_cycle - gpu_sim_insn_last_update));
    unsigned num_cores = 0;
    for (unsigned i = 0; i < m_shader_config->n_simt_clusters; i++) {
      unsigned not_completed = m_cluster[i]->get_not_completed();
      if (not_completed) {
        if (!num_cores) {
          printf(
              "GPGPU-Sim uArch: DEADLOCK  shader cores no longer committing "
              "instructions [core(# threads)]:\n");
          printf("GPGPU-Sim uArch: DEADLOCK  ");
          dump_pipeline((0x40|0x4|0x1), 5, 0);
          m_cluster[i]->print_not_completed(stdout);
        } else if (num_cores < 8) {
          m_cluster[i]->print_not_completed(stdout);
        } else if (num_cores >= 8) {
          printf(" + others ... ");
        }
        num_cores += m_shader_config->n_simt_cores_per_cluster;
      }
    }
    printf("\n");
    for (unsigned i = 0; i < m_memory_config->m_n_mem; i++) {
      bool busy = m_memory_partition_unit[i]->busy();
      if (busy)
        printf("GPGPU-Sim uArch DEADLOCK:  memory partition %u busy\n", i);
    }
    if (icnt_busy()) {
      printf("GPGPU-Sim uArch DEADLOCK:  iterconnect contains traffic\n");
      icnt_display_state(stdout);
    }
    printf(
        "\nRe-run the simulator in gdb and use debug routines in .gdbinit to "
        "debug this\n");
    fflush(stdout);
    abort();
  }
}

/// printing the names and uids of a set of executed kernels (usually there is
/// only one)
std::string gpgpu_sim::executed_kernel_info_string() {
  std::stringstream statout;

  statout << "kernel_name = ";
  for (unsigned int k = 0; k < m_executed_kernel_names.size(); k++) {
    statout << m_executed_kernel_names[k] << " ";
  }
  statout << std::endl;
  statout << "kernel_launch_uid = ";
  for (unsigned int k = 0; k < m_executed_kernel_uids.size(); k++) {
    statout << m_executed_kernel_uids[k] << " ";
  }
  statout << std::endl;

  return statout.str();
}
void gpgpu_sim::set_cache_config(std::string kernel_name,
                                 FuncCache cacheConfig) {
  m_special_cache_config[kernel_name] = cacheConfig;
}

FuncCache gpgpu_sim::get_cache_config(std::string kernel_name) {
  for (std::map<std::string, FuncCache>::iterator iter =
           m_special_cache_config.begin();
       iter != m_special_cache_config.end(); iter++) {
    std::string kernel = iter->first;
    if (kernel_name.compare(kernel) == 0) {
      return iter->second;
    }
  }
  return (FuncCache)0;
}

bool gpgpu_sim::has_special_cache_config(std::string kernel_name) {
  for (std::map<std::string, FuncCache>::iterator iter =
           m_special_cache_config.begin();
       iter != m_special_cache_config.end(); iter++) {
    std::string kernel = iter->first;
    if (kernel_name.compare(kernel) == 0) {
      return true;
    }
  }
  return false;
}

void gpgpu_sim::set_cache_config(std::string kernel_name) {
  if (has_special_cache_config(kernel_name)) {
    change_cache_config(get_cache_config(kernel_name));
  } else {
    change_cache_config(FuncCachePreferNone);
  }
}

void gpgpu_sim::change_cache_config(FuncCache cache_config) {
  if (cache_config != m_shader_config->m_L1D_config.get_cache_status()) {
    printf("FLUSH L1 Cache at configuration change between kernels\n");
    for (unsigned i = 0; i < m_shader_config->n_simt_clusters; i++) {
      m_cluster[i]->cache_invalidate();
    }
  }

  switch (cache_config) {
    case FuncCachePreferNone:
      m_shader_config->m_L1D_config.init(
          m_shader_config->m_L1D_config.m_config_string, FuncCachePreferNone);
      m_shader_config->gpgpu_shmem_size =
          m_shader_config->gpgpu_shmem_sizeDefault;
      break;
    case FuncCachePreferL1:
      if ((m_shader_config->m_L1D_config.m_config_stringPrefL1 == NULL) ||
          (m_shader_config->gpgpu_shmem_sizePrefL1 == (unsigned)-1)) {
        printf("WARNING: missing Preferred L1 configuration\n");
        m_shader_config->m_L1D_config.init(
            m_shader_config->m_L1D_config.m_config_string, FuncCachePreferNone);
        m_shader_config->gpgpu_shmem_size =
            m_shader_config->gpgpu_shmem_sizeDefault;

      } else {
        m_shader_config->m_L1D_config.init(
            m_shader_config->m_L1D_config.m_config_stringPrefL1,
            FuncCachePreferL1);
        m_shader_config->gpgpu_shmem_size =
            m_shader_config->gpgpu_shmem_sizePrefL1;
      }
      break;
    case FuncCachePreferShared:
      if ((m_shader_config->m_L1D_config.m_config_stringPrefShared == NULL) ||
          (m_shader_config->gpgpu_shmem_sizePrefShared == (unsigned)-1)) {
        printf("WARNING: missing Preferred L1 configuration\n");
        m_shader_config->m_L1D_config.init(
            m_shader_config->m_L1D_config.m_config_string, FuncCachePreferNone);
        m_shader_config->gpgpu_shmem_size =
            m_shader_config->gpgpu_shmem_sizeDefault;
      } else {
        m_shader_config->m_L1D_config.init(
            m_shader_config->m_L1D_config.m_config_stringPrefShared,
            FuncCachePreferShared);
        m_shader_config->gpgpu_shmem_size =
            m_shader_config->gpgpu_shmem_sizePrefShared;
      }
      break;
    default:
      break;
  }
}

void gpgpu_sim::clear_executed_kernel_info() {
  m_executed_kernel_names.clear();
  m_executed_kernel_uids.clear();
}
void gpgpu_sim::gpu_print_stat() {
  FILE *statfout = stdout;

  std::string kernel_info_str = executed_kernel_info_string();
  fprintf(statfout, "%s", kernel_info_str.c_str());

  fprintf(statfout, "gpu_sim_cycle = %lld\n", gpu_sim_cycle);
  fprintf(statfout, "gpu_sim_insn = %lld\n", gpu_sim_insn);
  fprintf(statfout, "gpu_ipc = %12.4f\n", (float)gpu_sim_insn / gpu_sim_cycle);
  fprintf(statfout, "gpu_tot_sim_cycle = %lld\n", gpu_tot_sim_cycle + gpu_sim_cycle);
  fprintf(statfout, "gpu_tot_sim_insn = %lld\n", gpu_tot_sim_insn + gpu_sim_insn);
  fprintf(statfout, "gpu_tot_ipc = %12.4f\n", (float)(gpu_tot_sim_insn + gpu_sim_insn) /
                                       (gpu_tot_sim_cycle + gpu_sim_cycle));
  fprintf(statfout, "gpu_tot_issued_cta = %lld\n",
         gpu_tot_issued_cta + m_total_cta_launched);
  fprintf(statfout, "gpu_occupancy = %.4f%% \n", gpu_occupancy.get_occ_fraction() * 100);
  fprintf(statfout, "gpu_tot_occupancy = %.4f%% \n",
         (gpu_occupancy + gpu_tot_occupancy).get_occ_fraction() * 100);

  fprintf(statfout, "max_total_param_size = %llu\n",
          gpgpu_ctx->device_runtime->g_max_total_param_size);


  // AWARE Stats
  fprintf(statfout, "splits_table_push_back = %d\n", splits_table_push_back);
  fprintf(statfout, "splits_table_update_active_entry = %d\n", splits_table_update_active_entry);
  fprintf(statfout, "max_recvg_time = %lld\n", max_recvg_time);
  fprintf(statfout, "max_st entries = %lld\n", max_st_entries);
  fprintf(statfout, "max_rec entries = %lld\n", max_rec_entries);
  fprintf(statfout, "triggered_timeouts = %lld\n", triggered_timeouts);
  fprintf(statfout, "gpu_st_spills = %lld\n", gpu_st_spills);
  fprintf(statfout, "gpu_rt_spills = %lld\n", gpu_rt_spills);
  fprintf(statfout, "gpu_st_fills = %lld\n", gpu_st_fills);
  fprintf(statfout, "gpu_rt_fills = %lld\n", gpu_rt_fills);
  fprintf(statfout, "gpu_st_fills_hits = %lld\n", gpu_st_fills_hits);
  fprintf(statfout, "gpu_st_fills_misses = %lld\n", gpu_st_fills_misses);
  fprintf(statfout, "gpu_rt_fills_hits = %lld\n", gpu_rt_fills_hits );
  fprintf(statfout, "gpu_rt_fills_misses = %lld\n", gpu_rt_fills_misses);

  double avg_st_entries = m_shader_stats->compue_distribution_avg(m_shader_stats->st_size_distro);
  fprintf(statfout, "avg_st_entries = %f\n", avg_st_entries);
  double avg_rt_entries = m_shader_stats->compue_distribution_avg(m_shader_stats->rt_size_distro);
  fprintf(statfout, "avg_rt_entries = %f\n", avg_rt_entries);

  m_shader_stats->print_reuse_distribution_avg();
  // performance counter for stalls due to congestion.
  fprintf(statfout, "gpu_stall_dramfull = %d\n", gpu_stall_dramfull);
  fprintf(statfout, "gpu_stall_icnt2sh    = %d\n", gpu_stall_icnt2sh);

  // printf("partiton_reqs_in_parallel = %lld\n", partiton_reqs_in_parallel);
  // printf("partiton_reqs_in_parallel_total    = %lld\n",
  // partiton_reqs_in_parallel_total );
  fprintf(statfout, "partiton_level_parallism = %12.4f\n",
         (float)partiton_reqs_in_parallel / gpu_sim_cycle);
  fprintf(statfout, "partiton_level_parallism_total  = %12.4f\n",
         (float)(partiton_reqs_in_parallel + partiton_reqs_in_parallel_total) /
             (gpu_tot_sim_cycle + gpu_sim_cycle));
  // printf("partiton_reqs_in_parallel_util = %lld\n",
  // partiton_reqs_in_parallel_util);
  // printf("partiton_reqs_in_parallel_util_total    = %lld\n",
  // partiton_reqs_in_parallel_util_total ); printf("gpu_sim_cycle_parition_util
  // = %lld\n", gpu_sim_cycle_parition_util);
  // printf("gpu_tot_sim_cycle_parition_util    = %lld\n",
  // gpu_tot_sim_cycle_parition_util );
  printf("partiton_level_parallism_util = %12.4f\n",
         (float)partiton_reqs_in_parallel_util / gpu_sim_cycle_parition_util);
  printf("partiton_level_parallism_util_total  = %12.4f\n",
         (float)(partiton_reqs_in_parallel_util +
                 partiton_reqs_in_parallel_util_total) /
             (gpu_sim_cycle_parition_util + gpu_tot_sim_cycle_parition_util));
  // printf("partiton_replys_in_parallel = %lld\n",
  // partiton_replys_in_parallel); printf("partiton_replys_in_parallel_total =
  // %lld\n", partiton_replys_in_parallel_total );
  printf("L2_BW  = %12.4f GB/Sec\n",
         ((float)(partiton_replys_in_parallel * 32) /
          (gpu_sim_cycle * m_config.icnt_period)) /
             1000000000);
  printf("L2_BW_total  = %12.4f GB/Sec\n",
         ((float)((partiton_replys_in_parallel +
                   partiton_replys_in_parallel_total) *
                  32) /
          ((gpu_tot_sim_cycle + gpu_sim_cycle) * m_config.icnt_period)) /
             1000000000);

  time_t curr_time;
  time(&curr_time);
  unsigned long long elapsed_time =
      MAX(curr_time - gpgpu_ctx->the_gpgpusim->g_simulation_starttime, 1);
  fprintf(statfout, "gpu_total_sim_rate=%u\n",
         (unsigned)((gpu_tot_sim_insn + gpu_sim_insn) / elapsed_time));

  // shader_print_l1_miss_stat( stdout );
  shader_print_cache_stats(statfout);
  fflush(statfout);

  cache_stats core_cache_stats;
  core_cache_stats.clear();
  for (unsigned i = 0; i < m_config.num_cluster(); i++) {
    m_cluster[i]->get_cache_stats(core_cache_stats);
  }
  fprintf(statfout, "\nTotal_core_cache_stats:\n");
  core_cache_stats.print_stats(statfout, "Total_core_cache_stats_breakdown");
  fprintf(statfout, "\nTotal_core_cache_fail_stats:\n");
  core_cache_stats.print_fail_stats(statfout,
                                    "Total_core_cache_fail_stats_breakdown");
  shader_print_scheduler_stat(statfout, false);

  m_shader_stats->print(statfout);
#ifdef GPGPUSIM_POWER_MODEL
  if (m_config.g_power_simulation_enabled) {
    m_gpgpusim_wrapper->print_power_kernel_stats(
        gpu_sim_cycle, gpu_tot_sim_cycle, gpu_tot_sim_insn + gpu_sim_insn,
        kernel_info_str, true);
    mcpat_reset_perf_count(m_gpgpusim_wrapper);
  }
#endif

  // performance counter that are not local to one shader
  m_memory_stats->memlatstat_print(m_memory_config->m_n_mem,
                                   m_memory_config->nbk);
  for (unsigned i = 0; i < m_memory_config->m_n_mem; i++)
    m_memory_partition_unit[i]->print(statfout);

  // L2 cache stats
  if (!m_memory_config->m_L2_config.disabled()) {
    cache_stats l2_stats;
    struct cache_sub_stats l2_css;
    struct cache_sub_stats total_l2_css;
    l2_stats.clear();
    l2_css.clear();
    total_l2_css.clear();

    fprintf(statfout, "\n========= L2 cache stats =========\n");
    for (unsigned i = 0; i < m_memory_config->m_n_mem_sub_partition; i++) {
      m_memory_sub_partition[i]->accumulate_L2cache_stats(l2_stats);
      m_memory_sub_partition[i]->get_L2cache_sub_stats(l2_css);

      fprintf(statfout,
              "L2_cache_bank[%d]: Access = %llu, Miss = %llu, Miss_rate = "
              "%.3lf, Pending_hits = %llu, Reservation_fails = %llu\n",
              i, l2_css.accesses, l2_css.misses,
              (double)l2_css.misses / (double)l2_css.accesses,
              l2_css.pending_hits, l2_css.res_fails);

      total_l2_css += l2_css;
    }
    fflush(statfout);
    if (!m_memory_config->m_L2_config.disabled() &&
        m_memory_config->m_L2_config.get_num_lines()) {
      // L2c_print_cache_stat();
      fprintf(statfout, "L2_total_cache_accesses = %llu\n", total_l2_css.accesses);
      fprintf(statfout, "L2_total_cache_misses = %llu\n", total_l2_css.misses);
      if (total_l2_css.accesses > 0)
        fprintf(statfout, "L2_total_cache_miss_rate = %.4lf\n",
               (double)total_l2_css.misses / (double)total_l2_css.accesses);
      fprintf(statfout, "L2_total_cache_pending_hits = %llu\n", total_l2_css.pending_hits);
      fprintf(statfout, "L2_total_cache_reservation_fails = %llu\n",
             total_l2_css.res_fails);
      fprintf(statfout, "L2_total_cache_breakdown:\n");
      l2_stats.print_stats(statfout, "L2_cache_stats_breakdown");
      fprintf(statfout, "L2_total_cache_reservation_fail_breakdown:\n");
      l2_stats.print_fail_stats(statfout, "L2_cache_stats_fail_breakdown");
      total_l2_css.print_port_stats(statfout, "L2_cache");
    }
  }

  if (m_config.gpgpu_cflog_interval != 0) {
    spill_log_to_file(statfout, 1, gpu_sim_cycle);
    insn_warp_occ_print(statfout);
  }
  if (gpgpu_ctx->func_sim->gpgpu_ptx_instruction_classification) {
    StatDisp(gpgpu_ctx->func_sim->g_inst_classification_stat
                 [gpgpu_ctx->func_sim->g_ptx_kernel_count]);
    StatDisp(gpgpu_ctx->func_sim->g_inst_op_classification_stat
                 [gpgpu_ctx->func_sim->g_ptx_kernel_count]);
  }
    
  fprintf(statfout, "Ray tracing memory access distribution: \n");
  for (unsigned i=0; i<static_cast<int>(TransactionType::UNDEFINED); i++) {
      fprintf(statfout, "%d\t", gpgpu_ctx->func_sim->g_rt_mem_access_type[i]);
  }
  fprintf(statfout, "\n");

  fprintf(statfout, "rt_num_hits = %d\n", gpgpu_ctx->func_sim->g_rt_num_hits);
  fprintf(statfout, "rt_num_any_hits = %d\n", gpgpu_ctx->func_sim->g_rt_num_any_hits);
  fprintf(statfout, "rt_n_anyhit_rays = %d\n", gpgpu_ctx->func_sim->g_n_anyhit_rays);
  fprintf(statfout, "rt_n_closesthit_rays = %d\n", gpgpu_ctx->func_sim->g_n_closesthit_rays);
  fprintf(statfout, "rt_n_total_rays = %d\n", gpgpu_ctx->func_sim->g_n_closesthit_rays + gpgpu_ctx->func_sim->g_n_anyhit_rays);
  fprintf(statfout, "rt_max_tree_depth = %d\n", gpgpu_ctx->func_sim->g_max_tree_depth);
  fprintf(statfout, "rt_max_nodes_per_ray = %d\n", gpgpu_ctx->func_sim->g_max_nodes_per_ray);
  fprintf(statfout, "rt_tot_nodes_per_ray = %d\n", gpgpu_ctx->func_sim->g_tot_nodes_per_ray);
  fprintf(statfout, "rt_avg_nodes_per_ray = %f\n", (float)gpgpu_ctx->func_sim->g_tot_nodes_per_ray/(gpgpu_ctx->func_sim->g_n_closesthit_rays + gpgpu_ctx->func_sim->g_n_anyhit_rays));
  fprintf(statfout, "g_inst_type_latency = ");
  for (unsigned i=0; i<28; i++) {
    fprintf(statfout, "%lld ", gpgpu_ctx->func_sim->g_inst_type_latency[i]);
  }
  fprintf(statfout, "\n");
  fprintf(statfout, "inst_class_by_shader\n");
  for (unsigned i=0; i<16; i++) {
    fprintf(statfout, "%d:", i);
    for (unsigned j=0; j<20; j++) {
      fprintf(statfout, "%d\t", gpgpu_ctx->func_sim->g_inst_class_stat[i][j]);
    }
    fprintf(statfout, "\n");
  }

#ifdef GPGPUSIM_POWER_MODEL
  if (m_config.g_power_simulation_enabled) {
    m_gpgpusim_wrapper->detect_print_steady_state(
        1, gpu_tot_sim_insn + gpu_sim_insn);
  }
#endif

  // Interconnect power stat print
  long total_simt_to_mem = 0;
  long total_mem_to_simt = 0;
  long temp_stm = 0;
  long temp_mts = 0;
  for (unsigned i = 0; i < m_config.num_cluster(); i++) {
    m_cluster[i]->get_icnt_stats(temp_stm, temp_mts);
    total_simt_to_mem += temp_stm;
    total_mem_to_simt += temp_mts;
  }
  fprintf(statfout, "\nicnt_total_pkts_mem_to_simt=%ld\n", total_mem_to_simt);
  fprintf(statfout, "icnt_total_pkts_simt_to_mem=%ld\n", total_simt_to_mem);

  time_vector_print();
  fflush(statfout);

  clear_executed_kernel_info();
}

// performance counter that are not local to one shader
unsigned gpgpu_sim::threads_per_core() const {
  return m_shader_config->n_thread_per_shader;
}

void shader_core_ctx::mem_instruction_stats(const warp_inst_t &inst) {
  unsigned active_count = inst.active_count();
  // this breaks some encapsulation: the is_[space] functions, if you change
  // those, change this.
  switch (inst.space.get_type()) {
    case undefined_space:
    case reg_space:
      break;
    case shared_space:
      m_stats->gpgpu_n_shmem_insn += active_count;
      break;
    case sstarr_space:
      m_stats->gpgpu_n_sstarr_insn += active_count;
      break;
    case const_space:
      m_stats->gpgpu_n_const_insn += active_count;
      break;
    case param_space_kernel:
    case param_space_local:
      m_stats->gpgpu_n_param_insn += active_count;
      break;
    case tex_space:
      m_stats->gpgpu_n_tex_insn += active_count;
      break;
    case global_space:
      if (inst.is_store())
        m_stats->gpgpu_n_global_store_insn += active_count;
      else
        m_stats->gpgpu_n_global_load_insn += active_count;
      break;
    case local_space:
      if (inst.is_store())
        m_stats->gpgpu_n_local_store_insn += active_count;
      else
        m_stats->gpgpu_n_local_load_insn += active_count;
      break;
    default:
      abort();
  }
}

void shader_core_ctx::rt_mem_instruction_stats(const warp_inst_t &inst) {
  unsigned active_count = inst.active_count();
  m_stats->gpgpu_n_rt_insn += active_count;

  for (unsigned i=0; i<m_config->warp_size; i++) {
    m_stats->gpgpu_n_rt_access_insn += inst.mem_list_length(i);
  }
}

bool shader_core_ctx::can_issue_1block(kernel_info_t &kernel) {
  // Jin: concurrent kernels on one SM
  if (m_config->gpgpu_concurrent_kernel_sm) {
    if (m_config->max_cta(kernel) < 1) return false;

    return occupy_shader_resource_1block(kernel, false);
  } else {
    if(m_gpu->gpgpu_ctx->device_runtime->g_custom_cta_scheduling) {
      int num_cta_groups = kernel.num_blocks() / (m_gpu->gpgpu_ctx->device_runtime->g_cta_group_size);
      return (get_n_active_cta() < m_config->max_cta(kernel)) && ((static_cta_schedule[cta_group_idx[m_sid]].size() > 0) || next_cta_group_idx != num_cta_groups);
    }
    else
      return (get_n_active_cta() < m_config->max_cta(kernel));
  }
}

int shader_core_ctx::find_available_hwtid(unsigned int cta_size, bool occupy) {
  unsigned int step;
  for (step = 0; step < m_config->n_thread_per_shader; step += cta_size) {
    unsigned int hw_tid;
    for (hw_tid = step; hw_tid < step + cta_size; hw_tid++) {
      if (m_occupied_hwtid.test(hw_tid)) break;
    }
    if (hw_tid == step + cta_size)  // consecutive non-active
      break;
  }
  if (step >= m_config->n_thread_per_shader)  // didn't find
    return -1;
  else {
    if (occupy) {
      for (unsigned hw_tid = step; hw_tid < step + cta_size; hw_tid++)
        m_occupied_hwtid.set(hw_tid);
    }
    return step;
  }
}

bool shader_core_ctx::occupy_shader_resource_1block(kernel_info_t &k,
                                                    bool occupy) {
  unsigned threads_per_cta = k.threads_per_cta();
  const class function_info *kernel = k.entry();
  unsigned int padded_cta_size = threads_per_cta;
  unsigned int warp_size = m_config->warp_size;
  if (padded_cta_size % warp_size)
    padded_cta_size = ((padded_cta_size / warp_size) + 1) * (warp_size);

  if (m_occupied_n_threads + padded_cta_size > m_config->n_thread_per_shader)
    return false;

  if (find_available_hwtid(padded_cta_size, false) == -1) return false;

  const struct gpgpu_ptx_sim_info *kernel_info = ptx_sim_kernel_info(kernel);

  if (m_occupied_shmem + kernel_info->smem > m_config->gpgpu_shmem_size)
    return false;

  unsigned int used_regs = padded_cta_size * ((kernel_info->regs + 3) & ~3);
  if (m_occupied_regs + used_regs > m_config->gpgpu_shader_registers)
    return false;

  if (m_occupied_ctas + 1 > m_config->max_cta_per_core) return false;

  if (occupy) {
    m_occupied_n_threads += padded_cta_size;
    m_occupied_shmem += kernel_info->smem;
    m_occupied_regs += (padded_cta_size * ((kernel_info->regs + 3) & ~3));
    m_occupied_ctas++;

    SHADER_DPRINTF(LIVENESS,
                   "GPGPU-Sim uArch: Occupied %u threads, %u shared mem, %u "
                   "registers, %u ctas\n",
                   m_occupied_n_threads, m_occupied_shmem, m_occupied_regs,
                   m_occupied_ctas);
  }

  return true;
}

void shader_core_ctx::release_shader_resource_1block(unsigned hw_ctaid,
                                                     kernel_info_t &k) {
  if (m_config->gpgpu_concurrent_kernel_sm) {
    unsigned threads_per_cta = k.threads_per_cta();
    const class function_info *kernel = k.entry();
    unsigned int padded_cta_size = threads_per_cta;
    unsigned int warp_size = m_config->warp_size;
    if (padded_cta_size % warp_size)
      padded_cta_size = ((padded_cta_size / warp_size) + 1) * (warp_size);

    assert(m_occupied_n_threads >= padded_cta_size);
    m_occupied_n_threads -= padded_cta_size;

    int start_thread = m_occupied_cta_to_hwtid[hw_ctaid];

    for (unsigned hwtid = start_thread; hwtid < start_thread + padded_cta_size;
         hwtid++)
      m_occupied_hwtid.reset(hwtid);
    m_occupied_cta_to_hwtid.erase(hw_ctaid);

    const struct gpgpu_ptx_sim_info *kernel_info = ptx_sim_kernel_info(kernel);

    assert(m_occupied_shmem >= (unsigned int)kernel_info->smem);
    m_occupied_shmem -= kernel_info->smem;

    unsigned int used_regs = padded_cta_size * ((kernel_info->regs + 3) & ~3);
    assert(m_occupied_regs >= used_regs);
    m_occupied_regs -= used_regs;

    assert(m_occupied_ctas >= 1);
    m_occupied_ctas--;
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Launches a cooperative thread array (CTA).
 *
 * @param kernel
 *    object that tells us which kernel to ask for a CTA from
 */

unsigned exec_shader_core_ctx::sim_init_thread(
    kernel_info_t &kernel, ptx_thread_info **thread_info, int sid, unsigned tid,
    unsigned threads_left, unsigned num_threads, core_t *core,
    unsigned hw_cta_id, unsigned hw_warp_id, gpgpu_t *gpu, unsigned kernel_cta_id) {
  return ptx_sim_init_thread(kernel, thread_info, sid, tid, threads_left,
                             num_threads, core, hw_cta_id, hw_warp_id, gpu, kernel_cta_id);
}

void shader_core_ctx::issue_block2core(kernel_info_t &kernel) {
  if (!m_config->gpgpu_concurrent_kernel_sm)
    set_max_cta(kernel);
  else
    assert(occupy_shader_resource_1block(kernel, true));

  kernel.inc_running();

  // find a free CTA context
  unsigned free_cta_hw_id = (unsigned)-1;

  unsigned max_cta_per_core;
  if (!m_config->gpgpu_concurrent_kernel_sm)
    max_cta_per_core = kernel_max_cta_per_shader;
  else
    max_cta_per_core = m_config->max_cta_per_core;
  for (unsigned i = 0; i < max_cta_per_core; i++) {
    if (m_cta_status[i] == 0) {
      free_cta_hw_id = i;
      break;
    }
  }
  assert(free_cta_hw_id != (unsigned)-1);

  // determine hardware threads and warps that will be used for this CTA
  int cta_size = kernel.threads_per_cta();

  // hw warp id = hw thread id mod warp size, so we need to find a range
  // of hardware thread ids corresponding to an integral number of hardware
  // thread ids
  int padded_cta_size = cta_size;
  if (cta_size % m_config->warp_size)
    padded_cta_size =
        ((cta_size / m_config->warp_size) + 1) * (m_config->warp_size);

  unsigned int start_thread, end_thread;

  if (!m_config->gpgpu_concurrent_kernel_sm) {
    start_thread = free_cta_hw_id * padded_cta_size;
    end_thread = start_thread + cta_size;
  } else {
    start_thread = find_available_hwtid(padded_cta_size, true);
    assert((int)start_thread != -1);
    end_thread = start_thread + cta_size;
    assert(m_occupied_cta_to_hwtid.find(free_cta_hw_id) ==
           m_occupied_cta_to_hwtid.end());
    m_occupied_cta_to_hwtid[free_cta_hw_id] = start_thread;
  }

  // reset the microarchitecture state of the selected hardware thread and warp
  // contexts
  reinit(start_thread, end_thread, false);

  // initalize scalar threads and determine which hardware warps they are
  // allocated to bind functional simulation state of threads to hardware
  // resources (simulation)
  warp_set_t warps;
  unsigned nthreads_in_block = 0;
  function_info *kernel_func_info = kernel.entry();
  symbol_table *symtab = kernel_func_info->get_symtab();
  unsigned ctaid;
  if(!m_gpu->gpgpu_ctx->device_runtime->g_custom_cta_scheduling)
    ctaid = kernel.get_next_cta_id_single();
  else {
    if(static_cta_schedule[cta_group_idx[m_sid]].size() > 0) {
      ctaid = static_cta_schedule[cta_group_idx[m_sid]][0];
      static_cta_schedule[cta_group_idx[m_sid]].erase(static_cta_schedule[cta_group_idx[m_sid]].begin());
    }
    else {
      assert(next_cta_group_idx != kernel.num_blocks() / (m_gpu->gpgpu_ctx->device_runtime->g_cta_group_size));
      cta_group_idx[m_sid] = next_cta_group_idx;
      next_cta_group_idx++;
      ctaid = static_cta_schedule[cta_group_idx[m_sid]][0];
      static_cta_schedule[cta_group_idx[m_sid]].erase(static_cta_schedule[cta_group_idx[m_sid]].begin());
    }
  }

  checkpoint *g_checkpoint = new checkpoint();
  for (unsigned i = start_thread; i < end_thread; i++) {
    m_threadState[i].m_cta_id = free_cta_hw_id;
    unsigned warp_id = i / m_config->warp_size;
    nthreads_in_block += sim_init_thread(
        kernel, &m_thread[i], m_sid, i, cta_size - (i - start_thread),
        m_config->n_thread_per_shader, this, free_cta_hw_id, warp_id,
        m_cluster->get_gpu(),ctaid);
    m_threadState[i].m_active = true;
    // load thread local memory and register file
    if (m_gpu->resume_option == 1 && kernel.get_uid() == m_gpu->resume_kernel &&
        ctaid >= m_gpu->resume_CTA && ctaid < m_gpu->checkpoint_CTA_t) {
      char fname[2048];
      snprintf(fname, 2048, "checkpoint_files/thread_%d_%d_reg.txt",
               i % cta_size, ctaid);
      m_thread[i]->resume_reg_thread(fname, symtab);
      char f1name[2048];
      snprintf(f1name, 2048, "checkpoint_files/local_mem_thread_%d_%d_reg.txt",
               i % cta_size, ctaid);
      g_checkpoint->load_global_mem(m_thread[i]->m_local_mem, f1name);
    }
    //
    warps.set(warp_id);
  }
  assert(nthreads_in_block > 0 &&
         nthreads_in_block <=
             m_config->n_thread_per_shader);  // should be at least one, but
                                              // less than max
  m_cta_status[free_cta_hw_id] = nthreads_in_block;

  if (m_gpu->resume_option == 1 && kernel.get_uid() == m_gpu->resume_kernel &&
      ctaid >= m_gpu->resume_CTA && ctaid < m_gpu->checkpoint_CTA_t) {
    char f1name[2048];
    snprintf(f1name, 2048, "checkpoint_files/shared_mem_%d.txt", ctaid);

    g_checkpoint->load_global_mem(m_thread[start_thread]->m_shared_mem, f1name);
  }
  // now that we know which warps are used in this CTA, we can allocate
  // resources for use in CTA-wide barrier operations
  m_barriers.allocate_barrier(free_cta_hw_id, warps);

  // initialize the SIMT stacks and fetch hardware
  init_warps(free_cta_hw_id, start_thread, end_thread, ctaid, cta_size, kernel);
  m_n_active_cta++;
  printf("Issued cta %d to sm %d at cycle: %llu\n", ctaid, m_sid, m_gpu->gpu_sim_cycle);
  shader_CTA_count_log(m_sid, 1);
  SHADER_DPRINTF(LIVENESS,
                 "GPGPU-Sim uArch: cta:%2u, start_tid:%4u, end_tid:%4u, "
                 "initialized @(%lld,%lld)\n",
                 free_cta_hw_id, start_thread, end_thread, m_gpu->gpu_sim_cycle,
                 m_gpu->gpu_tot_sim_cycle);
}

///////////////////////////////////////////////////////////////////////////////////////////

void dram_t::dram_log(int task) {
  if (task == SAMPLELOG) {
    StatAddSample(mrqq_Dist, que_length());
  } else if (task == DUMPLOG) {
    printf("Queue Length DRAM[%d] ", id);
    StatDisp(mrqq_Dist);
  }
}

// Find next clock domain and increment its time
int gpgpu_sim::next_clock_domain(void) {
  double smallest = min3(core_time, icnt_time, dram_time);
  int mask = 0x00;
  if (l2_time <= smallest) {
    smallest = l2_time;
    mask |= L2;
    l2_time += m_config.l2_period;
  }
  if (icnt_time <= smallest) {
    mask |= ICNT;
    icnt_time += m_config.icnt_period;
  }
  if (dram_time <= smallest) {
    mask |= DRAM;
    dram_time += m_config.dram_period;
  }
  if (core_time <= smallest) {
    mask |= CORE;
    core_time += m_config.core_period;
  }
  return mask;
}

void gpgpu_sim::issue_block2core() {
  unsigned last_issued = m_last_cluster_issue;
  for (unsigned i = 0; i < m_shader_config->n_simt_clusters; i++) {
    unsigned idx = (i + last_issued + 1) % m_shader_config->n_simt_clusters;
    unsigned num = m_cluster[idx]->issue_block2core();
    if (num) {
      m_last_cluster_issue = idx;
      m_total_cta_launched += num;
    }
  }
}

unsigned long long g_single_step =
    0;  // set this in gdb to single step the pipeline

void gpgpu_sim::cycle() {
  int clock_mask = next_clock_domain();

  if (clock_mask & CORE) {
    // shader core loading (pop from ICNT into core) follows CORE clock
    for (unsigned i = 0; i < m_shader_config->n_simt_clusters; i++)
      m_cluster[i]->icnt_cycle();
  }
  unsigned partiton_replys_in_parallel_per_cycle = 0;
  if (clock_mask & ICNT) {
    // pop from memory controller to interconnect
    for (unsigned i = 0; i < m_memory_config->m_n_mem_sub_partition; i++) {
      mem_fetch *mf = m_memory_sub_partition[i]->top();
      if (mf) {
        unsigned response_size =
            mf->get_is_write() ? mf->get_ctrl_size() : mf->size();
        if (::icnt_has_buffer(m_shader_config->mem2device(i), response_size)) {
          // if (!mf->get_is_write())
          mf->set_return_timestamp(gpu_sim_cycle + gpu_tot_sim_cycle);
          mf->set_status(IN_ICNT_TO_SHADER, gpu_sim_cycle + gpu_tot_sim_cycle);
          ::icnt_push(m_shader_config->mem2device(i), mf->get_tpc(), mf,
                      response_size);
          m_memory_sub_partition[i]->pop();
          partiton_replys_in_parallel_per_cycle++;
        } else {
          gpu_stall_icnt2sh++;
        }
      } else {
        m_memory_sub_partition[i]->pop();
      }
    }
  }
  partiton_replys_in_parallel += partiton_replys_in_parallel_per_cycle;

  if (clock_mask & DRAM) {
    for (unsigned i = 0; i < m_memory_config->m_n_mem; i++) {
      if (m_memory_config->simple_dram_model)
        m_memory_partition_unit[i]->simple_dram_model_cycle();
      else
        m_memory_partition_unit[i]
            ->dram_cycle();  // Issue the dram command (scheduler + delay model)
      // Update performance counters for DRAM
      m_memory_partition_unit[i]->set_dram_power_stats(
          m_power_stats->pwr_mem_stat->n_cmd[CURRENT_STAT_IDX][i],
          m_power_stats->pwr_mem_stat->n_activity[CURRENT_STAT_IDX][i],
          m_power_stats->pwr_mem_stat->n_nop[CURRENT_STAT_IDX][i],
          m_power_stats->pwr_mem_stat->n_act[CURRENT_STAT_IDX][i],
          m_power_stats->pwr_mem_stat->n_pre[CURRENT_STAT_IDX][i],
          m_power_stats->pwr_mem_stat->n_rd[CURRENT_STAT_IDX][i],
          m_power_stats->pwr_mem_stat->n_wr[CURRENT_STAT_IDX][i],
          m_power_stats->pwr_mem_stat->n_req[CURRENT_STAT_IDX][i]);
    }
  }

  // L2 operations follow L2 clock domain
  unsigned partiton_reqs_in_parallel_per_cycle = 0;
  if (clock_mask & L2) {
    m_power_stats->pwr_mem_stat->l2_cache_stats[CURRENT_STAT_IDX].clear();
    for (unsigned i = 0; i < m_memory_config->m_n_mem_sub_partition; i++) {
      // move memory request from interconnect into memory partition (if not
      // backed up) Note:This needs to be called in DRAM clock domain if there
      // is no L2 cache in the system In the worst case, we may need to push
      // SECTOR_CHUNCK_SIZE requests, so ensure you have enough buffer for them
      if (m_memory_sub_partition[i]->full(SECTOR_CHUNCK_SIZE)) {
        gpu_stall_dramfull++;
      } else {
        mem_fetch *mf = (mem_fetch *)icnt_pop(m_shader_config->mem2device(i));
        m_memory_sub_partition[i]->push(mf, gpu_sim_cycle + gpu_tot_sim_cycle);
        if (mf) partiton_reqs_in_parallel_per_cycle++;
      }
      m_memory_sub_partition[i]->cache_cycle(gpu_sim_cycle + gpu_tot_sim_cycle);
      m_memory_sub_partition[i]->accumulate_L2cache_stats(
          m_power_stats->pwr_mem_stat->l2_cache_stats[CURRENT_STAT_IDX]);
    }
  }
  partiton_reqs_in_parallel += partiton_reqs_in_parallel_per_cycle;
  if (partiton_reqs_in_parallel_per_cycle > 0) {
    partiton_reqs_in_parallel_util += partiton_reqs_in_parallel_per_cycle;
    gpu_sim_cycle_parition_util++;
  }

  if (clock_mask & ICNT) {
    icnt_transfer();
  }

  if (clock_mask & CORE) {
    // L1 cache + shader core pipeline stages
    m_power_stats->pwr_mem_stat->core_cache_stats[CURRENT_STAT_IDX].clear();
    for (unsigned i = 0; i < m_shader_config->n_simt_clusters; i++) {
      if (m_cluster[i]->get_not_completed() || get_more_cta_left()) {
        m_cluster[i]->core_cycle();
        *active_sms += m_cluster[i]->get_n_active_sms();
      }
      // Update core icnt/cache stats for GPUWattch
      m_cluster[i]->get_icnt_stats(
          m_power_stats->pwr_mem_stat->n_simt_to_mem[CURRENT_STAT_IDX][i],
          m_power_stats->pwr_mem_stat->n_mem_to_simt[CURRENT_STAT_IDX][i]);
      m_cluster[i]->get_cache_stats(
          m_power_stats->pwr_mem_stat->core_cache_stats[CURRENT_STAT_IDX]);
      m_cluster[i]->get_current_occupancy(
          gpu_occupancy.aggregate_warp_slot_filled,
          gpu_occupancy.aggregate_theoretical_warp_slots);
    }
    float temp = 0;
    for (unsigned i = 0; i < m_shader_config->num_shader(); i++) {
      temp += m_shader_stats->m_pipeline_duty_cycle[i];
    }
    temp = temp / m_shader_config->num_shader();
    *average_pipeline_duty_cycle = ((*average_pipeline_duty_cycle) + temp);
    // cout<<"Average pipeline duty cycle:
    // "<<*average_pipeline_duty_cycle<<endl;

    if (g_single_step &&
        ((gpu_sim_cycle + gpu_tot_sim_cycle) >= g_single_step)) {
      raise(SIGTRAP);  // Debug breakpoint
    }
    gpu_sim_cycle++;

    if (g_interactive_debugger_enabled) gpgpu_debug();

      // McPAT main cycle (interface with McPAT)
#ifdef GPGPUSIM_POWER_MODEL
    if (m_config.g_power_simulation_enabled) {
      mcpat_cycle(m_config, getShaderCoreConfig(), m_gpgpusim_wrapper,
                  m_power_stats, m_config.gpu_stat_sample_freq,
                  gpu_tot_sim_cycle, gpu_sim_cycle, gpu_tot_sim_insn,
                  gpu_sim_insn);
    }
#endif

    issue_block2core();
    decrement_kernel_latency();

    // Depending on configuration, invalidate the caches once all of threads are
    // completed.
    int all_threads_complete = 1;
    if (m_config.gpgpu_flush_l1_cache) {
      for (unsigned i = 0; i < m_shader_config->n_simt_clusters; i++) {
        if (m_cluster[i]->get_not_completed() == 0)
          m_cluster[i]->cache_invalidate();
        else
          all_threads_complete = 0;
      }
    }

    if (m_config.gpgpu_flush_l2_cache) {
      if (!m_config.gpgpu_flush_l1_cache) {
        for (unsigned i = 0; i < m_shader_config->n_simt_clusters; i++) {
          if (m_cluster[i]->get_not_completed() != 0) {
            all_threads_complete = 0;
            break;
          }
        }
      }

      if (all_threads_complete && !m_memory_config->m_L2_config.disabled()) {
        printf("Flushed L2 caches...\n");
        if (m_memory_config->m_L2_config.get_num_lines()) {
          int dlc = 0;
          for (unsigned i = 0; i < m_memory_config->m_n_mem; i++) {
            dlc = m_memory_sub_partition[i]->flushL2();
            assert(dlc == 0);  // TODO: need to model actual writes to DRAM here
            printf("Dirty lines flushed from L2 %d is %d\n", i, dlc);
          }
        }
      }
    }

    if (!(gpu_sim_cycle % m_config.gpu_stat_sample_freq)) {
      time_t days, hrs, minutes, sec;
      time_t curr_time;
      time(&curr_time);
      unsigned long long elapsed_time =
          MAX(curr_time - gpgpu_ctx->the_gpgpusim->g_simulation_starttime, 1);
      if ((elapsed_time - last_liveness_message_time) >=
              m_config.liveness_message_freq &&
          DTRACE(LIVENESS)) {
        days = elapsed_time / (3600 * 24);
        hrs = elapsed_time / 3600 - 24 * days;
        minutes = elapsed_time / 60 - 60 * (hrs + 24 * days);
        sec = elapsed_time - 60 * (minutes + 60 * (hrs + 24 * days));

        unsigned long long active = 0, total = 0;
        for (unsigned i = 0; i < m_shader_config->n_simt_clusters; i++) {
          m_cluster[i]->get_current_occupancy(active, total);
        }
        DPRINTFG(LIVENESS,
                 "uArch: inst.: %lld (ipc=%4.1f, occ=%0.4f\% [%llu / %llu]) "
                 "sim_rate=%u (inst/sec) elapsed = %u:%u:%02u:%02u / %s",
                 gpu_tot_sim_insn + gpu_sim_insn,
                 (double)gpu_sim_insn / (double)gpu_sim_cycle,
                 float(active) / float(total) * 100, active, total,
                 (unsigned)((gpu_tot_sim_insn + gpu_sim_insn) / elapsed_time),
                 (unsigned)days, (unsigned)hrs, (unsigned)minutes,
                 (unsigned)sec, ctime(&curr_time));
        fflush(stdout);
        last_liveness_message_time = elapsed_time;
      }
      visualizer_printstat();
      m_memory_stats->memlatstat_lat_pw();
      if (m_config.gpgpu_runtime_stat &&
          (m_config.gpu_runtime_stat_flag != 0)) {
        if (m_config.gpu_runtime_stat_flag & GPU_RSTAT_BW_STAT) {
          for (unsigned i = 0; i < m_memory_config->m_n_mem; i++)
            m_memory_partition_unit[i]->print_stat(stdout);
          printf("maxmrqlatency = %d \n", m_memory_stats->max_mrq_latency);
          printf("maxmflatency = %d \n", m_memory_stats->max_mf_latency);
        }
        if (m_config.gpu_runtime_stat_flag & GPU_RSTAT_SHD_INFO)
          shader_print_runtime_stat(stdout);
        if (m_config.gpu_runtime_stat_flag & GPU_RSTAT_L1MISS)
          shader_print_l1_miss_stat(stdout);
        if (m_config.gpu_runtime_stat_flag & GPU_RSTAT_SCHED)
          shader_print_scheduler_stat(stdout, false);
      }
    }

    if (!(gpu_sim_cycle % 300000)) {
      // deadlock detection
      if (m_config.gpu_deadlock_detect && gpu_sim_insn == last_gpu_sim_insn) {
        gpu_deadlock = true;
      } else {
        last_gpu_sim_insn = gpu_sim_insn;
      }
    }
    try_snap_shot(gpu_sim_cycle);
    spill_log_to_file(stdout, 0, gpu_sim_cycle);

#if (CUDART_VERSION >= 5000)
    // launch device kernel
    gpgpu_ctx->device_runtime->launch_one_device_kernel();
#endif
  }
}

void shader_core_ctx::dump_warp_state(FILE *fout) const {
  fprintf(fout, "\n");
  fprintf(fout, "per warp functional simulation status:\n");
  for (unsigned w = 0; w < m_config->max_warps_per_shader; w++)
    m_warp[w]->print(fout);
}

void gpgpu_sim::perf_memcpy_to_gpu(size_t dst_start_addr, size_t count) {
  if (m_memory_config->m_perf_sim_memcpy) {
    // if(!m_config.trace_driven_mode)    //in trace-driven mode, CUDA runtime
    // can start nre data structure at any position 	assert (dst_start_addr %
    // 32
    //== 0);

    for (unsigned counter = 0; counter < count; counter += 32) {
      const unsigned wr_addr = dst_start_addr + counter;
      addrdec_t raw_addr;
      mem_access_sector_mask_t mask;
      mask.set(wr_addr % 128 / 32);
      m_memory_config->m_address_mapping.addrdec_tlx(wr_addr, &raw_addr);
      const unsigned partition_id =
          raw_addr.sub_partition /
          m_memory_config->m_n_sub_partition_per_memory_channel;
      m_memory_partition_unit[partition_id]->handle_memcpy_to_gpu(
          wr_addr, raw_addr.sub_partition, mask);
    }
  }
}

void gpgpu_sim::dump_rt_pipeline(int sid) const {
  printf("Dumping RT core pipeline state...\n");
  m_cluster[m_shader_config->sid_to_cluster(sid)]->display_rt_pipeline(
          sid, stdout, 0x40 & 0x2E);
}

void gpgpu_sim::dump_pipeline(int mask, int s, int m) const {
  /*
     You may want to use this function while running GPGPU-Sim in gdb.
     One way to do that is add the following to your .gdbinit file:

        define dp
           call g_the_gpu.dump_pipeline_impl((0x40|0x4|0x1),$arg0,0)
        end

     Then, typing "dp 3" will show the contents of the pipeline for shader
     core 3.
  */

  printf("Dumping pipeline state...\n");
  if (!mask) mask = 0xFFFFFFFF;
  for (unsigned i = 0; i < m_shader_config->n_simt_clusters; i++) {
    if (s != -1) {
      i = s;
    }
    if (mask & 1)
      m_cluster[m_shader_config->sid_to_cluster(i)]->display_pipeline(
          i, stdout, 1, mask & 0x2E);
    if (s != -1) {
      break;
    }
  }
  if (mask & 0x10000) {
    for (unsigned i = 0; i < m_memory_config->m_n_mem; i++) {
      if (m != -1) {
        i = m;
      }
      printf("DRAM / memory controller %u:\n", i);
      if (mask & 0x100000) m_memory_partition_unit[i]->print_stat(stdout);
      if (mask & 0x1000000) m_memory_partition_unit[i]->visualize();
      if (mask & 0x10000000) m_memory_partition_unit[i]->print(stdout);
      if (m != -1) {
        break;
      }
    }
  }
  fflush(stdout);
}

const shader_core_config *gpgpu_sim::getShaderCoreConfig() {
  return m_shader_config;
}

const memory_config *gpgpu_sim::getMemoryConfig() { return m_memory_config; }

simt_core_cluster *gpgpu_sim::getSIMTCluster() { return *m_cluster; }
